// Package spinnaker provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package spinnaker

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CloudEventSpecVersion.
const (
	N03 CloudEventSpecVersion = "0.3"
	N10 CloudEventSpecVersion = "1.0"
)

// Defines values for CompilationCustomizerPhase.
const (
	CANONICALIZATION     CompilationCustomizerPhase = "CANONICALIZATION"
	CLASSGENERATION      CompilationCustomizerPhase = "CLASS_GENERATION"
	CONVERSION           CompilationCustomizerPhase = "CONVERSION"
	FINALIZATION         CompilationCustomizerPhase = "FINALIZATION"
	INITIALIZATION       CompilationCustomizerPhase = "INITIALIZATION"
	INSTRUCTIONSELECTION CompilationCustomizerPhase = "INSTRUCTION_SELECTION"
	OUTPUT               CompilationCustomizerPhase = "OUTPUT"
	PARSING              CompilationCustomizerPhase = "PARSING"
	SEMANTICANALYSIS     CompilationCustomizerPhase = "SEMANTIC_ANALYSIS"
)

// ASTNode defines model for ASTNode.
type ASTNode struct {
	ColumnNumber     *int32                             `json:"columnNumber,omitempty"`
	LastColumnNumber *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber   *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber       *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap      *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData     *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition   *ASTNode                           `json:"sourcePosition,omitempty"`
	Text             *string                            `json:"text,omitempty"`
}

// Account defines model for Account.
type Account struct {
	AccountId               *string              `json:"accountId,omitempty"`
	Name                    *string              `json:"name,omitempty"`
	Permissions             *map[string][]string `json:"permissions,omitempty"`
	RequiredGroupMembership *[]string            `json:"requiredGroupMembership,omitempty"`
	Type                    *string              `json:"type,omitempty"`
}

// AccountDefinition Account definition body including a discriminator field named "type" with the account type.
type AccountDefinition struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AccountDetails defines model for AccountDetails.
type AccountDetails struct {
	AccountId                   *string              `json:"accountId,omitempty"`
	AccountType                 *string              `json:"accountType,omitempty"`
	ChallengeDestructiveActions *bool                `json:"challengeDestructiveActions,omitempty"`
	CloudProvider               *string              `json:"cloudProvider,omitempty"`
	Environment                 *string              `json:"environment,omitempty"`
	Name                        *string              `json:"name,omitempty"`
	Permissions                 *map[string][]string `json:"permissions,omitempty"`
	PrimaryAccount              *bool                `json:"primaryAccount,omitempty"`
	RequiredGroupMembership     *[]string            `json:"requiredGroupMembership,omitempty"`
	Type                        *string              `json:"type,omitempty"`
}

// AnnotatedNode defines model for AnnotatedNode.
type AnnotatedNode struct {
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
}

// AnnotationNode defines model for AnnotationNode.
type AnnotationNode struct {
	AllowedTargets   *int32                             `json:"allowedTargets,omitempty"`
	BuiltIn          *bool                              `json:"builtIn,omitempty"`
	ClassNode        *ClassNode                         `json:"classNode,omitempty"`
	ClassRetention   *bool                              `json:"classRetention,omitempty"`
	ColumnNumber     *int32                             `json:"columnNumber,omitempty"`
	LastColumnNumber *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber   *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber       *int32                             `json:"lineNumber,omitempty"`
	Members          *map[string]Expression             `json:"members,omitempty"`
	MetaDataMap      *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData     *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	RuntimeRetention *bool                              `json:"runtimeRetention,omitempty"`
	SourcePosition   *ASTNode                           `json:"sourcePosition,omitempty"`
	SourceRetention  *bool                              `json:"sourceRetention,omitempty"`
	Text             *string                            `json:"text,omitempty"`
}

// BlockStatement defines model for BlockStatement.
type BlockStatement struct {
	ColumnNumber     *int32                             `json:"columnNumber,omitempty"`
	Empty            *bool                              `json:"empty,omitempty"`
	LastColumnNumber *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber   *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber       *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap      *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData     *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition   *ASTNode                           `json:"sourcePosition,omitempty"`
	// Deprecated:
	StatementLabel  *string        `json:"statementLabel,omitempty"`
	StatementLabels *[]string      `json:"statementLabels,omitempty"`
	Statements      *[]Statement   `json:"statements,omitempty"`
	Text            *string        `json:"text,omitempty"`
	VariableScope   *VariableScope `json:"variableScope,omitempty"`
}

// BytecodeProcessor defines model for BytecodeProcessor.
type BytecodeProcessor = map[string]interface{}

// CSTNode defines model for CSTNode.
type CSTNode struct {
	AnExpression *bool   `json:"anExpression,omitempty"`
	Description  *string `json:"description,omitempty"`
	Empty        *bool   `json:"empty,omitempty"`
	Meaning      *int32  `json:"meaning,omitempty"`
	Root         *Token  `json:"root,omitempty"`
	RootText     *string `json:"rootText,omitempty"`
	StartColumn  *int32  `json:"startColumn,omitempty"`
	StartLine    *int32  `json:"startLine,omitempty"`
	Type         *int32  `json:"type,omitempty"`
}

// CachedClass defines model for CachedClass.
type CachedClass struct {
	CachedClass        *CachedClass         `json:"cachedClass,omitempty"`
	CachedSuperClass   *CachedClass         `json:"cachedSuperClass,omitempty"`
	CallSiteLoader     *CallSiteClassLoader `json:"callSiteLoader,omitempty"`
	ClassInfo          *ClassInfo           `json:"classInfo,omitempty"`
	Constructors       *[]CachedConstructor `json:"constructors,omitempty"`
	DeclaredInterfaces *[]CachedClass       `json:"declaredInterfaces,omitempty"`
	Fields             *[]CachedField       `json:"fields,omitempty"`
	Hierarchy          *[]ClassInfo         `json:"hierarchy,omitempty"`
	Interface          *bool                `json:"interface,omitempty"`
	Interfaces         *[]CachedClass       `json:"interfaces,omitempty"`
	IsArray            *bool                `json:"isArray,omitempty"`
	IsInterface        *bool                `json:"isInterface,omitempty"`
	IsNumber           *bool                `json:"isNumber,omitempty"`
	IsPrimitive        *bool                `json:"isPrimitive,omitempty"`
	Methods            *[]CachedMethod      `json:"methods,omitempty"`
	Modifiers          *int32               `json:"modifiers,omitempty"`
	MopMethods         *[]CachedMethod      `json:"mopMethods,omitempty"`
	Name               *string              `json:"name,omitempty"`
	NewMetaMethods     *[]MetaMethod        `json:"newMetaMethods,omitempty"`
	Primitive          *bool                `json:"primitive,omitempty"`
	SuperClassDistance *int32               `json:"superClassDistance,omitempty"`
	TypeDescription    *string              `json:"typeDescription,omitempty"`
	Void               *bool                `json:"void,omitempty"`
}

// CachedConstructor defines model for CachedConstructor.
type CachedConstructor struct {
	CachedClass       *CachedClass `json:"cachedClass,omitempty"`
	CachedConstructor *struct {
		// Deprecated:
		Accessible              *bool `json:"accessible,omitempty"`
		AnnotatedExceptionTypes *[]struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedExceptionTypes,omitempty"`
		AnnotatedParameterTypes *[]struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedParameterTypes,omitempty"`
		AnnotatedReceiverType *struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedReceiverType,omitempty"`
		AnnotatedReturnType *struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedReturnType,omitempty"`
		Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
		DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		GenericExceptionTypes *[]struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericExceptionTypes,omitempty"`
		GenericParameterTypes *[]struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericParameterTypes,omitempty"`
		Modifiers            *int32                      `json:"modifiers,omitempty"`
		Name                 *string                     `json:"name,omitempty"`
		ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
		ParameterCount       *int32                      `json:"parameterCount,omitempty"`
		Parameters           *[]struct {
			AnnotatedType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedType,omitempty"`
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			DeclaringExecutable *struct {
				// Deprecated:
				Accessible              *bool `json:"accessible,omitempty"`
				AnnotatedExceptionTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedExceptionTypes,omitempty"`
				AnnotatedParameterTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedParameterTypes,omitempty"`
				AnnotatedReceiverType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReceiverType,omitempty"`
				AnnotatedReturnType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReturnType,omitempty"`
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				GenericExceptionTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericExceptionTypes,omitempty"`
				GenericParameterTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericParameterTypes,omitempty"`
				Modifiers            *int32                      `json:"modifiers,omitempty"`
				Name                 *string                     `json:"name,omitempty"`
				ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
				ParameterCount       *int32                      `json:"parameterCount,omitempty"`
				Synthetic            *bool                       `json:"synthetic,omitempty"`
				TypeParameters       *[]struct {
					AnnotatedBounds *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedBounds,omitempty"`
					Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
					Bounds      *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"bounds,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					GenericDeclaration  *map[string]interface{}   `json:"genericDeclaration,omitempty"`
					Name                *string                   `json:"name,omitempty"`
					TypeName            *string                   `json:"typeName,omitempty"`
				} `json:"typeParameters,omitempty"`
				VarArgs *bool `json:"varArgs,omitempty"`
			} `json:"declaringExecutable,omitempty"`
			Implicit          *bool   `json:"implicit,omitempty"`
			Modifiers         *int32  `json:"modifiers,omitempty"`
			Name              *string `json:"name,omitempty"`
			NamePresent       *bool   `json:"namePresent,omitempty"`
			ParameterizedType *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"parameterizedType,omitempty"`
			Synthetic *bool `json:"synthetic,omitempty"`
			VarArgs   *bool `json:"varArgs,omitempty"`
		} `json:"parameters,omitempty"`
		Synthetic      *bool `json:"synthetic,omitempty"`
		TypeParameters *[]struct {
			AnnotatedBounds *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedBounds,omitempty"`
			Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
			Bounds      *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"bounds,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			GenericDeclaration  *struct {
				// Deprecated:
				Accessible              *bool `json:"accessible,omitempty"`
				AnnotatedExceptionTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedExceptionTypes,omitempty"`
				AnnotatedParameterTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedParameterTypes,omitempty"`
				AnnotatedReceiverType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReceiverType,omitempty"`
				AnnotatedReturnType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReturnType,omitempty"`
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				GenericExceptionTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericExceptionTypes,omitempty"`
				GenericParameterTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericParameterTypes,omitempty"`
				Modifiers            *int32                      `json:"modifiers,omitempty"`
				Name                 *string                     `json:"name,omitempty"`
				ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
				ParameterCount       *int32                      `json:"parameterCount,omitempty"`
				Parameters           *[]struct {
					AnnotatedType *struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedType,omitempty"`
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					DeclaringExecutable *struct {
						// Deprecated:
						Accessible              *bool `json:"accessible,omitempty"`
						AnnotatedExceptionTypes *[]struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedExceptionTypes,omitempty"`
						AnnotatedParameterTypes *[]struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedParameterTypes,omitempty"`
						AnnotatedReceiverType *struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedReceiverType,omitempty"`
						AnnotatedReturnType *struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedReturnType,omitempty"`
						Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						GenericExceptionTypes *[]struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"genericExceptionTypes,omitempty"`
						GenericParameterTypes *[]struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"genericParameterTypes,omitempty"`
						Modifiers            *int32                      `json:"modifiers,omitempty"`
						Name                 *string                     `json:"name,omitempty"`
						ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
						ParameterCount       *int32                      `json:"parameterCount,omitempty"`
						Synthetic            *bool                       `json:"synthetic,omitempty"`
						TypeParameters       *[]struct {
							AnnotatedBounds *[]struct {
								Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
								DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
								Type                *struct {
									TypeName *string `json:"typeName,omitempty"`
								} `json:"type,omitempty"`
							} `json:"annotatedBounds,omitempty"`
							Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
							Bounds      *[]struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"bounds,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							GenericDeclaration  *map[string]interface{}   `json:"genericDeclaration,omitempty"`
							Name                *string                   `json:"name,omitempty"`
							TypeName            *string                   `json:"typeName,omitempty"`
						} `json:"typeParameters,omitempty"`
						VarArgs *bool `json:"varArgs,omitempty"`
					} `json:"declaringExecutable,omitempty"`
					Implicit          *bool   `json:"implicit,omitempty"`
					Modifiers         *int32  `json:"modifiers,omitempty"`
					Name              *string `json:"name,omitempty"`
					NamePresent       *bool   `json:"namePresent,omitempty"`
					ParameterizedType *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"parameterizedType,omitempty"`
					Synthetic *bool `json:"synthetic,omitempty"`
					VarArgs   *bool `json:"varArgs,omitempty"`
				} `json:"parameters,omitempty"`
				Synthetic *bool `json:"synthetic,omitempty"`
				VarArgs   *bool `json:"varArgs,omitempty"`
			} `json:"genericDeclaration,omitempty"`
			Name     *string `json:"name,omitempty"`
			TypeName *string `json:"typeName,omitempty"`
		} `json:"typeParameters,omitempty"`
		VarArgs *bool `json:"varArgs,omitempty"`
	} `json:"cachedConstructor,omitempty"`
	Modifiers   *int32 `json:"modifiers,omitempty"`
	VargsMethod *bool  `json:"vargsMethod,omitempty"`
}

// CachedField defines model for CachedField.
type CachedField struct {
	CachedField *struct {
		// Deprecated:
		Accessible    *bool `json:"accessible,omitempty"`
		AnnotatedType *struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedType,omitempty"`
		Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
		DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		EnumConstant        *bool                     `json:"enumConstant,omitempty"`
		GenericType         *struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericType,omitempty"`
		Modifiers *int32  `json:"modifiers,omitempty"`
		Name      *string `json:"name,omitempty"`
		Synthetic *bool   `json:"synthetic,omitempty"`
	} `json:"cachedField,omitempty"`
	Final     *bool   `json:"final,omitempty"`
	Modifiers *int32  `json:"modifiers,omitempty"`
	Name      *string `json:"name,omitempty"`
	Static    *bool   `json:"static,omitempty"`
}

// CachedMethod defines model for CachedMethod.
type CachedMethod struct {
	Abstract     *bool        `json:"abstract,omitempty"`
	Cacheable    *bool        `json:"cacheable,omitempty"`
	CachedClass  *CachedClass `json:"cachedClass,omitempty"`
	CachedMethod *struct {
		// Deprecated:
		Accessible              *bool `json:"accessible,omitempty"`
		AnnotatedExceptionTypes *[]struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedExceptionTypes,omitempty"`
		AnnotatedParameterTypes *[]struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedParameterTypes,omitempty"`
		AnnotatedReceiverType *struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedReceiverType,omitempty"`
		AnnotatedReturnType *struct {
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Type                *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"type,omitempty"`
		} `json:"annotatedReturnType,omitempty"`
		Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
		Bridge                *bool                     `json:"bridge,omitempty"`
		DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		Default               *bool                     `json:"default,omitempty"`
		DefaultValue          *map[string]interface{}   `json:"defaultValue,omitempty"`
		GenericExceptionTypes *[]struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericExceptionTypes,omitempty"`
		GenericParameterTypes *[]struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericParameterTypes,omitempty"`
		GenericReturnType *struct {
			TypeName *string `json:"typeName,omitempty"`
		} `json:"genericReturnType,omitempty"`
		Modifiers            *int32                      `json:"modifiers,omitempty"`
		Name                 *string                     `json:"name,omitempty"`
		ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
		ParameterCount       *int32                      `json:"parameterCount,omitempty"`
		Parameters           *[]struct {
			AnnotatedType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedType,omitempty"`
			Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			DeclaringExecutable *struct {
				// Deprecated:
				Accessible              *bool `json:"accessible,omitempty"`
				AnnotatedExceptionTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedExceptionTypes,omitempty"`
				AnnotatedParameterTypes *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedParameterTypes,omitempty"`
				AnnotatedReceiverType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReceiverType,omitempty"`
				AnnotatedReturnType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedReturnType,omitempty"`
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				GenericExceptionTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericExceptionTypes,omitempty"`
				GenericParameterTypes *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"genericParameterTypes,omitempty"`
				Modifiers            *int32                      `json:"modifiers,omitempty"`
				Name                 *string                     `json:"name,omitempty"`
				ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
				ParameterCount       *int32                      `json:"parameterCount,omitempty"`
				Synthetic            *bool                       `json:"synthetic,omitempty"`
				TypeParameters       *[]struct {
					AnnotatedBounds *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedBounds,omitempty"`
					Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
					Bounds      *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"bounds,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					GenericDeclaration  *map[string]interface{}   `json:"genericDeclaration,omitempty"`
					Name                *string                   `json:"name,omitempty"`
					TypeName            *string                   `json:"typeName,omitempty"`
				} `json:"typeParameters,omitempty"`
				VarArgs *bool `json:"varArgs,omitempty"`
			} `json:"declaringExecutable,omitempty"`
			Implicit          *bool   `json:"implicit,omitempty"`
			Modifiers         *int32  `json:"modifiers,omitempty"`
			Name              *string `json:"name,omitempty"`
			NamePresent       *bool   `json:"namePresent,omitempty"`
			ParameterizedType *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"parameterizedType,omitempty"`
			Synthetic *bool `json:"synthetic,omitempty"`
			VarArgs   *bool `json:"varArgs,omitempty"`
		} `json:"parameters,omitempty"`
		Synthetic      *bool `json:"synthetic,omitempty"`
		TypeParameters *[]struct {
			AnnotatedBounds *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedBounds,omitempty"`
			Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
			Bounds      *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"bounds,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Name                *string                   `json:"name,omitempty"`
			TypeName            *string                   `json:"typeName,omitempty"`
		} `json:"typeParameters,omitempty"`
		VarArgs *bool `json:"varArgs,omitempty"`
	} `json:"cachedMethod,omitempty"`
	DeclaringClass    *CachedClass    `json:"declaringClass,omitempty"`
	Default           *bool           `json:"default,omitempty"`
	Descriptor        *string         `json:"descriptor,omitempty"`
	Modifiers         *int32          `json:"modifiers,omitempty"`
	MopName           *string         `json:"mopName,omitempty"`
	Name              *string         `json:"name,omitempty"`
	ParamTypes        *ParameterTypes `json:"paramTypes,omitempty"`
	ParamsCount       *int32          `json:"paramsCount,omitempty"`
	Private           *bool           `json:"private,omitempty"`
	Protected         *bool           `json:"protected,omitempty"`
	Public            *bool           `json:"public,omitempty"`
	Signature         *string         `json:"signature,omitempty"`
	Static            *bool           `json:"static,omitempty"`
	Synthetic         *bool           `json:"synthetic,omitempty"`
	TransformedMethod *CachedMethod   `json:"transformedMethod,omitempty"`
	VargsMethod       *bool           `json:"vargsMethod,omitempty"`
}

// CallSiteClassLoader defines model for CallSiteClassLoader.
type CallSiteClassLoader struct {
	DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
	DefinedPackages        *[]struct {
		Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
		DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
		ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
		ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
		Name                  *string                   `json:"name,omitempty"`
		Sealed                *bool                     `json:"sealed,omitempty"`
		SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
		SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
		SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
	} `json:"definedPackages,omitempty"`
	Klazz *struct {
		// Deprecated:
		Enqueued *bool `json:"enqueued,omitempty"`
	} `json:"klazz,omitempty"`
	Name   *string `json:"name,omitempty"`
	Parent *struct {
		DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
		DefinedPackages        *[]struct {
			Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
			ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
			ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
			Name                  *string                   `json:"name,omitempty"`
			Sealed                *bool                     `json:"sealed,omitempty"`
			SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
			SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
			SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
		} `json:"definedPackages,omitempty"`
		Name                        *string `json:"name,omitempty"`
		RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		UnnamedModule               *struct {
			Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
			ClassLoader *struct {
				DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
				DefinedPackages        *[]struct {
					Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
					ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
					ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
					Name                  *string                   `json:"name,omitempty"`
					Sealed                *bool                     `json:"sealed,omitempty"`
					SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
					SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
					SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
				} `json:"definedPackages,omitempty"`
				Name                        *string `json:"name,omitempty"`
				RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
			} `json:"classLoader,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Descriptor          *struct {
				Automatic *bool `json:"automatic,omitempty"`
				Open      *bool `json:"open,omitempty"`
			} `json:"descriptor,omitempty"`
			Layer    *map[string]interface{} `json:"layer,omitempty"`
			Name     *string                 `json:"name,omitempty"`
			Named    *bool                   `json:"named,omitempty"`
			Packages *[]string               `json:"packages,omitempty"`
		} `json:"unnamedModule,omitempty"`
	} `json:"parent,omitempty"`
	RegisteredAsParallelCapable *bool `json:"registeredAsParallelCapable,omitempty"`
	UnnamedModule               *struct {
		Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
		ClassLoader *struct {
			DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
			DefinedPackages        *[]struct {
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
				ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
				ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
				Name                  *string                   `json:"name,omitempty"`
				Sealed                *bool                     `json:"sealed,omitempty"`
				SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
				SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
				SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
			} `json:"definedPackages,omitempty"`
			Name                        *string `json:"name,omitempty"`
			RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		} `json:"classLoader,omitempty"`
		DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		Descriptor          *struct {
			Automatic *bool `json:"automatic,omitempty"`
			Open      *bool `json:"open,omitempty"`
		} `json:"descriptor,omitempty"`
		Layer    *map[string]interface{} `json:"layer,omitempty"`
		Name     *string                 `json:"name,omitempty"`
		Named    *bool                   `json:"named,omitempty"`
		Packages *[]string               `json:"packages,omitempty"`
	} `json:"unnamedModule,omitempty"`
}

// ClassInfo defines model for ClassInfo.
type ClassInfo struct {
	ArtifactClassLoader *ClassLoaderForClassArtifacts `json:"artifactClassLoader,omitempty"`
	CachedClass         *CachedClass                  `json:"cachedClass,omitempty"`
	Hash                *int32                        `json:"hash,omitempty"`
	MetaClassForClass   *MetaClass                    `json:"metaClassForClass,omitempty"`
	ModifiedExpando     *ExpandoMetaClass             `json:"modifiedExpando,omitempty"`
	StrongMetaClass     *MetaClass                    `json:"strongMetaClass,omitempty"`
	Version             *int32                        `json:"version,omitempty"`
	WeakMetaClass       *MetaClass                    `json:"weakMetaClass,omitempty"`
}

// ClassLoaderForClassArtifacts defines model for ClassLoaderForClassArtifacts.
type ClassLoaderForClassArtifacts struct {
	DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
	DefinedPackages        *[]struct {
		Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
		DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
		ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
		ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
		Name                  *string                   `json:"name,omitempty"`
		Sealed                *bool                     `json:"sealed,omitempty"`
		SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
		SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
		SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
	} `json:"definedPackages,omitempty"`
	Klazz *struct {
		// Deprecated:
		Enqueued *bool `json:"enqueued,omitempty"`
	} `json:"klazz,omitempty"`
	Name   *string `json:"name,omitempty"`
	Parent *struct {
		DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
		DefinedPackages        *[]struct {
			Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
			ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
			ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
			Name                  *string                   `json:"name,omitempty"`
			Sealed                *bool                     `json:"sealed,omitempty"`
			SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
			SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
			SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
		} `json:"definedPackages,omitempty"`
		Name                        *string `json:"name,omitempty"`
		RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		UnnamedModule               *struct {
			Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
			ClassLoader *struct {
				DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
				DefinedPackages        *[]struct {
					Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
					ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
					ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
					Name                  *string                   `json:"name,omitempty"`
					Sealed                *bool                     `json:"sealed,omitempty"`
					SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
					SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
					SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
				} `json:"definedPackages,omitempty"`
				Name                        *string `json:"name,omitempty"`
				RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
			} `json:"classLoader,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Descriptor          *struct {
				Automatic *bool `json:"automatic,omitempty"`
				Open      *bool `json:"open,omitempty"`
			} `json:"descriptor,omitempty"`
			Layer    *map[string]interface{} `json:"layer,omitempty"`
			Name     *string                 `json:"name,omitempty"`
			Named    *bool                   `json:"named,omitempty"`
			Packages *[]string               `json:"packages,omitempty"`
		} `json:"unnamedModule,omitempty"`
	} `json:"parent,omitempty"`
	RegisteredAsParallelCapable *bool `json:"registeredAsParallelCapable,omitempty"`
	UnnamedModule               *struct {
		Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
		ClassLoader *struct {
			DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
			DefinedPackages        *[]struct {
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
				ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
				ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
				Name                  *string                   `json:"name,omitempty"`
				Sealed                *bool                     `json:"sealed,omitempty"`
				SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
				SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
				SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
			} `json:"definedPackages,omitempty"`
			Name                        *string `json:"name,omitempty"`
			RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		} `json:"classLoader,omitempty"`
		DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		Descriptor          *struct {
			Automatic *bool `json:"automatic,omitempty"`
			Open      *bool `json:"open,omitempty"`
		} `json:"descriptor,omitempty"`
		Layer    *map[string]interface{} `json:"layer,omitempty"`
		Name     *string                 `json:"name,omitempty"`
		Named    *bool                   `json:"named,omitempty"`
		Packages *[]string               `json:"packages,omitempty"`
	} `json:"unnamedModule,omitempty"`
}

// ClassNode defines model for ClassNode.
type ClassNode struct {
	Abstract                    *bool                              `json:"abstract,omitempty"`
	AbstractMethods             *[]MethodNode                      `json:"abstractMethods,omitempty"`
	AllDeclaredMethods          *[]MethodNode                      `json:"allDeclaredMethods,omitempty"`
	AllInterfaces               *[]ClassNode                       `json:"allInterfaces,omitempty"`
	Annotated                   *bool                              `json:"annotated,omitempty"`
	AnnotationDefinition        *bool                              `json:"annotationDefinition,omitempty"`
	Annotations                 *[]AnnotationNode                  `json:"annotations,omitempty"`
	Array                       *bool                              `json:"array,omitempty"`
	ColumnNumber                *int32                             `json:"columnNumber,omitempty"`
	CompileUnit                 *CompileUnit                       `json:"compileUnit,omitempty"`
	ComponentType               *ClassNode                         `json:"componentType,omitempty"`
	DeclaredConstructors        *[]ConstructorNode                 `json:"declaredConstructors,omitempty"`
	DeclaredMethodsMap          *map[string]MethodNode             `json:"declaredMethodsMap,omitempty"`
	DeclaringClass              *ClassNode                         `json:"declaringClass,omitempty"`
	DerivedFromGroovyObject     *bool                              `json:"derivedFromGroovyObject,omitempty"`
	EnclosingMethod             *MethodNode                        `json:"enclosingMethod,omitempty"`
	Enum                        *bool                              `json:"enum,omitempty"`
	FieldIndex                  *map[string]FieldNode              `json:"fieldIndex,omitempty"`
	Fields                      *[]FieldNode                       `json:"fields,omitempty"`
	GenericsPlaceHolder         *bool                              `json:"genericsPlaceHolder,omitempty"`
	GenericsTypes               *[]GenericsType                    `json:"genericsTypes,omitempty"`
	Groovydoc                   *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition     *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	InnerClasses                *map[string]interface{}            `json:"innerClasses,omitempty"`
	Instance                    *AnnotatedNode                     `json:"instance,omitempty"`
	Interface                   *bool                              `json:"interface,omitempty"`
	Interfaces                  *[]ClassNode                       `json:"interfaces,omitempty"`
	LastColumnNumber            *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber              *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber                  *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap                 *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Methods                     *[]MethodNode                      `json:"methods,omitempty"`
	Mixins                      *[]MixinNode                       `json:"mixins,omitempty"`
	Modifiers                   *int32                             `json:"modifiers,omitempty"`
	Module                      *ModuleNode                        `json:"module,omitempty"`
	Name                        *string                            `json:"name,omitempty"`
	NameWithoutPackage          *string                            `json:"nameWithoutPackage,omitempty"`
	NodeMetaData                *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	ObjectInitializerStatements *[]Statement                       `json:"objectInitializerStatements,omitempty"`
	OuterClass                  *ClassNode                         `json:"outerClass,omitempty"`
	OuterClasses                *[]ClassNode                       `json:"outerClasses,omitempty"`
	Package                     *PackageNode                       `json:"package,omitempty"`
	PackageName                 *string                            `json:"packageName,omitempty"`
	PermittedSubclasses         *[]ClassNode                       `json:"permittedSubclasses,omitempty"`
	PlainNodeReference          *ClassNode                         `json:"plainNodeReference,omitempty"`
	PrimaryClassNode            *bool                              `json:"primaryClassNode,omitempty"`
	Properties                  *[]PropertyNode                    `json:"properties,omitempty"`
	Record                      *bool                              `json:"record,omitempty"`
	// Deprecated:
	RecordComponentNodes *[]RecordComponentNode `json:"recordComponentNodes,omitempty"`
	RecordComponents     *[]RecordComponentNode `json:"recordComponents,omitempty"`
	Redirect             *ClassNode             `json:"redirect,omitempty"`
	RedirectNode         *bool                  `json:"redirectNode,omitempty"`
	Resolved             *bool                  `json:"resolved,omitempty"`
	Script               *bool                  `json:"script,omitempty"`
	ScriptBody           *bool                  `json:"scriptBody,omitempty"`
	Sealed               *bool                  `json:"sealed,omitempty"`
	SourcePosition       *ASTNode               `json:"sourcePosition,omitempty"`
	StaticClass          *bool                  `json:"staticClass,omitempty"`
	SuperClass           *ClassNode             `json:"superClass,omitempty"`
	Synthetic            *bool                  `json:"synthetic,omitempty"`
	SyntheticPublic      *bool                  `json:"syntheticPublic,omitempty"`
	Text                 *string                `json:"text,omitempty"`
	TypeAnnotations      *[]AnnotationNode      `json:"typeAnnotations,omitempty"`
	UnresolvedInterfaces *[]ClassNode           `json:"unresolvedInterfaces,omitempty"`
	UnresolvedName       *string                `json:"unresolvedName,omitempty"`
	UnresolvedSuperClass *ClassNode             `json:"unresolvedSuperClass,omitempty"`
	UsingGenerics        *bool                  `json:"usingGenerics,omitempty"`
}

// CloudEvent defines model for CloudEvent.
type CloudEvent struct {
	AttributeNames  *[]string              `json:"attributeNames,omitempty"`
	Data            *CloudEventData        `json:"data,omitempty"`
	DataContentType *string                `json:"dataContentType,omitempty"`
	DataSchema      *string                `json:"dataSchema,omitempty"`
	ExtensionNames  *[]string              `json:"extensionNames,omitempty"`
	Id              *string                `json:"id,omitempty"`
	Source          *string                `json:"source,omitempty"`
	SpecVersion     *CloudEventSpecVersion `json:"specVersion,omitempty"`
	Subject         *string                `json:"subject,omitempty"`
	Time            *time.Time             `json:"time,omitempty"`
	Type            *string                `json:"type,omitempty"`
}

// CloudEventSpecVersion defines model for CloudEvent.SpecVersion.
type CloudEventSpecVersion string

// CloudEventData defines model for CloudEventData.
type CloudEventData = map[string]interface{}

// CompilationCustomizer defines model for CompilationCustomizer.
type CompilationCustomizer struct {
	Phase *CompilationCustomizerPhase `json:"phase,omitempty"`
}

// CompilationCustomizerPhase defines model for CompilationCustomizer.Phase.
type CompilationCustomizerPhase string

// CompileUnit defines model for CompileUnit.
type CompileUnit struct {
	ClassLoader      *GroovyClassLoader    `json:"classLoader,omitempty"`
	Classes          *[]ClassNode          `json:"classes,omitempty"`
	ClassesToCompile *map[string]ClassNode `json:"classesToCompile,omitempty"`
	CodeSource       *struct {
		Certificates *[]struct {
			Encoded   *[]byte `json:"encoded,omitempty"`
			PublicKey *struct {
				Algorithm *string `json:"algorithm,omitempty"`
				Encoded   *[]byte `json:"encoded,omitempty"`
				Format    *string `json:"format,omitempty"`
			} `json:"publicKey,omitempty"`
			Type *string `json:"type,omitempty"`
		} `json:"certificates,omitempty"`
		CodeSigners *[]struct {
			SignerCertPath *struct {
				Certificates *[]struct {
					Encoded   *[]byte `json:"encoded,omitempty"`
					PublicKey *struct {
						Algorithm *string `json:"algorithm,omitempty"`
						Encoded   *[]byte `json:"encoded,omitempty"`
						Format    *string `json:"format,omitempty"`
					} `json:"publicKey,omitempty"`
					Type *string `json:"type,omitempty"`
				} `json:"certificates,omitempty"`
				Encoded   *[]byte                 `json:"encoded,omitempty"`
				Encodings *map[string]interface{} `json:"encodings,omitempty"`
				Type      *string                 `json:"type,omitempty"`
			} `json:"signerCertPath,omitempty"`
			Timestamp *struct {
				SignerCertPath *struct {
					Certificates *[]struct {
						Encoded   *[]byte `json:"encoded,omitempty"`
						PublicKey *struct {
							Algorithm *string `json:"algorithm,omitempty"`
							Encoded   *[]byte `json:"encoded,omitempty"`
							Format    *string `json:"format,omitempty"`
						} `json:"publicKey,omitempty"`
						Type *string `json:"type,omitempty"`
					} `json:"certificates,omitempty"`
					Encoded   *[]byte                 `json:"encoded,omitempty"`
					Encodings *map[string]interface{} `json:"encodings,omitempty"`
					Type      *string                 `json:"type,omitempty"`
				} `json:"signerCertPath,omitempty"`
				Timestamp *time.Time `json:"timestamp,omitempty"`
			} `json:"timestamp,omitempty"`
		} `json:"codeSigners,omitempty"`
		Location *string `json:"location,omitempty"`
	} `json:"codeSource,omitempty"`
	Config                *CompilerConfiguration             `json:"config,omitempty"`
	GeneratedInnerClasses *map[string]InnerClassNode         `json:"generatedInnerClasses,omitempty"`
	MetaDataMap           *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modules               *[]ModuleNode                      `json:"modules,omitempty"`
	NodeMetaData          *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
}

// CompilerConfiguration defines model for CompilerConfiguration.
type CompilerConfiguration struct {
	BytecodePostprocessor            *BytecodeProcessor                 `json:"bytecodePostprocessor,omitempty"`
	BytecodeVersion                  *int32                             `json:"bytecodeVersion,omitempty"`
	Classpath                        *[]string                          `json:"classpath,omitempty"`
	ClasspathList                    *[]string                          `json:"classpathList,omitempty"`
	CompilationCustomizers           *[]CompilationCustomizer           `json:"compilationCustomizers,omitempty"`
	Debug                            *bool                              `json:"debug,omitempty"`
	DefaultScriptExtension           *string                            `json:"defaultScriptExtension,omitempty"`
	DisabledGlobalASTTransformations *[]string                          `json:"disabledGlobalASTTransformations,omitempty"`
	GroovydocEnabled                 *bool                              `json:"groovydocEnabled,omitempty"`
	IndyEnabled                      *bool                              `json:"indyEnabled,omitempty"`
	JointCompilationOptions          *map[string]map[string]interface{} `json:"jointCompilationOptions,omitempty"`
	LogClassgen                      *bool                              `json:"logClassgen,omitempty"`
	LogClassgenStackTraceMaxDepth    *int32                             `json:"logClassgenStackTraceMaxDepth,omitempty"`
	MinimumRecompilationInterval     *int32                             `json:"minimumRecompilationInterval,omitempty"`
	OptimizationOptions              *map[string]bool                   `json:"optimizationOptions,omitempty"`
	// Deprecated:
	Output                  *map[string]interface{} `json:"output,omitempty"`
	Parameters              *bool                   `json:"parameters,omitempty"`
	PluginFactory           *ParserPluginFactory    `json:"pluginFactory,omitempty"`
	PreviewFeatures         *bool                   `json:"previewFeatures,omitempty"`
	RecompileGroovySource   *bool                   `json:"recompileGroovySource,omitempty"`
	RuntimeGroovydocEnabled *bool                   `json:"runtimeGroovydocEnabled,omitempty"`
	ScriptBaseClass         *string                 `json:"scriptBaseClass,omitempty"`
	ScriptExtensions        *[]string               `json:"scriptExtensions,omitempty"`
	SourceEncoding          *string                 `json:"sourceEncoding,omitempty"`
	TargetBytecode          *string                 `json:"targetBytecode,omitempty"`
	TargetBytecodeIfValid   *string                 `json:"targetBytecodeIfValid,omitempty"`
	TargetDirectory         *openapi_types.File     `json:"targetDirectory,omitempty"`
	TargetDirectorySafe     *string                 `json:"targetDirectorySafe,omitempty"`
	Tolerance               *int32                  `json:"tolerance,omitempty"`
	Verbose                 *bool                   `json:"verbose,omitempty"`
	WarningLevel            *int32                  `json:"warningLevel,omitempty"`
}

// ConstraintState defines model for ConstraintState.
type ConstraintState struct {
	ArtifactVersion    *string                            `json:"artifactVersion,omitempty"`
	Attributes         *map[string]map[string]interface{} `json:"attributes,omitempty"`
	Comment            *string                            `json:"comment,omitempty"`
	CreatedAt          *string                            `json:"createdAt,omitempty"`
	DeliveryConfigName *string                            `json:"deliveryConfigName,omitempty"`
	EnvironmentName    *string                            `json:"environmentName,omitempty"`
	JudgedAt           *string                            `json:"judgedAt,omitempty"`
	JudgedBy           *string                            `json:"judgedBy,omitempty"`
	Status             *string                            `json:"status,omitempty"`
	Type               *string                            `json:"type,omitempty"`
}

// ConstraintStatus defines model for ConstraintStatus.
type ConstraintStatus struct {
	ArtifactReference *string `json:"artifactReference,omitempty"`
	ArtifactVersion   *string `json:"artifactVersion,omitempty"`
	Comment           *string `json:"comment,omitempty"`
	Status            *string `json:"status,omitempty"`
	Type              *string `json:"type,omitempty"`
}

// ConstructorNode defines model for ConstructorNode.
type ConstructorNode struct {
	Abstract                *bool                              `json:"abstract,omitempty"`
	AnnotationDefault       *bool                              `json:"annotationDefault,omitempty"`
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	Code                    *Statement                         `json:"code,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	Constructor             *bool                              `json:"constructor,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Default                 *bool                              `json:"default,omitempty"`
	DynamicReturnType       *bool                              `json:"dynamicReturnType,omitempty"`
	Exceptions              *[]ClassNode                       `json:"exceptions,omitempty"`
	Final                   *bool                              `json:"final,omitempty"`
	FirstStatement          *Statement                         `json:"firstStatement,omitempty"`
	GenericsTypes           *[]GenericsType                    `json:"genericsTypes,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modifiers               *int32                             `json:"modifiers,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	PackageScope            *bool                              `json:"packageScope,omitempty"`
	Parameters              *[]Parameter                       `json:"parameters,omitempty"`
	Private                 *bool                              `json:"private,omitempty"`
	Protected               *bool                              `json:"protected,omitempty"`
	Public                  *bool                              `json:"public,omitempty"`
	ReturnType              *ClassNode                         `json:"returnType,omitempty"`
	ScriptBody              *bool                              `json:"scriptBody,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Static                  *bool                              `json:"static,omitempty"`
	StaticConstructor       *bool                              `json:"staticConstructor,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	SyntheticPublic         *bool                              `json:"syntheticPublic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	TypeDescriptor          *string                            `json:"typeDescriptor,omitempty"`
	VariableScope           *VariableScope                     `json:"variableScope,omitempty"`
	VoidMethod              *bool                              `json:"voidMethod,omitempty"`
}

// DeckPluginVersion defines model for DeckPluginVersion.
type DeckPluginVersion struct {
	Id      *string `json:"id,omitempty"`
	Version *string `json:"version,omitempty"`
}

// DefaultPluginDescriptor defines model for DefaultPluginDescriptor.
type DefaultPluginDescriptor struct {
	Dependencies      *[]PluginDependency      `json:"dependencies,omitempty"`
	License           *string                  `json:"license,omitempty"`
	PluginClass       *string                  `json:"pluginClass,omitempty"`
	PluginDescription *string                  `json:"pluginDescription,omitempty"`
	PluginId          *string                  `json:"pluginId,omitempty"`
	PluginVersion     *DefaultPluginDescriptor `json:"pluginVersion,omitempty"`
	Provider          *string                  `json:"provider,omitempty"`
	Requires          *string                  `json:"requires,omitempty"`
	Version           *string                  `json:"version,omitempty"`
}

// DeliveryConfig defines model for DeliveryConfig.
type DeliveryConfig struct {
	ApiVersion     *string                              `json:"apiVersion,omitempty"`
	Application    *string                              `json:"application,omitempty"`
	Artifacts      *[]map[string]map[string]interface{} `json:"artifacts,omitempty"`
	Environments   *[]Environment                       `json:"environments,omitempty"`
	Name           *string                              `json:"name,omitempty"`
	ServiceAccount *string                              `json:"serviceAccount,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	Constraints   *[]map[string]map[string]interface{} `json:"constraints,omitempty"`
	Locations     *map[string]map[string]interface{}   `json:"locations,omitempty"`
	Name          *string                              `json:"name,omitempty"`
	Notifications *[]Notification                      `json:"notifications,omitempty"`
	PostDeploy    *[]map[string]map[string]interface{} `json:"postDeploy,omitempty"`
	Resources     *[]Resource                          `json:"resources,omitempty"`
	VerifyWith    *[]map[string]map[string]interface{} `json:"verifyWith,omitempty"`
}

// EnvironmentArtifactPin defines model for EnvironmentArtifactPin.
type EnvironmentArtifactPin struct {
	Comment           *string `json:"comment,omitempty"`
	PinnedBy          *string `json:"pinnedBy,omitempty"`
	Reference         *string `json:"reference,omitempty"`
	TargetEnvironment *string `json:"targetEnvironment,omitempty"`
	Version           *string `json:"version,omitempty"`
}

// EnvironmentArtifactVeto defines model for EnvironmentArtifactVeto.
type EnvironmentArtifactVeto struct {
	Comment           *string `json:"comment,omitempty"`
	Reference         *string `json:"reference,omitempty"`
	TargetEnvironment *string `json:"targetEnvironment,omitempty"`
	Version           *string `json:"version,omitempty"`
}

// ErrorCollector defines model for ErrorCollector.
type ErrorCollector struct {
	Configuration *CompilerConfiguration `json:"configuration,omitempty"`
	ErrorCount    *int32                 `json:"errorCount,omitempty"`
	Errors        *[]Message             `json:"errors,omitempty"`
	LastError     *Message               `json:"lastError,omitempty"`
	WarningCount  *int32                 `json:"warningCount,omitempty"`
	Warnings      *[]WarningMessage      `json:"warnings,omitempty"`
}

// ExpandoMetaClass defines model for ExpandoMetaClass.
type ExpandoMetaClass struct {
	AdditionalMetaMethods    *[]MetaMethod             `json:"additionalMetaMethods,omitempty"`
	ClassInfo                *ClassInfo                `json:"classInfo,omitempty"`
	ClassNode                *ClassNode                `json:"classNode,omitempty"`
	ExpandoProperties        *[]MetaProperty           `json:"expandoProperties,omitempty"`
	ExpandoSubclassMethods   *[]map[string]interface{} `json:"expandoSubclassMethods,omitempty"`
	GroovyObject             *bool                     `json:"groovyObject,omitempty"`
	InRegistry               *bool                     `json:"inRegistry,omitempty"`
	Initialized              *bool                     `json:"initialized,omitempty"`
	MetaClass                *MetaClass                `json:"metaClass,omitempty"`
	Modified                 *bool                     `json:"modified,omitempty"`
	PermissivePropertyAccess *bool                     `json:"permissivePropertyAccess,omitempty"`
	Properties               *[]MetaProperty           `json:"properties,omitempty"`
	Registry                 *MetaClassRegistry        `json:"registry,omitempty"`
	TheCachedClass           *CachedClass              `json:"theCachedClass,omitempty"`
	UpProperties             *[]struct {
		Bound       *bool   `json:"bound,omitempty"`
		Constrained *bool   `json:"constrained,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		Expert      *bool   `json:"expert,omitempty"`
		Hidden      *bool   `json:"hidden,omitempty"`
		Name        *string `json:"name,omitempty"`
		Preferred   *bool   `json:"preferred,omitempty"`
		ReadMethod  *struct {
			// Deprecated:
			Accessible              *bool `json:"accessible,omitempty"`
			AnnotatedExceptionTypes *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedExceptionTypes,omitempty"`
			AnnotatedParameterTypes *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedParameterTypes,omitempty"`
			AnnotatedReceiverType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedReceiverType,omitempty"`
			AnnotatedReturnType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedReturnType,omitempty"`
			Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
			Bridge                *bool                     `json:"bridge,omitempty"`
			DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Default               *bool                     `json:"default,omitempty"`
			DefaultValue          *map[string]interface{}   `json:"defaultValue,omitempty"`
			GenericExceptionTypes *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericExceptionTypes,omitempty"`
			GenericParameterTypes *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericParameterTypes,omitempty"`
			GenericReturnType *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericReturnType,omitempty"`
			Modifiers            *int32                      `json:"modifiers,omitempty"`
			Name                 *string                     `json:"name,omitempty"`
			ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
			ParameterCount       *int32                      `json:"parameterCount,omitempty"`
			Parameters           *[]struct {
				AnnotatedType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedType,omitempty"`
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				DeclaringExecutable *struct {
					// Deprecated:
					Accessible              *bool `json:"accessible,omitempty"`
					AnnotatedExceptionTypes *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedExceptionTypes,omitempty"`
					AnnotatedParameterTypes *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedParameterTypes,omitempty"`
					AnnotatedReceiverType *struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedReceiverType,omitempty"`
					AnnotatedReturnType *struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedReturnType,omitempty"`
					Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					GenericExceptionTypes *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"genericExceptionTypes,omitempty"`
					GenericParameterTypes *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"genericParameterTypes,omitempty"`
					Modifiers            *int32                      `json:"modifiers,omitempty"`
					Name                 *string                     `json:"name,omitempty"`
					ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
					ParameterCount       *int32                      `json:"parameterCount,omitempty"`
					Synthetic            *bool                       `json:"synthetic,omitempty"`
					TypeParameters       *[]struct {
						AnnotatedBounds *[]struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedBounds,omitempty"`
						Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
						Bounds      *[]struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"bounds,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						GenericDeclaration  *map[string]interface{}   `json:"genericDeclaration,omitempty"`
						Name                *string                   `json:"name,omitempty"`
						TypeName            *string                   `json:"typeName,omitempty"`
					} `json:"typeParameters,omitempty"`
					VarArgs *bool `json:"varArgs,omitempty"`
				} `json:"declaringExecutable,omitempty"`
				Implicit          *bool   `json:"implicit,omitempty"`
				Modifiers         *int32  `json:"modifiers,omitempty"`
				Name              *string `json:"name,omitempty"`
				NamePresent       *bool   `json:"namePresent,omitempty"`
				ParameterizedType *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"parameterizedType,omitempty"`
				Synthetic *bool `json:"synthetic,omitempty"`
				VarArgs   *bool `json:"varArgs,omitempty"`
			} `json:"parameters,omitempty"`
			Synthetic      *bool `json:"synthetic,omitempty"`
			TypeParameters *[]struct {
				AnnotatedBounds *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedBounds,omitempty"`
				Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
				Bounds      *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"bounds,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Name                *string                   `json:"name,omitempty"`
				TypeName            *string                   `json:"typeName,omitempty"`
			} `json:"typeParameters,omitempty"`
			VarArgs *bool `json:"varArgs,omitempty"`
		} `json:"readMethod,omitempty"`
		ShortDescription *string `json:"shortDescription,omitempty"`
		WriteMethod      *struct {
			// Deprecated:
			Accessible              *bool `json:"accessible,omitempty"`
			AnnotatedExceptionTypes *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedExceptionTypes,omitempty"`
			AnnotatedParameterTypes *[]struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedParameterTypes,omitempty"`
			AnnotatedReceiverType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedReceiverType,omitempty"`
			AnnotatedReturnType *struct {
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Type                *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"type,omitempty"`
			} `json:"annotatedReturnType,omitempty"`
			Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
			Bridge                *bool                     `json:"bridge,omitempty"`
			DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Default               *bool                     `json:"default,omitempty"`
			DefaultValue          *map[string]interface{}   `json:"defaultValue,omitempty"`
			GenericExceptionTypes *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericExceptionTypes,omitempty"`
			GenericParameterTypes *[]struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericParameterTypes,omitempty"`
			GenericReturnType *struct {
				TypeName *string `json:"typeName,omitempty"`
			} `json:"genericReturnType,omitempty"`
			Modifiers            *int32                      `json:"modifiers,omitempty"`
			Name                 *string                     `json:"name,omitempty"`
			ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
			ParameterCount       *int32                      `json:"parameterCount,omitempty"`
			Parameters           *[]struct {
				AnnotatedType *struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedType,omitempty"`
				Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				DeclaringExecutable *struct {
					// Deprecated:
					Accessible              *bool `json:"accessible,omitempty"`
					AnnotatedExceptionTypes *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedExceptionTypes,omitempty"`
					AnnotatedParameterTypes *[]struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedParameterTypes,omitempty"`
					AnnotatedReceiverType *struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedReceiverType,omitempty"`
					AnnotatedReturnType *struct {
						Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						Type                *struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"type,omitempty"`
					} `json:"annotatedReturnType,omitempty"`
					Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					GenericExceptionTypes *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"genericExceptionTypes,omitempty"`
					GenericParameterTypes *[]struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"genericParameterTypes,omitempty"`
					Modifiers            *int32                      `json:"modifiers,omitempty"`
					Name                 *string                     `json:"name,omitempty"`
					ParameterAnnotations *[][]map[string]interface{} `json:"parameterAnnotations,omitempty"`
					ParameterCount       *int32                      `json:"parameterCount,omitempty"`
					Synthetic            *bool                       `json:"synthetic,omitempty"`
					TypeParameters       *[]struct {
						AnnotatedBounds *[]struct {
							Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
							DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
							Type                *struct {
								TypeName *string `json:"typeName,omitempty"`
							} `json:"type,omitempty"`
						} `json:"annotatedBounds,omitempty"`
						Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
						Bounds      *[]struct {
							TypeName *string `json:"typeName,omitempty"`
						} `json:"bounds,omitempty"`
						DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
						GenericDeclaration  *map[string]interface{}   `json:"genericDeclaration,omitempty"`
						Name                *string                   `json:"name,omitempty"`
						TypeName            *string                   `json:"typeName,omitempty"`
					} `json:"typeParameters,omitempty"`
					VarArgs *bool `json:"varArgs,omitempty"`
				} `json:"declaringExecutable,omitempty"`
				Implicit          *bool   `json:"implicit,omitempty"`
				Modifiers         *int32  `json:"modifiers,omitempty"`
				Name              *string `json:"name,omitempty"`
				NamePresent       *bool   `json:"namePresent,omitempty"`
				ParameterizedType *struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"parameterizedType,omitempty"`
				Synthetic *bool `json:"synthetic,omitempty"`
				VarArgs   *bool `json:"varArgs,omitempty"`
			} `json:"parameters,omitempty"`
			Synthetic      *bool `json:"synthetic,omitempty"`
			TypeParameters *[]struct {
				AnnotatedBounds *[]struct {
					Annotations         *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					Type                *struct {
						TypeName *string `json:"typeName,omitempty"`
					} `json:"type,omitempty"`
				} `json:"annotatedBounds,omitempty"`
				Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
				Bounds      *[]struct {
					TypeName *string `json:"typeName,omitempty"`
				} `json:"bounds,omitempty"`
				DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				Name                *string                   `json:"name,omitempty"`
				TypeName            *string                   `json:"typeName,omitempty"`
			} `json:"typeParameters,omitempty"`
			VarArgs *bool `json:"varArgs,omitempty"`
		} `json:"writeMethod,omitempty"`
	} `json:"upProperties,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// Expression defines model for Expression.
type Expression struct {
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
}

// FieldNode defines model for FieldNode.
type FieldNode struct {
	Annotations *[]AnnotationNode `json:"annotations,omitempty"`
	// Deprecated:
	ClosureSharedVariable   *bool                              `json:"closureSharedVariable,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	DynamicTyped            *bool                              `json:"dynamicTyped,omitempty"`
	Enum                    *bool                              `json:"enum,omitempty"`
	Final                   *bool                              `json:"final,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Holder                  *bool                              `json:"holder,omitempty"`
	InStaticContext         *bool                              `json:"inStaticContext,omitempty"`
	InitialExpression       *Expression                        `json:"initialExpression,omitempty"`
	InitialValueExpression  *Expression                        `json:"initialValueExpression,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modifiers               *int32                             `json:"modifiers,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	OriginType              *ClassNode                         `json:"originType,omitempty"`
	Owner                   *ClassNode                         `json:"owner,omitempty"`
	Private                 *bool                              `json:"private,omitempty"`
	Protected               *bool                              `json:"protected,omitempty"`
	Public                  *bool                              `json:"public,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Static                  *bool                              `json:"static,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
	Volatile                *bool                              `json:"volatile,omitempty"`
}

// GenericsType defines model for GenericsType.
type GenericsType struct {
	ColumnNumber     *int32                             `json:"columnNumber,omitempty"`
	LastColumnNumber *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber   *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber       *int32                             `json:"lineNumber,omitempty"`
	LowerBound       *ClassNode                         `json:"lowerBound,omitempty"`
	MetaDataMap      *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Name             *string                            `json:"name,omitempty"`
	NodeMetaData     *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	Placeholder      *bool                              `json:"placeholder,omitempty"`
	Resolved         *bool                              `json:"resolved,omitempty"`
	SourcePosition   *ASTNode                           `json:"sourcePosition,omitempty"`
	Text             *string                            `json:"text,omitempty"`
	Type             *ClassNode                         `json:"type,omitempty"`
	UpperBounds      *[]ClassNode                       `json:"upperBounds,omitempty"`
	Wildcard         *bool                              `json:"wildcard,omitempty"`
}

// GrantedAuthority defines model for GrantedAuthority.
type GrantedAuthority struct {
	Authority *string `json:"authority,omitempty"`
}

// GraphQLRequest defines model for GraphQLRequest.
type GraphQLRequest struct {
	OperationName *string                            `json:"operationName,omitempty"`
	Query         *string                            `json:"query,omitempty"`
	Variables     *map[string]map[string]interface{} `json:"variables,omitempty"`
}

// GroovyClassLoader defines model for GroovyClassLoader.
type GroovyClassLoader struct {
	DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
	DefinedPackages        *[]struct {
		Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
		DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
		ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
		ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
		Name                  *string                   `json:"name,omitempty"`
		Sealed                *bool                     `json:"sealed,omitempty"`
		SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
		SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
		SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
	} `json:"definedPackages,omitempty"`
	Name   *string `json:"name,omitempty"`
	Parent *struct {
		DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
		DefinedPackages        *[]struct {
			Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
			DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
			ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
			ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
			Name                  *string                   `json:"name,omitempty"`
			Sealed                *bool                     `json:"sealed,omitempty"`
			SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
			SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
			SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
		} `json:"definedPackages,omitempty"`
		Name                        *string `json:"name,omitempty"`
		RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		UnnamedModule               *struct {
			Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
			ClassLoader *struct {
				DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
				DefinedPackages        *[]struct {
					Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
					DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
					ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
					ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
					ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
					Name                  *string                   `json:"name,omitempty"`
					Sealed                *bool                     `json:"sealed,omitempty"`
					SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
					SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
					SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
				} `json:"definedPackages,omitempty"`
				Name                        *string `json:"name,omitempty"`
				RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
			} `json:"classLoader,omitempty"`
			DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
			Descriptor          *struct {
				Automatic *bool `json:"automatic,omitempty"`
				Open      *bool `json:"open,omitempty"`
			} `json:"descriptor,omitempty"`
			Layer    *map[string]interface{} `json:"layer,omitempty"`
			Name     *string                 `json:"name,omitempty"`
			Named    *bool                   `json:"named,omitempty"`
			Packages *[]string               `json:"packages,omitempty"`
		} `json:"unnamedModule,omitempty"`
	} `json:"parent,omitempty"`
	RegisteredAsParallelCapable *bool                 `json:"registeredAsParallelCapable,omitempty"`
	ResourceLoader              *GroovyResourceLoader `json:"resourceLoader,omitempty"`
	ShouldRecompile             *bool                 `json:"shouldRecompile,omitempty"`
	UnnamedModule               *struct {
		Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
		ClassLoader *struct {
			DefaultAssertionStatus *bool `json:"defaultAssertionStatus,omitempty"`
			DefinedPackages        *[]struct {
				Annotations           *[]map[string]interface{} `json:"annotations,omitempty"`
				DeclaredAnnotations   *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
				ImplementationTitle   *string                   `json:"implementationTitle,omitempty"`
				ImplementationVendor  *string                   `json:"implementationVendor,omitempty"`
				ImplementationVersion *string                   `json:"implementationVersion,omitempty"`
				Name                  *string                   `json:"name,omitempty"`
				Sealed                *bool                     `json:"sealed,omitempty"`
				SpecificationTitle    *string                   `json:"specificationTitle,omitempty"`
				SpecificationVendor   *string                   `json:"specificationVendor,omitempty"`
				SpecificationVersion  *string                   `json:"specificationVersion,omitempty"`
			} `json:"definedPackages,omitempty"`
			Name                        *string `json:"name,omitempty"`
			RegisteredAsParallelCapable *bool   `json:"registeredAsParallelCapable,omitempty"`
		} `json:"classLoader,omitempty"`
		DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
		Descriptor          *struct {
			Automatic *bool `json:"automatic,omitempty"`
			Open      *bool `json:"open,omitempty"`
		} `json:"descriptor,omitempty"`
		Layer    *map[string]interface{} `json:"layer,omitempty"`
		Name     *string                 `json:"name,omitempty"`
		Named    *bool                   `json:"named,omitempty"`
		Packages *[]string               `json:"packages,omitempty"`
	} `json:"unnamedModule,omitempty"`
	Urls *[]string `json:"urls,omitempty"`
}

// GroovyResourceLoader defines model for GroovyResourceLoader.
type GroovyResourceLoader = map[string]interface{}

// Groovydoc defines model for Groovydoc.
type Groovydoc struct {
	Content *string          `json:"content,omitempty"`
	Holder  *GroovydocHolder `json:"holder,omitempty"`
	Present *bool            `json:"present,omitempty"`
	TagList *[]GroovydocTag  `json:"tagList,omitempty"`
}

// GroovydocHolder defines model for GroovydocHolder.
type GroovydocHolder struct {
	Groovydoc *Groovydoc              `json:"groovydoc,omitempty"`
	Instance  *map[string]interface{} `json:"instance,omitempty"`
}

// GroovydocTag defines model for GroovydocTag.
type GroovydocTag struct {
	Content   *string    `json:"content,omitempty"`
	Groovydoc *Groovydoc `json:"groovydoc,omitempty"`
	Name      *string    `json:"name,omitempty"`
}

// Headers defines model for Headers.
type Headers struct {
	InvokeHeaders *map[string]string `json:"invokeHeaders,omitempty"`
	ReadHeaders   *map[string]string `json:"readHeaders,omitempty"`
	WriteHeaders  *map[string]string `json:"writeHeaders,omitempty"`
}

// Http defines model for Http.
type Http struct {
	Config      *map[string]string `json:"config,omitempty"`
	Headers     *Headers           `json:"headers,omitempty"`
	QueryParams *map[string]string `json:"queryParams,omitempty"`
	Url         *string            `json:"url,omitempty"`
}

// ImportNode defines model for ImportNode.
type ImportNode struct {
	Alias                   *string                            `json:"alias,omitempty"`
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	ClassName               *string                            `json:"className,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	FieldName               *string                            `json:"fieldName,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	PackageName             *string                            `json:"packageName,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Star                    *bool                              `json:"star,omitempty"`
	Static                  *bool                              `json:"static,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
}

// InnerClassNode defines model for InnerClassNode.
type InnerClassNode struct {
	Abstract                    *bool                              `json:"abstract,omitempty"`
	AbstractMethods             *[]MethodNode                      `json:"abstractMethods,omitempty"`
	AllDeclaredMethods          *[]MethodNode                      `json:"allDeclaredMethods,omitempty"`
	AllInterfaces               *[]ClassNode                       `json:"allInterfaces,omitempty"`
	Annotated                   *bool                              `json:"annotated,omitempty"`
	AnnotationDefinition        *bool                              `json:"annotationDefinition,omitempty"`
	Annotations                 *[]AnnotationNode                  `json:"annotations,omitempty"`
	Anonymous                   *bool                              `json:"anonymous,omitempty"`
	Array                       *bool                              `json:"array,omitempty"`
	ColumnNumber                *int32                             `json:"columnNumber,omitempty"`
	CompileUnit                 *CompileUnit                       `json:"compileUnit,omitempty"`
	ComponentType               *ClassNode                         `json:"componentType,omitempty"`
	DeclaredConstructors        *[]ConstructorNode                 `json:"declaredConstructors,omitempty"`
	DeclaredMethodsMap          *map[string]MethodNode             `json:"declaredMethodsMap,omitempty"`
	DeclaringClass              *ClassNode                         `json:"declaringClass,omitempty"`
	DerivedFromGroovyObject     *bool                              `json:"derivedFromGroovyObject,omitempty"`
	EnclosingMethod             *MethodNode                        `json:"enclosingMethod,omitempty"`
	Enum                        *bool                              `json:"enum,omitempty"`
	FieldIndex                  *map[string]FieldNode              `json:"fieldIndex,omitempty"`
	Fields                      *[]FieldNode                       `json:"fields,omitempty"`
	GenericsPlaceHolder         *bool                              `json:"genericsPlaceHolder,omitempty"`
	GenericsTypes               *[]GenericsType                    `json:"genericsTypes,omitempty"`
	Groovydoc                   *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition     *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	InnerClasses                *map[string]interface{}            `json:"innerClasses,omitempty"`
	Instance                    *AnnotatedNode                     `json:"instance,omitempty"`
	Interface                   *bool                              `json:"interface,omitempty"`
	Interfaces                  *[]ClassNode                       `json:"interfaces,omitempty"`
	LastColumnNumber            *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber              *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber                  *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap                 *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Methods                     *[]MethodNode                      `json:"methods,omitempty"`
	Modifiers                   *int32                             `json:"modifiers,omitempty"`
	Module                      *ModuleNode                        `json:"module,omitempty"`
	Name                        *string                            `json:"name,omitempty"`
	NameWithoutPackage          *string                            `json:"nameWithoutPackage,omitempty"`
	NodeMetaData                *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	ObjectInitializerStatements *[]Statement                       `json:"objectInitializerStatements,omitempty"`
	OuterClass                  *ClassNode                         `json:"outerClass,omitempty"`
	OuterClasses                *[]ClassNode                       `json:"outerClasses,omitempty"`
	OuterMostClass              *ClassNode                         `json:"outerMostClass,omitempty"`
	Package                     *PackageNode                       `json:"package,omitempty"`
	PackageName                 *string                            `json:"packageName,omitempty"`
	PermittedSubclasses         *[]ClassNode                       `json:"permittedSubclasses,omitempty"`
	PlainNodeReference          *ClassNode                         `json:"plainNodeReference,omitempty"`
	PrimaryClassNode            *bool                              `json:"primaryClassNode,omitempty"`
	Properties                  *[]PropertyNode                    `json:"properties,omitempty"`
	Record                      *bool                              `json:"record,omitempty"`
	// Deprecated:
	RecordComponentNodes *[]RecordComponentNode `json:"recordComponentNodes,omitempty"`
	RecordComponents     *[]RecordComponentNode `json:"recordComponents,omitempty"`
	Redirect             *ClassNode             `json:"redirect,omitempty"`
	RedirectNode         *bool                  `json:"redirectNode,omitempty"`
	Resolved             *bool                  `json:"resolved,omitempty"`
	Script               *bool                  `json:"script,omitempty"`
	ScriptBody           *bool                  `json:"scriptBody,omitempty"`
	Sealed               *bool                  `json:"sealed,omitempty"`
	SourcePosition       *ASTNode               `json:"sourcePosition,omitempty"`
	StaticClass          *bool                  `json:"staticClass,omitempty"`
	SuperClass           *ClassNode             `json:"superClass,omitempty"`
	Synthetic            *bool                  `json:"synthetic,omitempty"`
	SyntheticPublic      *bool                  `json:"syntheticPublic,omitempty"`
	Text                 *string                `json:"text,omitempty"`
	TypeAnnotations      *[]AnnotationNode      `json:"typeAnnotations,omitempty"`
	UnresolvedInterfaces *[]ClassNode           `json:"unresolvedInterfaces,omitempty"`
	UnresolvedName       *string                `json:"unresolvedName,omitempty"`
	UnresolvedSuperClass *ClassNode             `json:"unresolvedSuperClass,omitempty"`
	UsingGenerics        *bool                  `json:"usingGenerics,omitempty"`
	VariableScope        *VariableScope         `json:"variableScope,omitempty"`
}

// Message defines model for Message.
type Message = map[string]interface{}

// MetaClass defines model for MetaClass.
type MetaClass struct {
	ClassNode   *ClassNode      `json:"classNode,omitempty"`
	MetaMethods *[]MetaMethod   `json:"metaMethods,omitempty"`
	Methods     *[]MetaMethod   `json:"methods,omitempty"`
	Properties  *[]MetaProperty `json:"properties,omitempty"`
}

// MetaClassCreationHandle defines model for MetaClassCreationHandle.
type MetaClassCreationHandle struct {
	DisableCustomMetaClassLookup *bool `json:"disableCustomMetaClassLookup,omitempty"`
}

// MetaClassRegistry defines model for MetaClassRegistry.
type MetaClassRegistry struct {
	MetaClassCreationHandle               *MetaClassCreationHandle                `json:"metaClassCreationHandle,omitempty"`
	MetaClassCreationHandler              *MetaClassCreationHandle                `json:"metaClassCreationHandler,omitempty"`
	MetaClassRegistryChangeEventListeners *[]MetaClassRegistryChangeEventListener `json:"metaClassRegistryChangeEventListeners,omitempty"`
}

// MetaClassRegistryChangeEventListener defines model for MetaClassRegistryChangeEventListener.
type MetaClassRegistryChangeEventListener = map[string]interface{}

// MetaMethod defines model for MetaMethod.
type MetaMethod struct {
	Abstract        *bool          `json:"abstract,omitempty"`
	Cacheable       *bool          `json:"cacheable,omitempty"`
	DeclaringClass  *CachedClass   `json:"declaringClass,omitempty"`
	Default         *bool          `json:"default,omitempty"`
	Descriptor      *string        `json:"descriptor,omitempty"`
	Modifiers       *int32         `json:"modifiers,omitempty"`
	MopName         *string        `json:"mopName,omitempty"`
	Name            *string        `json:"name,omitempty"`
	ParameterTypes  *[]CachedClass `json:"parameterTypes,omitempty"`
	ParametersTypes *[]CachedClass `json:"parametersTypes,omitempty"`
	Private         *bool          `json:"private,omitempty"`
	Protected       *bool          `json:"protected,omitempty"`
	Public          *bool          `json:"public,omitempty"`
	Signature       *string        `json:"signature,omitempty"`
	Static          *bool          `json:"static,omitempty"`
	VargsMethod     *bool          `json:"vargsMethod,omitempty"`
}

// MetaProperty defines model for MetaProperty.
type MetaProperty struct {
	Modifiers *int32  `json:"modifiers,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// MethodNode defines model for MethodNode.
type MethodNode struct {
	Abstract                *bool                              `json:"abstract,omitempty"`
	AnnotationDefault       *bool                              `json:"annotationDefault,omitempty"`
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	Code                    *Statement                         `json:"code,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	Constructor             *bool                              `json:"constructor,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Default                 *bool                              `json:"default,omitempty"`
	DynamicReturnType       *bool                              `json:"dynamicReturnType,omitempty"`
	Exceptions              *[]ClassNode                       `json:"exceptions,omitempty"`
	Final                   *bool                              `json:"final,omitempty"`
	FirstStatement          *Statement                         `json:"firstStatement,omitempty"`
	GenericsTypes           *[]GenericsType                    `json:"genericsTypes,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modifiers               *int32                             `json:"modifiers,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	PackageScope            *bool                              `json:"packageScope,omitempty"`
	Parameters              *[]Parameter                       `json:"parameters,omitempty"`
	Private                 *bool                              `json:"private,omitempty"`
	Protected               *bool                              `json:"protected,omitempty"`
	Public                  *bool                              `json:"public,omitempty"`
	ReturnType              *ClassNode                         `json:"returnType,omitempty"`
	ScriptBody              *bool                              `json:"scriptBody,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Static                  *bool                              `json:"static,omitempty"`
	StaticConstructor       *bool                              `json:"staticConstructor,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	SyntheticPublic         *bool                              `json:"syntheticPublic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	TypeDescriptor          *string                            `json:"typeDescriptor,omitempty"`
	VariableScope           *VariableScope                     `json:"variableScope,omitempty"`
	VoidMethod              *bool                              `json:"voidMethod,omitempty"`
}

// MixinNode defines model for MixinNode.
type MixinNode struct {
	Abstract                    *bool                              `json:"abstract,omitempty"`
	AbstractMethods             *[]MethodNode                      `json:"abstractMethods,omitempty"`
	AllDeclaredMethods          *[]MethodNode                      `json:"allDeclaredMethods,omitempty"`
	AllInterfaces               *[]ClassNode                       `json:"allInterfaces,omitempty"`
	Annotated                   *bool                              `json:"annotated,omitempty"`
	AnnotationDefinition        *bool                              `json:"annotationDefinition,omitempty"`
	Annotations                 *[]AnnotationNode                  `json:"annotations,omitempty"`
	Array                       *bool                              `json:"array,omitempty"`
	ColumnNumber                *int32                             `json:"columnNumber,omitempty"`
	CompileUnit                 *CompileUnit                       `json:"compileUnit,omitempty"`
	ComponentType               *ClassNode                         `json:"componentType,omitempty"`
	DeclaredConstructors        *[]ConstructorNode                 `json:"declaredConstructors,omitempty"`
	DeclaredMethodsMap          *map[string]MethodNode             `json:"declaredMethodsMap,omitempty"`
	DeclaringClass              *ClassNode                         `json:"declaringClass,omitempty"`
	DerivedFromGroovyObject     *bool                              `json:"derivedFromGroovyObject,omitempty"`
	EnclosingMethod             *MethodNode                        `json:"enclosingMethod,omitempty"`
	Enum                        *bool                              `json:"enum,omitempty"`
	FieldIndex                  *map[string]FieldNode              `json:"fieldIndex,omitempty"`
	Fields                      *[]FieldNode                       `json:"fields,omitempty"`
	GenericsPlaceHolder         *bool                              `json:"genericsPlaceHolder,omitempty"`
	GenericsTypes               *[]GenericsType                    `json:"genericsTypes,omitempty"`
	Groovydoc                   *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition     *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	InnerClasses                *map[string]interface{}            `json:"innerClasses,omitempty"`
	Instance                    *AnnotatedNode                     `json:"instance,omitempty"`
	Interface                   *bool                              `json:"interface,omitempty"`
	Interfaces                  *[]ClassNode                       `json:"interfaces,omitempty"`
	LastColumnNumber            *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber              *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber                  *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap                 *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Methods                     *[]MethodNode                      `json:"methods,omitempty"`
	Modifiers                   *int32                             `json:"modifiers,omitempty"`
	Module                      *ModuleNode                        `json:"module,omitempty"`
	Name                        *string                            `json:"name,omitempty"`
	NameWithoutPackage          *string                            `json:"nameWithoutPackage,omitempty"`
	NodeMetaData                *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	ObjectInitializerStatements *[]Statement                       `json:"objectInitializerStatements,omitempty"`
	OuterClass                  *ClassNode                         `json:"outerClass,omitempty"`
	OuterClasses                *[]ClassNode                       `json:"outerClasses,omitempty"`
	Package                     *PackageNode                       `json:"package,omitempty"`
	PackageName                 *string                            `json:"packageName,omitempty"`
	PermittedSubclasses         *[]ClassNode                       `json:"permittedSubclasses,omitempty"`
	PlainNodeReference          *ClassNode                         `json:"plainNodeReference,omitempty"`
	PrimaryClassNode            *bool                              `json:"primaryClassNode,omitempty"`
	Properties                  *[]PropertyNode                    `json:"properties,omitempty"`
	Record                      *bool                              `json:"record,omitempty"`
	// Deprecated:
	RecordComponentNodes *[]RecordComponentNode `json:"recordComponentNodes,omitempty"`
	RecordComponents     *[]RecordComponentNode `json:"recordComponents,omitempty"`
	Redirect             *ClassNode             `json:"redirect,omitempty"`
	RedirectNode         *bool                  `json:"redirectNode,omitempty"`
	Resolved             *bool                  `json:"resolved,omitempty"`
	Script               *bool                  `json:"script,omitempty"`
	ScriptBody           *bool                  `json:"scriptBody,omitempty"`
	Sealed               *bool                  `json:"sealed,omitempty"`
	SourcePosition       *ASTNode               `json:"sourcePosition,omitempty"`
	StaticClass          *bool                  `json:"staticClass,omitempty"`
	SuperClass           *ClassNode             `json:"superClass,omitempty"`
	Synthetic            *bool                  `json:"synthetic,omitempty"`
	SyntheticPublic      *bool                  `json:"syntheticPublic,omitempty"`
	Text                 *string                `json:"text,omitempty"`
	TypeAnnotations      *[]AnnotationNode      `json:"typeAnnotations,omitempty"`
	UnresolvedInterfaces *[]ClassNode           `json:"unresolvedInterfaces,omitempty"`
	UnresolvedName       *string                `json:"unresolvedName,omitempty"`
	UnresolvedSuperClass *ClassNode             `json:"unresolvedSuperClass,omitempty"`
	UsingGenerics        *bool                  `json:"usingGenerics,omitempty"`
}

// ModuleNode defines model for ModuleNode.
type ModuleNode struct {
	Classes                   *[]ClassNode                       `json:"classes,omitempty"`
	ColumnNumber              *int32                             `json:"columnNumber,omitempty"`
	Context                   *SourceUnit                        `json:"context,omitempty"`
	Description               *string                            `json:"description,omitempty"`
	Empty                     *bool                              `json:"empty,omitempty"`
	Imports                   *[]ImportNode                      `json:"imports,omitempty"`
	ImportsResolved           *bool                              `json:"importsResolved,omitempty"`
	LastColumnNumber          *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber            *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber                *int32                             `json:"lineNumber,omitempty"`
	MainClassName             *string                            `json:"mainClassName,omitempty"`
	MetaDataMap               *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Methods                   *[]MethodNode                      `json:"methods,omitempty"`
	NodeMetaData              *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	Package                   *PackageNode                       `json:"package,omitempty"`
	PackageName               *string                            `json:"packageName,omitempty"`
	ScriptBaseClassFromConfig *ClassNode                         `json:"scriptBaseClassFromConfig,omitempty"`
	ScriptClassDummy          *ClassNode                         `json:"scriptClassDummy,omitempty"`
	SourcePosition            *ASTNode                           `json:"sourcePosition,omitempty"`
	StarImports               *[]ImportNode                      `json:"starImports,omitempty"`
	StatementBlock            *BlockStatement                    `json:"statementBlock,omitempty"`
	StaticImports             *map[string]ImportNode             `json:"staticImports,omitempty"`
	StaticStarImports         *map[string]ImportNode             `json:"staticStarImports,omitempty"`
	Text                      *string                            `json:"text,omitempty"`
	Unit                      *CompileUnit                       `json:"unit,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Address   *string `json:"address,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// OverrideVerificationRequest defines model for OverrideVerificationRequest.
type OverrideVerificationRequest struct {
	ArtifactReference *string `json:"artifactReference,omitempty"`
	ArtifactVersion   *string `json:"artifactVersion,omitempty"`
	Comment           *string `json:"comment,omitempty"`
	Status            *string `json:"status,omitempty"`
	VerificationId    *string `json:"verificationId,omitempty"`
}

// PackageNode defines model for PackageNode.
type PackageNode struct {
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
}

// Parameter defines model for Parameter.
type Parameter struct {
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	ClosureSharedVariable   *bool                              `json:"closureSharedVariable,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	DefaultValue            *Expression                        `json:"defaultValue,omitempty"`
	DynamicTyped            *bool                              `json:"dynamicTyped,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	InStaticContext         *bool                              `json:"inStaticContext,omitempty"`
	InitialExpression       *Expression                        `json:"initialExpression,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modifiers               *int32                             `json:"modifiers,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	OriginType              *ClassNode                         `json:"originType,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
}

// ParameterTypes defines model for ParameterTypes.
type ParameterTypes struct {
	VargsMethod *bool `json:"vargsMethod,omitempty"`
}

// ParserPluginFactory defines model for ParserPluginFactory.
type ParserPluginFactory = map[string]interface{}

// PipelineTemplateDependent defines model for PipelineTemplateDependent.
type PipelineTemplateDependent struct {
	Application      *string    `json:"application,omitempty"`
	MetaClass        *MetaClass `json:"metaClass,omitempty"`
	PipelineConfigId *string    `json:"pipelineConfigId,omitempty"`
	PipelineName     *string    `json:"pipelineName,omitempty"`
}

// PluginDependency defines model for PluginDependency.
type PluginDependency struct {
	Optional             *bool   `json:"optional,omitempty"`
	PluginId             *string `json:"pluginId,omitempty"`
	PluginVersionSupport *string `json:"pluginVersionSupport,omitempty"`
}

// PropertyNode defines model for PropertyNode.
type PropertyNode struct {
	Annotations *[]AnnotationNode `json:"annotations,omitempty"`
	// Deprecated:
	ClosureSharedVariable   *bool                              `json:"closureSharedVariable,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	DynamicTyped            *bool                              `json:"dynamicTyped,omitempty"`
	Field                   *FieldNode                         `json:"field,omitempty"`
	GetterBlock             *Statement                         `json:"getterBlock,omitempty"`
	GetterName              *string                            `json:"getterName,omitempty"`
	GetterNameOrDefault     *string                            `json:"getterNameOrDefault,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	InStaticContext         *bool                              `json:"inStaticContext,omitempty"`
	InitialExpression       *Expression                        `json:"initialExpression,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Modifiers               *int32                             `json:"modifiers,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	OriginType              *ClassNode                         `json:"originType,omitempty"`
	Private                 *bool                              `json:"private,omitempty"`
	Public                  *bool                              `json:"public,omitempty"`
	SetterBlock             *Statement                         `json:"setterBlock,omitempty"`
	SetterName              *string                            `json:"setterName,omitempty"`
	SetterNameOrDefault     *string                            `json:"setterNameOrDefault,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Static                  *bool                              `json:"static,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
}

// ReaderSource defines model for ReaderSource.
type ReaderSource struct {
	Reader *map[string]interface{} `json:"reader,omitempty"`
	Uri    *string                 `json:"uri,omitempty"`
}

// RecordComponentNode defines model for RecordComponentNode.
type RecordComponentNode struct {
	Annotations             *[]AnnotationNode                  `json:"annotations,omitempty"`
	ColumnNumber            *int32                             `json:"columnNumber,omitempty"`
	DeclaringClass          *ClassNode                         `json:"declaringClass,omitempty"`
	Groovydoc               *Groovydoc                         `json:"groovydoc,omitempty"`
	HasNoRealSourcePosition *bool                              `json:"hasNoRealSourcePosition,omitempty"`
	Instance                *AnnotatedNode                     `json:"instance,omitempty"`
	LastColumnNumber        *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber          *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber              *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap             *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	Name                    *string                            `json:"name,omitempty"`
	NodeMetaData            *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition          *ASTNode                           `json:"sourcePosition,omitempty"`
	Synthetic               *bool                              `json:"synthetic,omitempty"`
	Text                    *string                            `json:"text,omitempty"`
	Type                    *ClassNode                         `json:"type,omitempty"`
}

// Reduction defines model for Reduction.
type Reduction struct {
	AnExpression *bool   `json:"anExpression,omitempty"`
	Description  *string `json:"description,omitempty"`
	Empty        *bool   `json:"empty,omitempty"`
	Meaning      *int32  `json:"meaning,omitempty"`
	Root         *Token  `json:"root,omitempty"`
	RootText     *string `json:"rootText,omitempty"`
	StartColumn  *int32  `json:"startColumn,omitempty"`
	StartLine    *int32  `json:"startLine,omitempty"`
	Type         *int32  `json:"type,omitempty"`
}

// RemoteExtensionConfig defines model for RemoteExtensionConfig.
type RemoteExtensionConfig struct {
	Config    *map[string]map[string]interface{} `json:"config,omitempty"`
	Id        *string                            `json:"id,omitempty"`
	Transport *RemoteExtensionTransportConfig    `json:"transport,omitempty"`
	Type      *string                            `json:"type,omitempty"`
}

// RemoteExtensionTransportConfig defines model for RemoteExtensionTransportConfig.
type RemoteExtensionTransportConfig struct {
	Http *Http `json:"http,omitempty"`
}

// ReorderPipelinesCommand defines model for ReorderPipelinesCommand.
type ReorderPipelinesCommand struct {
	Application  *string           `json:"application,omitempty"`
	IdsToIndices *map[string]int32 `json:"idsToIndices,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	ApiVersion *string                            `json:"apiVersion,omitempty"`
	Kind       *string                            `json:"kind,omitempty"`
	Metadata   *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Spec       *map[string]map[string]interface{} `json:"spec,omitempty"`
}

// RetryVerificationRequest defines model for RetryVerificationRequest.
type RetryVerificationRequest struct {
	ArtifactReference *string `json:"artifactReference,omitempty"`
	ArtifactVersion   *string `json:"artifactVersion,omitempty"`
	VerificationId    *string `json:"verificationId,omitempty"`
}

// SimpleProxyConfig defines model for SimpleProxyConfig.
type SimpleProxyConfig struct {
	Id  *string `json:"id,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// SourceUnit defines model for SourceUnit.
type SourceUnit struct {
	Ast              *ModuleNode            `json:"ast,omitempty"`
	ClassLoader      *GroovyClassLoader     `json:"classLoader,omitempty"`
	Configuration    *CompilerConfiguration `json:"configuration,omitempty"`
	Cst              *Reduction             `json:"cst,omitempty"`
	ErrorCollector   *ErrorCollector        `json:"errorCollector,omitempty"`
	Name             *string                `json:"name,omitempty"`
	Phase            *int32                 `json:"phase,omitempty"`
	PhaseComplete    *bool                  `json:"phaseComplete,omitempty"`
	PhaseDescription *string                `json:"phaseDescription,omitempty"`
	Source           *ReaderSource          `json:"source,omitempty"`
}

// SpinnakerPluginDescriptor defines model for SpinnakerPluginDescriptor.
type SpinnakerPluginDescriptor struct {
	Dependencies      *[]PluginDependency      `json:"dependencies,omitempty"`
	License           *string                  `json:"license,omitempty"`
	PluginClass       *string                  `json:"pluginClass,omitempty"`
	PluginDescription *string                  `json:"pluginDescription,omitempty"`
	PluginId          *string                  `json:"pluginId,omitempty"`
	PluginVersion     *DefaultPluginDescriptor `json:"pluginVersion,omitempty"`
	Provider          *string                  `json:"provider,omitempty"`
	Requires          *string                  `json:"requires,omitempty"`
	Unsafe            *bool                    `json:"unsafe,omitempty"`
	Version           *string                  `json:"version,omitempty"`
}

// SpinnakerPluginInfo defines model for SpinnakerPluginInfo.
type SpinnakerPluginInfo struct {
	Description  *string                   `json:"description,omitempty"`
	Id           *string                   `json:"id,omitempty"`
	Name         *string                   `json:"name,omitempty"`
	ProjectUrl   *string                   `json:"projectUrl,omitempty"`
	Provider     *string                   `json:"provider,omitempty"`
	Releases     *[]SpinnakerPluginRelease `json:"releases,omitempty"`
	RepositoryId *string                   `json:"repositoryId,omitempty"`
}

// SpinnakerPluginRelease defines model for SpinnakerPluginRelease.
type SpinnakerPluginRelease struct {
	Date             *time.Time               `json:"date,omitempty"`
	Preferred        *bool                    `json:"preferred,omitempty"`
	RemoteExtensions *[]RemoteExtensionConfig `json:"remoteExtensions,omitempty"`
	Requires         *string                  `json:"requires,omitempty"`
	Sha512sum        *string                  `json:"sha512sum,omitempty"`
	Url              *string                  `json:"url,omitempty"`
	Version          *string                  `json:"version,omitempty"`
}

// Statement defines model for Statement.
type Statement struct {
	ColumnNumber     *int32                             `json:"columnNumber,omitempty"`
	Empty            *bool                              `json:"empty,omitempty"`
	LastColumnNumber *int32                             `json:"lastColumnNumber,omitempty"`
	LastLineNumber   *int32                             `json:"lastLineNumber,omitempty"`
	LineNumber       *int32                             `json:"lineNumber,omitempty"`
	MetaDataMap      *map[string]map[string]interface{} `json:"metaDataMap,omitempty"`
	NodeMetaData     *map[string]map[string]interface{} `json:"nodeMetaData,omitempty"`
	SourcePosition   *ASTNode                           `json:"sourcePosition,omitempty"`
	// Deprecated:
	StatementLabel  *string   `json:"statementLabel,omitempty"`
	StatementLabels *[]string `json:"statementLabels,omitempty"`
	Text            *string   `json:"text,omitempty"`
}

// StoredView defines model for StoredView.
type StoredView struct {
	Reference *string `json:"reference,omitempty"`
}

// StreamingResponseBody defines model for StreamingResponseBody.
type StreamingResponseBody = map[string]interface{}

// Token defines model for Token.
type Token struct {
	AnExpression *bool   `json:"anExpression,omitempty"`
	Description  *string `json:"description,omitempty"`
	Empty        *bool   `json:"empty,omitempty"`
	Meaning      *int32  `json:"meaning,omitempty"`
	Root         *Token  `json:"root,omitempty"`
	RootText     *string `json:"rootText,omitempty"`
	StartColumn  *int32  `json:"startColumn,omitempty"`
	StartLine    *int32  `json:"startLine,omitempty"`
	Text         *string `json:"text,omitempty"`
	Type         *int32  `json:"type,omitempty"`
}

// User defines model for User.
type User struct {
	AccountNonExpired     *bool               `json:"accountNonExpired,omitempty"`
	AccountNonLocked      *bool               `json:"accountNonLocked,omitempty"`
	AllowedAccounts       *[]string           `json:"allowedAccounts,omitempty"`
	Authorities           *[]GrantedAuthority `json:"authorities,omitempty"`
	CredentialsNonExpired *bool               `json:"credentialsNonExpired,omitempty"`
	Email                 *string             `json:"email,omitempty"`
	Enabled               *bool               `json:"enabled,omitempty"`
	FirstName             *string             `json:"firstName,omitempty"`
	LastName              *string             `json:"lastName,omitempty"`
	Roles                 *[]string           `json:"roles,omitempty"`
	Username              *string             `json:"username,omitempty"`
}

// Variable defines model for Variable.
type Variable struct {
	ClosureSharedVariable *bool       `json:"closureSharedVariable,omitempty"`
	DynamicTyped          *bool       `json:"dynamicTyped,omitempty"`
	InStaticContext       *bool       `json:"inStaticContext,omitempty"`
	InitialExpression     *Expression `json:"initialExpression,omitempty"`
	Modifiers             *int32      `json:"modifiers,omitempty"`
	Name                  *string     `json:"name,omitempty"`
	OriginType            *ClassNode  `json:"originType,omitempty"`
	Type                  *ClassNode  `json:"type,omitempty"`
}

// VariableScope defines model for VariableScope.
type VariableScope struct {
	ClassScope                       *ClassNode              `json:"classScope,omitempty"`
	DeclaredVariables                *map[string]Variable    `json:"declaredVariables,omitempty"`
	DeclaredVariablesIterator        *map[string]interface{} `json:"declaredVariablesIterator,omitempty"`
	InStaticContext                  *bool                   `json:"inStaticContext,omitempty"`
	Parent                           *VariableScope          `json:"parent,omitempty"`
	ReferencedClassVariables         *map[string]Variable    `json:"referencedClassVariables,omitempty"`
	ReferencedClassVariablesIterator *map[string]interface{} `json:"referencedClassVariablesIterator,omitempty"`
	ReferencedLocalVariablesCount    *int32                  `json:"referencedLocalVariablesCount,omitempty"`
	ReferencedLocalVariablesIterator *map[string]interface{} `json:"referencedLocalVariablesIterator,omitempty"`
	Root                             *bool                   `json:"root,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Version *string `json:"version,omitempty"`
}

// WarningMessage defines model for WarningMessage.
type WarningMessage struct {
	Context *CSTNode `json:"context,omitempty"`
	Message *string  `json:"message,omitempty"`
}

// GetAllApplicationsParams defines parameters for GetAllApplications.
type GetAllApplicationsParams struct {
	// Account filters results to only include applications deployed in the specified account
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Owner filters results to only include applications owned by the specified email
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// GetJobParams defines parameters for GetJob.
type GetJobParams struct {
	Expand        *string `form:"expand,omitempty" json:"expand,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetServerGroupsForApplicationParams defines parameters for GetServerGroupsForApplication.
type GetServerGroupsForApplicationParams struct {
	Expand        *string `form:"expand,omitempty" json:"expand,omitempty"`
	CloudProvider *string `form:"cloudProvider,omitempty" json:"cloudProvider,omitempty"`
	Clusters      *string `form:"clusters,omitempty" json:"clusters,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetServerGroupDetailsParams defines parameters for GetServerGroupDetails.
type GetServerGroupDetailsParams struct {
	IncludeDetails *string `form:"includeDetails,omitempty" json:"includeDetails,omitempty"`
	XRateLimitApp  *string `json:"X-RateLimit-App,omitempty"`
}

// GetApplicationParams defines parameters for GetApplication.
type GetApplicationParams struct {
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetClusters1Params defines parameters for GetClusters1.
type GetClusters1Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetClusters2Params defines parameters for GetClusters2.
type GetClusters2Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetClusters3Params defines parameters for GetClusters3.
type GetClusters3Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetServerGroups1Params defines parameters for GetServerGroups1.
type GetServerGroups1Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetServerGroups2Params defines parameters for GetServerGroups2.
type GetServerGroups2Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetScalingActivitiesParams defines parameters for GetScalingActivities.
type GetScalingActivitiesParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetTargetServerGroupParams defines parameters for GetTargetServerGroup.
type GetTargetServerGroupParams struct {
	OnlyEnabled    *bool   `form:"onlyEnabled,omitempty" json:"onlyEnabled,omitempty"`
	ValidateOldest *bool   `form:"validateOldest,omitempty" json:"validateOldest,omitempty"`
	XRateLimitApp  *string `json:"X-RateLimit-App,omitempty"`
}

// GetClusterLoadBalancersParams defines parameters for GetClusterLoadBalancers.
type GetClusterLoadBalancersParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// SearchForPipelineExecutionsByTriggerParams defines parameters for SearchForPipelineExecutionsByTrigger.
type SearchForPipelineExecutionsByTriggerParams struct {
	// TriggerTypes Only includes executions that were triggered by a trigger with a type that is equal to a type provided in this field. The list of trigger types should be a comma-delimited string. If this value is missing, results will includes executions of all trigger types.
	TriggerTypes *string `form:"triggerTypes,omitempty" json:"triggerTypes,omitempty"`

	// PipelineName Only includes executions that with this pipeline name.
	PipelineName *string `form:"pipelineName,omitempty" json:"pipelineName,omitempty"`

	// EventId Only includes executions that were triggered by a trigger with this eventId.
	EventId *string `form:"eventId,omitempty" json:"eventId,omitempty"`

	// Trigger Only includes executions that were triggered by a trigger that matches the subset of fields provided by this value. This value should be a base64-encoded string of a JSON representation of a trigger object. The comparison succeeds if the execution trigger contains all the fields of the input trigger, the fields are of the same type, and each value of the field "matches". The term "matches" is specific for each field's type:
	// - For Strings: A String value in the execution's trigger matches the input trigger's String value if the former equals the latter (case-insensitive) OR if the former matches the latter as a regular expression.
	// - For Maps: A Map value in the execution's trigger matches the input trigger's Map value if the former contains all keys of the latter and their values match.
	// - For Collections: A Collection value in the execution's trigger matches the input trigger's Collection value if the former has a unique element that matches each element of the latter.
	// - Every other value is compared using the Java "equals" method (Groovy "==" operator)
	Trigger *string `form:"trigger,omitempty" json:"trigger,omitempty"`

	// TriggerTimeStartBoundary Only includes executions that were built at or after the given time, represented as a Unix timestamp in ms (UTC). This value must be >= 0 and <= the value of [triggerTimeEndBoundary], if provided. If this value is missing, it is defaulted to 0.
	TriggerTimeStartBoundary *int64 `form:"triggerTimeStartBoundary,omitempty" json:"triggerTimeStartBoundary,omitempty"`

	// TriggerTimeEndBoundary Only includes executions that were built at or before the given time, represented as a Unix timestamp in ms (UTC). This value must be <= 9223372036854775807 (Long.MAX_VALUE) and >= the value of [triggerTimeStartBoundary], if provided. If this value is missing, it is defaulted to 9223372036854775807.
	TriggerTimeEndBoundary *int64 `form:"triggerTimeEndBoundary,omitempty" json:"triggerTimeEndBoundary,omitempty"`

	// Statuses Only includes executions with a status that is equal to a status provided in this field. The list of statuses should be given as a comma-delimited string. If this value is missing, includes executions of all statuses. Allowed statuses are: NOT_STARTED, RUNNING, PAUSED, SUSPENDED, SUCCEEDED, FAILED_CONTINUE, TERMINAL, CANCELED, REDIRECT, STOPPED, SKIPPED, BUFFERED.
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// StartIndex Sets the first item of the resulting list for pagination. The list is 0-indexed. This value must be >= 0. If this value is missing, it is defaulted to 0.
	StartIndex *int32 `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Size Sets the size of the resulting list for pagination. This value must be > 0. If this value is missing, it is defaulted to 10.
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`

	// Reverse Reverses the resulting list before it is paginated. If this value is missing, it is defaulted to false.
	Reverse *bool `form:"reverse,omitempty" json:"reverse,omitempty"`

	// Expand Expands each execution object in the resulting list. If this value is missing, it is defaulted to false.
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetApplicationHistoryParams defines parameters for GetApplicationHistory.
type GetApplicationHistoryParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetApplicationLoadBalancersParams defines parameters for GetApplicationLoadBalancers.
type GetApplicationLoadBalancersParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetPipelineConfigsForApplicationParams defines parameters for GetPipelineConfigsForApplication.
type GetPipelineConfigsForApplicationParams struct {
	PipelineNameFilter *string `form:"pipelineNameFilter,omitempty" json:"pipelineNameFilter,omitempty"`
}

// InvokePipelineConfig1JSONBody defines parameters for InvokePipelineConfig1.
type InvokePipelineConfig1JSONBody map[string]map[string]interface{}

// InvokePipelineConfig1Params defines parameters for InvokePipelineConfig1.
type InvokePipelineConfig1Params struct {
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// GetPipelinesParams defines parameters for GetPipelines.
type GetPipelinesParams struct {
	Limit    *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`
	Expand   *bool   `form:"expand,omitempty" json:"expand,omitempty"`
}

// CancelPipeline1Params defines parameters for CancelPipeline1.
type CancelPipeline1Params struct {
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	Region   string `form:"region" json:"region"`
	Provider string `form:"provider" json:"provider"`
}

// GetSnapshotHistoryParams defines parameters for GetSnapshotHistory.
type GetSnapshotHistoryParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Page     *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit    *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// Task1JSONBody defines parameters for Task1.
type Task1JSONBody map[string]map[string]interface{}

// GetTaskDetails1Params defines parameters for GetTaskDetails1.
type GetTaskDetails1Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// ArtifactNamesParams defines parameters for ArtifactNames.
type ArtifactNamesParams struct {
	Type          string  `form:"type" json:"type"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// ArtifactVersionsParams defines parameters for ArtifactVersions.
type ArtifactVersionsParams struct {
	Type          string  `form:"type" json:"type"`
	ArtifactName  string  `form:"artifactName" json:"artifactName"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// All11Params defines parameters for All11.
type All11Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// FetchJSONBody defines parameters for Fetch.
type FetchJSONBody map[string]string

// FetchParams defines parameters for Fetch.
type FetchParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetVersionsOfArtifactForProviderParams defines parameters for GetVersionsOfArtifactForProvider.
type GetVersionsOfArtifactForProviderParams struct {
	ReleaseStatus *string `form:"releaseStatus,omitempty" json:"releaseStatus,omitempty"`
}

// RedirectParams defines parameters for Redirect.
type RedirectParams struct {
	To string `form:"to" json:"to"`
}

// BatchUpdateJSONBody defines parameters for BatchUpdate.
type BatchUpdateJSONBody = []map[string]map[string]interface{}

// BatchUpdateParams defines parameters for BatchUpdate.
type BatchUpdateParams struct {
	Application *string `form:"application,omitempty" json:"application,omitempty"`
}

// All10Params defines parameters for All10.
type All10Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllByCloudProvider2Params defines parameters for AllByCloudProvider2.
type AllByCloudProvider2Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// FindImages1Params defines parameters for FindImages1.
type FindImages1Params struct {
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
	Q        *string `form:"q,omitempty" json:"q,omitempty"`
	Region   *string `form:"region,omitempty" json:"region,omitempty"`
	Account  *string `form:"account,omitempty" json:"account,omitempty"`
	Count    *int32  `form:"count,omitempty" json:"count,omitempty"`
}

// FindTags1Params defines parameters for FindTags1.
type FindTags1Params struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	Account       string  `form:"account" json:"account"`
	Repository    string  `form:"repository" json:"repository"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetImageDetails1Params defines parameters for GetImageDetails1.
type GetImageDetails1Params struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetBuilds1Params defines parameters for GetBuilds1.
type GetBuilds1Params struct {
	ProjectKey       *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
	RepoSlug         *string `form:"repoSlug,omitempty" json:"repoSlug,omitempty"`
	CompletionStatus *string `form:"completionStatus,omitempty" json:"completionStatus,omitempty"`
	BuildNumber      *string `form:"buildNumber,omitempty" json:"buildNumber,omitempty"`
	CommitId         *string `form:"commitId,omitempty" json:"commitId,omitempty"`
}

// FindAllParams defines parameters for FindAll.
type FindAllParams struct {
	Filters       map[string]string `form:"filters" json:"filters"`
	XRateLimitApp *string           `json:"X-RateLimit-App,omitempty"`
}

// GetStatisticsParams defines parameters for GetStatistics.
type GetStatisticsParams struct {
	StartTime     *int64            `form:"startTime,omitempty" json:"startTime,omitempty"`
	EndTime       *int64            `form:"endTime,omitempty" json:"endTime,omitempty"`
	Filters       map[string]string `form:"filters" json:"filters"`
	XRateLimitApp *string           `json:"X-RateLimit-App,omitempty"`
}

// StageExecutionParams defines parameters for StageExecution.
type StageExecutionParams struct {
	StageId     string `form:"stageId" json:"stageId"`
	Job         string `form:"job" json:"job"`
	BuildNumber int32  `form:"buildNumber" json:"buildNumber"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetAccountsByTypeParams defines parameters for GetAccountsByType.
type GetAccountsByTypeParams struct {
	// Limit Maximum number of entries to return in results. Used for pagination.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// StartingAccountName Account name to start account definition listing from. Used for pagination.
	StartingAccountName *string `form:"startingAccountName,omitempty" json:"startingAccountName,omitempty"`
}

// GetAccountParams defines parameters for GetAccount.
type GetAccountParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// ValidateCronExpressionParams defines parameters for ValidateCronExpression.
type ValidateCronExpressionParams struct {
	Expression string `form:"expression" json:"expression"`
}

// Error5Params defines parameters for Error5.
type Error5Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// ErrorParams defines parameters for Error.
type ErrorParams struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// Error1Params defines parameters for Error1.
type Error1Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// Error6Params defines parameters for Error6.
type Error6Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// Error4Params defines parameters for Error4.
type Error4Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// Error2Params defines parameters for Error2.
type Error2Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// Error3Params defines parameters for Error3.
type Error3Params struct {
	Trace *bool `form:"trace,omitempty" json:"trace,omitempty"`
}

// GetLatestExecutionsByConfigIdsParams defines parameters for GetLatestExecutionsByConfigIds.
type GetLatestExecutionsByConfigIdsParams struct {
	// PipelineConfigIds A comma-separated list of pipeline configuration IDs to retrieve recent executions for. Either this OR pipelineConfigIds must be supplied, but not both.
	PipelineConfigIds *string `form:"pipelineConfigIds,omitempty" json:"pipelineConfigIds,omitempty"`

	// ExecutionIds A comma-separated list of executions to retrieve. Either this OR pipelineConfigIds must be supplied, but not both.
	ExecutionIds *string `form:"executionIds,omitempty" json:"executionIds,omitempty"`

	// Limit The number of executions to return per pipeline configuration. Ignored if executionIds parameter is supplied. If this value is missing, it is defaulted to 1.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Statuses A comma-separated list of execution statuses to filter by. Ignored if executionIds parameter is supplied. If this value is missing, it is defaulted to all statuses.
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Expand Expands each execution object in the resulting list. If this value is missing, it is defaulted to true.
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// Any9Params defines parameters for Any9.
type Any9Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any4Params defines parameters for Any4.
type Any4Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any5Params defines parameters for Any5.
type Any5Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any10Params defines parameters for Any10.
type Any10Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any8Params defines parameters for Any8.
type Any8Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any6Params defines parameters for Any6.
type Any6Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// Any7Params defines parameters for Any7.
type Any7Params struct {
	RequestParams *map[string]string `form:"requestParams,omitempty" json:"requestParams,omitempty"`
}

// All6Params defines parameters for All6.
type All6Params struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllByAccount1Params defines parameters for AllByAccount1.
type AllByAccount1Params struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllByAccountAndRegionParams defines parameters for AllByAccountAndRegion.
type AllByAccountAndRegionParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetSecurityGroup1Params defines parameters for GetSecurityGroup1.
type GetSecurityGroup1Params struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	VpcId         *string `form:"vpcId,omitempty" json:"vpcId,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// FunctionsParams defines parameters for Functions.
type FunctionsParams struct {
	FunctionName *string `form:"functionName,omitempty" json:"functionName,omitempty"`
	Region       *string `form:"region,omitempty" json:"region,omitempty"`
	Account      *string `form:"account,omitempty" json:"account,omitempty"`
}

// GetHistoryParams defines parameters for GetHistory.
type GetHistoryParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindImagesParams defines parameters for FindImages.
type FindImagesParams struct {
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
	Q        *string `form:"q,omitempty" json:"q,omitempty"`
	Region   *string `form:"region,omitempty" json:"region,omitempty"`
	Account  *string `form:"account,omitempty" json:"account,omitempty"`
	Count    *int32  `form:"count,omitempty" json:"count,omitempty"`
}

// FindTagsParams defines parameters for FindTags.
type FindTagsParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	Account       string  `form:"account" json:"account"`
	Repository    string  `form:"repository" json:"repository"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetImageDetailsParams defines parameters for GetImageDetails.
type GetImageDetailsParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetInstanceDetailsParams defines parameters for GetInstanceDetails.
type GetInstanceDetailsParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetConsoleOutputParams defines parameters for GetConsoleOutput.
type GetConsoleOutputParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetAllParams defines parameters for GetAll.
type GetAllParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetLoadBalancerDetailsParams defines parameters for GetLoadBalancerDetails.
type GetLoadBalancerDetailsParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetLoadBalancerParams defines parameters for GetLoadBalancer.
type GetLoadBalancerParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetApplicationDetailsParams defines parameters for GetApplicationDetails.
type GetApplicationDetailsParams struct {
	IncludeDetails      *bool     `form:"includeDetails,omitempty" json:"includeDetails,omitempty"`
	Entities            *[]string `form:"entities,omitempty" json:"entities,omitempty"`
	MaxArtifactVersions *int32    `form:"maxArtifactVersions,omitempty" json:"maxArtifactVersions,omitempty"`
}

// GetConstraintStateParams defines parameters for GetConstraintState.
type GetConstraintStateParams struct {
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeletePinParams defines parameters for DeletePin.
type DeletePinParams struct {
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`
}

// ProcessNotificationCallback1Params defines parameters for ProcessNotificationCallback1.
type ProcessNotificationCallback1Params struct {
	Request string `form:"request" json:"request"`
}

// GetAdoptionReportParams defines parameters for GetAdoptionReport.
type GetAdoptionReportParams struct {
	Params map[string]string `form:"params" json:"params"`
}

// GetOnboardingReportParams defines parameters for GetOnboardingReport.
type GetOnboardingReportParams struct {
	Params map[string]string `form:"params" json:"params"`
	Accept *string           `json:"Accept,omitempty"`
}

// ExportResourceParams defines parameters for ExportResource.
type ExportResourceParams struct {
	ServiceAccount string `form:"serviceAccount" json:"serviceAccount"`
}

// All5Params defines parameters for All5.
type All5Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllByCloudProvider1Params defines parameters for AllByCloudProvider1.
type AllByCloudProvider1Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// ProcessNotificationCallbackParams defines parameters for ProcessNotificationCallback.
type ProcessNotificationCallbackParams struct {
	Request string `form:"request" json:"request"`
}

// SaveNotificationConfigJSONBody defines parameters for SaveNotificationConfig.
type SaveNotificationConfigJSONBody map[string]map[string]interface{}

// GetPipelineConfigHistory1Params defines parameters for GetPipelineConfigHistory1.
type GetPipelineConfigHistory1Params struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// List3Params defines parameters for List3.
type List3Params struct {
	Scopes *[]string `form:"scopes,omitempty" json:"scopes,omitempty"`
}

// Create1JSONBody defines parameters for Create1.
type Create1JSONBody map[string]map[string]interface{}

// ResolveTemplatesParams defines parameters for ResolveTemplates.
type ResolveTemplatesParams struct {
	Source           string  `form:"source" json:"source"`
	ExecutionId      *string `form:"executionId,omitempty" json:"executionId,omitempty"`
	PipelineConfigId *string `form:"pipelineConfigId,omitempty" json:"pipelineConfigId,omitempty"`
}

// Delete2Params defines parameters for Delete2.
type Delete2Params struct {
	Application *string `form:"application,omitempty" json:"application,omitempty"`
}

// Update1JSONBody defines parameters for Update1.
type Update1JSONBody map[string]map[string]interface{}

// Update1Params defines parameters for Update1.
type Update1Params struct {
	SkipPlanDependents *bool `form:"skipPlanDependents,omitempty" json:"skipPlanDependents,omitempty"`
}

// ListPipelineTemplateDependents1Params defines parameters for ListPipelineTemplateDependents1.
type ListPipelineTemplateDependents1Params struct {
	Recursive *bool `form:"recursive,omitempty" json:"recursive,omitempty"`
}

// SavePipelineJSONBody defines parameters for SavePipeline.
type SavePipelineJSONBody map[string]map[string]interface{}

// SavePipelineParams defines parameters for SavePipeline.
type SavePipelineParams struct {
	StaleCheck *bool `form:"staleCheck,omitempty" json:"staleCheck,omitempty"`
}

// BulksavePipelineJSONBody defines parameters for BulksavePipeline.
type BulksavePipelineJSONBody = []map[string]map[string]interface{}

// BulksavePipelineParams defines parameters for BulksavePipeline.
type BulksavePipelineParams struct {
	// Application Application in which to run the bulk save task
	Application *string `form:"application,omitempty" json:"application,omitempty"`
}

// RenamePipelineJSONBody defines parameters for RenamePipeline.
type RenamePipelineJSONBody map[string]map[string]interface{}

// StartJSONBody defines parameters for Start.
type StartJSONBody map[string]map[string]interface{}

// InvokePipelineConfigViaEchoJSONBody defines parameters for InvokePipelineConfigViaEcho.
type InvokePipelineConfigViaEchoJSONBody map[string]map[string]interface{}

// InvokePipelineConfigJSONBody defines parameters for InvokePipelineConfig.
type InvokePipelineConfigJSONBody map[string]map[string]interface{}

// UpdatePipelineJSONBody defines parameters for UpdatePipeline.
type UpdatePipelineJSONBody map[string]map[string]interface{}

// CancelPipelineParams defines parameters for CancelPipeline.
type CancelPipelineParams struct {
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`
	Force  *bool   `form:"force,omitempty" json:"force,omitempty"`
}

// EvaluateExpressionForExecutionParams defines parameters for EvaluateExpressionForExecution.
type EvaluateExpressionForExecutionParams struct {
	Expression string `form:"expression" json:"expression"`
}

// EvaluateExpressionForExecutionViaPOST1JSONBody defines parameters for EvaluateExpressionForExecutionViaPOST1.
type EvaluateExpressionForExecutionViaPOST1JSONBody map[string]map[string]interface{}

// EvaluateExpressionForExecutionViaPOST1TextBody defines parameters for EvaluateExpressionForExecutionViaPOST1.
type EvaluateExpressionForExecutionViaPOST1TextBody = string

// EvaluateVariablesJSONBody defines parameters for EvaluateVariables.
type EvaluateVariablesJSONBody = []map[string]string

// EvaluateVariablesParams defines parameters for EvaluateVariables.
type EvaluateVariablesParams struct {
	// ExecutionId Execution id to run against
	ExecutionId string `form:"executionId" json:"executionId"`

	// RequisiteStageRefIds Comma separated list of requisite stage IDs for the evaluation stage
	RequisiteStageRefIds *string `form:"requisiteStageRefIds,omitempty" json:"requisiteStageRefIds,omitempty"`

	// SpelVersion Version of SpEL evaluation logic to use (v3 or v4)
	SpelVersion *string `form:"spelVersion,omitempty" json:"spelVersion,omitempty"`
}

// UpdateStageJSONBody defines parameters for UpdateStage.
type UpdateStageJSONBody map[string]map[string]interface{}

// RestartStageJSONBody defines parameters for RestartStage.
type RestartStageJSONBody map[string]map[string]interface{}

// EvaluateExpressionForExecutionAtStageParams defines parameters for EvaluateExpressionForExecutionAtStage.
type EvaluateExpressionForExecutionAtStageParams struct {
	Expression string `form:"expression" json:"expression"`
}

// GetAllPluginInfoParams defines parameters for GetAllPluginInfo.
type GetAllPluginInfoParams struct {
	Service *string `form:"service,omitempty" json:"service,omitempty"`
}

// GetInstalledPluginsParams defines parameters for GetInstalledPlugins.
type GetInstalledPluginsParams struct {
	Service *string `form:"service,omitempty" json:"service,omitempty"`
}

// PublishPluginMultipartBody defines parameters for PublishPlugin.
type PublishPluginMultipartBody struct {
	Plugin     openapi_types.File  `json:"plugin"`
	PluginInfo SpinnakerPluginInfo `json:"pluginInfo"`
}

// GetClustersParams defines parameters for GetClusters.
type GetClustersParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllPipelinesForProjectParams defines parameters for AllPipelinesForProject.
type AllPipelinesForProjectParams struct {
	Limit    *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// Any3Params defines parameters for Any3.
type Any3Params struct {
	RequestParams map[string]string `form:"requestParams" json:"requestParams"`
}

// AnyParams defines parameters for Any.
type AnyParams struct {
	RequestParams map[string]string `form:"requestParams" json:"requestParams"`
}

// Any1Params defines parameters for Any1.
type Any1Params struct {
	RequestParams map[string]string `form:"requestParams" json:"requestParams"`
}

// Any2Params defines parameters for Any2.
type Any2Params struct {
	RequestParams map[string]string `form:"requestParams" json:"requestParams"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	Q               *string `form:"q,omitempty" json:"q,omitempty"`
	Type            string  `form:"type" json:"type"`
	Platform        *string `form:"platform,omitempty" json:"platform,omitempty"`
	PageSize        *int32  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	Page            *int32  `form:"page,omitempty" json:"page,omitempty"`
	AllowShortQuery *bool   `form:"allowShortQuery,omitempty" json:"allowShortQuery,omitempty"`
	XRateLimitApp   *string `json:"X-RateLimit-App,omitempty"`
}

// All1Params defines parameters for All1.
type All1Params struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// AllByAccountParams defines parameters for AllByAccount.
type AllByAccountParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetSecurityGroupParams defines parameters for GetSecurityGroup.
type GetSecurityGroupParams struct {
	Provider      *string `form:"provider,omitempty" json:"provider,omitempty"`
	VpcId         *string `form:"vpcId,omitempty" json:"vpcId,omitempty"`
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetServerGroupsParams defines parameters for GetServerGroups.
type GetServerGroupsParams struct {
	Applications  *[]string `form:"applications,omitempty" json:"applications,omitempty"`
	Ids           *[]string `form:"ids,omitempty" json:"ids,omitempty"`
	CloudProvider *string   `form:"cloudProvider,omitempty" json:"cloudProvider,omitempty"`
	XRateLimitApp *string   `json:"X-RateLimit-App,omitempty"`
}

// GetServiceInstanceParams defines parameters for GetServiceInstance.
type GetServiceInstanceParams struct {
	CloudProvider       string `form:"cloudProvider" json:"cloudProvider"`
	Region              string `form:"region" json:"region"`
	ServiceInstanceName string `form:"serviceInstanceName" json:"serviceInstanceName"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	CloudProvider *string `form:"cloudProvider,omitempty" json:"cloudProvider,omitempty"`
	Region        string  `form:"region" json:"region"`
}

// AllParams defines parameters for All.
type AllParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// SaveStrategyJSONBody defines parameters for SaveStrategy.
type SaveStrategyJSONBody map[string]map[string]interface{}

// RenameStrategyJSONBody defines parameters for RenameStrategy.
type RenameStrategyJSONBody map[string]map[string]interface{}

// UpdateStrategyJSONBody defines parameters for UpdateStrategy.
type UpdateStrategyJSONBody map[string]map[string]interface{}

// GetPipelineConfigHistoryParams defines parameters for GetPipelineConfigHistory.
type GetPipelineConfigHistoryParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// List1Params defines parameters for List1.
type List1Params struct {
	// AllParameters Any parameters to filter by, passed as individual parameters. Options are:
	//   cloudProvider, application, entityType, entityId, idPrefix, account, region, namespace, maxResults
	AllParameters map[string]map[string]interface{} `form:"allParameters" json:"allParameters"`
	XRateLimitApp *string                           `json:"X-RateLimit-App,omitempty"`
}

// PostJSONBody defines parameters for Post.
type PostJSONBody = []map[string]map[string]interface{}

// PostParams defines parameters for Post.
type PostParams struct {
	EntityId      string  `form:"entityId" json:"entityId"`
	EntityType    string  `form:"entityType" json:"entityType"`
	Account       string  `form:"account" json:"account"`
	Region        string  `form:"region" json:"region"`
	CloudProvider string  `form:"cloudProvider" json:"cloudProvider"`
	Application   *string `form:"application,omitempty" json:"application,omitempty"`
	IsPartial     *bool   `form:"isPartial,omitempty" json:"isPartial,omitempty"`
}

// Delete1Params defines parameters for Delete1.
type Delete1Params struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// TaskJSONBody defines parameters for Task.
type TaskJSONBody map[string]map[string]interface{}

// CancelTasksParams defines parameters for CancelTasks.
type CancelTasksParams struct {
	Ids []string `form:"ids" json:"ids"`
}

// GetTaskDetailsParams defines parameters for GetTaskDetails.
type GetTaskDetailsParams struct {
	XRateLimitApp *string `json:"X-RateLimit-App,omitempty"`
}

// GetAdhocData5Params defines parameters for GetAdhocData5.
type GetAdhocData5Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocDataParams defines parameters for GetAdhocData.
type GetAdhocDataParams struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocData1Params defines parameters for GetAdhocData1.
type GetAdhocData1Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocData6Params defines parameters for GetAdhocData6.
type GetAdhocData6Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocData4Params defines parameters for GetAdhocData4.
type GetAdhocData4Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocData2Params defines parameters for GetAdhocData2.
type GetAdhocData2Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetAdhocData3Params defines parameters for GetAdhocData3.
type GetAdhocData3Params struct {
	ExpectedContentType *string `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetStaticDataParams defines parameters for GetStaticData.
type GetStaticDataParams struct {
	Filters             map[string]string `form:"filters" json:"filters"`
	ExpectedContentType *string           `form:"expectedContentType,omitempty" json:"expectedContentType,omitempty"`
}

// GetBuildMastersParams defines parameters for GetBuildMasters.
type GetBuildMastersParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// InitiateCanaryWithConfigJSONBody defines parameters for InitiateCanaryWithConfig.
type InitiateCanaryWithConfigJSONBody map[string]map[string]interface{}

// InitiateCanaryWithConfigParams defines parameters for InitiateCanaryWithConfig.
type InitiateCanaryWithConfigParams struct {
	Application               *string `form:"application,omitempty" json:"application,omitempty"`
	ParentPipelineExecutionId *string `form:"parentPipelineExecutionId,omitempty" json:"parentPipelineExecutionId,omitempty"`
	MetricsAccountName        *string `form:"metricsAccountName,omitempty" json:"metricsAccountName,omitempty"`
	StorageAccountName        *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
}

// InitiateCanaryJSONBody defines parameters for InitiateCanary.
type InitiateCanaryJSONBody map[string]map[string]interface{}

// InitiateCanaryParams defines parameters for InitiateCanary.
type InitiateCanaryParams struct {
	Application               *string `form:"application,omitempty" json:"application,omitempty"`
	ParentPipelineExecutionId *string `form:"parentPipelineExecutionId,omitempty" json:"parentPipelineExecutionId,omitempty"`
	MetricsAccountName        *string `form:"metricsAccountName,omitempty" json:"metricsAccountName,omitempty"`
	StorageAccountName        *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
	ConfigurationAccountName  *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// GetCanaryResult1Params defines parameters for GetCanaryResult1.
type GetCanaryResult1Params struct {
	StorageAccountName *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
}

// GetCanaryResultParams defines parameters for GetCanaryResult.
type GetCanaryResultParams struct {
	StorageAccountName *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
}

// ListMetricsServiceMetadataParams defines parameters for ListMetricsServiceMetadata.
type ListMetricsServiceMetadataParams struct {
	Filter             *string `form:"filter,omitempty" json:"filter,omitempty"`
	MetricsAccountName *string `form:"metricsAccountName,omitempty" json:"metricsAccountName,omitempty"`
}

// GetMetricSetPairListParams defines parameters for GetMetricSetPairList.
type GetMetricSetPairListParams struct {
	StorageAccountName *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
}

// GetCanaryResultsByApplicationParams defines parameters for GetCanaryResultsByApplication.
type GetCanaryResultsByApplicationParams struct {
	Limit int32  `form:"limit" json:"limit"`
	Page  *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Statuses Comma-separated list of statuses, e.g.: RUNNING, SUCCEEDED, TERMINAL
	Statuses           *string `form:"statuses,omitempty" json:"statuses,omitempty"`
	StorageAccountName *string `form:"storageAccountName,omitempty" json:"storageAccountName,omitempty"`
}

// GetCanaryConfigsParams defines parameters for GetCanaryConfigs.
type GetCanaryConfigsParams struct {
	Application              *string `form:"application,omitempty" json:"application,omitempty"`
	ConfigurationAccountName *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// CreateCanaryConfigJSONBody defines parameters for CreateCanaryConfig.
type CreateCanaryConfigJSONBody map[string]map[string]interface{}

// CreateCanaryConfigParams defines parameters for CreateCanaryConfig.
type CreateCanaryConfigParams struct {
	ConfigurationAccountName *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// DeleteCanaryConfigParams defines parameters for DeleteCanaryConfig.
type DeleteCanaryConfigParams struct {
	ConfigurationAccountName *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// GetCanaryConfigParams defines parameters for GetCanaryConfig.
type GetCanaryConfigParams struct {
	ConfigurationAccountName *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// UpdateCanaryConfigJSONBody defines parameters for UpdateCanaryConfig.
type UpdateCanaryConfigJSONBody map[string]map[string]interface{}

// UpdateCanaryConfigParams defines parameters for UpdateCanaryConfig.
type UpdateCanaryConfigParams struct {
	ConfigurationAccountName *string `form:"configurationAccountName,omitempty" json:"configurationAccountName,omitempty"`
}

// ListParams defines parameters for List.
type ListParams struct {
	Scopes *[]string `form:"scopes,omitempty" json:"scopes,omitempty"`
}

// CreateJSONBody defines parameters for Create.
type CreateJSONBody map[string]map[string]interface{}

// CreateParams defines parameters for Create.
type CreateParams struct {
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// PlanJSONBody defines parameters for Plan.
type PlanJSONBody map[string]map[string]interface{}

// UpdateJSONBody defines parameters for Update.
type UpdateJSONBody map[string]map[string]interface{}

// UpdateParams defines parameters for Update.
type UpdateParams struct {
	Tag                *string `form:"tag,omitempty" json:"tag,omitempty"`
	SkipPlanDependents *bool   `form:"skipPlanDependents,omitempty" json:"skipPlanDependents,omitempty"`
}

// ListVersionsParams defines parameters for ListVersions.
type ListVersionsParams struct {
	Scopes *[]string `form:"scopes,omitempty" json:"scopes,omitempty"`
}

// DeleteParams defines parameters for Delete.
type DeleteParams struct {
	Tag         *string `form:"tag,omitempty" json:"tag,omitempty"`
	Digest      *string `form:"digest,omitempty" json:"digest,omitempty"`
	Application *string `form:"application,omitempty" json:"application,omitempty"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	Tag    *string `form:"tag,omitempty" json:"tag,omitempty"`
	Digest *string `form:"digest,omitempty" json:"digest,omitempty"`
}

// V3GetBuildMastersParams defines parameters for V3GetBuildMasters.
type V3GetBuildMastersParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// V3GetBuildParams defines parameters for V3GetBuild.
type V3GetBuildParams struct {
	Job string `form:"job" json:"job"`
}

// V3GetBuildsParams defines parameters for V3GetBuilds.
type V3GetBuildsParams struct {
	Job string `form:"job" json:"job"`
}

// V3GetJobConfigParams defines parameters for V3GetJobConfig.
type V3GetJobConfigParams struct {
	Job string `form:"job" json:"job"`
}

// WebhooksParams defines parameters for Webhooks.
type WebhooksParams struct {
	XHubSignature *string `json:"X-Hub-Signature,omitempty"`
	XEventKey     *string `json:"X-Event-Key,omitempty"`
}

// ReorderPipelinesJSONRequestBody defines body for ReorderPipelines for application/json ContentType.
type ReorderPipelinesJSONRequestBody = ReorderPipelinesCommand

// ReorderPipelineStrategiesJSONRequestBody defines body for ReorderPipelineStrategies for application/json ContentType.
type ReorderPipelineStrategiesJSONRequestBody = ReorderPipelinesCommand

// InvokePipelineConfig1JSONRequestBody defines body for InvokePipelineConfig1 for application/json ContentType.
type InvokePipelineConfig1JSONRequestBody InvokePipelineConfig1JSONBody

// Task1JSONRequestBody defines body for Task1 for application/json ContentType.
type Task1JSONRequestBody Task1JSONBody

// FetchJSONRequestBody defines body for Fetch for application/json ContentType.
type FetchJSONRequestBody FetchJSONBody

// BatchUpdateJSONRequestBody defines body for BatchUpdate for application/json ContentType.
type BatchUpdateJSONRequestBody = BatchUpdateJSONBody

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = AccountDefinition

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody = AccountDefinition

// UpdateConstraintStatusJSONRequestBody defines body for UpdateConstraintStatus for application/json ContentType.
type UpdateConstraintStatusJSONRequestBody = ConstraintStatus

// MarkBadJSONRequestBody defines body for MarkBad for application/json ContentType.
type MarkBadJSONRequestBody = EnvironmentArtifactVeto

// MarkGoodJSONRequestBody defines body for MarkGood for application/json ContentType.
type MarkGoodJSONRequestBody = EnvironmentArtifactVeto

// CreatePinJSONRequestBody defines body for CreatePin for application/json ContentType.
type CreatePinJSONRequestBody = EnvironmentArtifactPin

// VetoJSONRequestBody defines body for Veto for application/json ContentType.
type VetoJSONRequestBody = EnvironmentArtifactVeto

// UpsertManifestJSONRequestBody defines body for UpsertManifest for application/json ContentType.
type UpsertManifestJSONRequestBody = DeliveryConfig

// DiffManifestJSONRequestBody defines body for DiffManifest for application/json ContentType.
type DiffManifestJSONRequestBody = DeliveryConfig

// ValidateManifestJSONRequestBody defines body for ValidateManifest for application/json ContentType.
type ValidateManifestJSONRequestBody = DeliveryConfig

// GraphqlJSONRequestBody defines body for Graphql for application/json ContentType.
type GraphqlJSONRequestBody = GraphQLRequest

// DiffResourceJSONRequestBody defines body for DiffResource for application/json ContentType.
type DiffResourceJSONRequestBody = Resource

// OverrideVerificationJSONRequestBody defines body for OverrideVerification for application/json ContentType.
type OverrideVerificationJSONRequestBody = OverrideVerificationRequest

// RetryVerificationJSONRequestBody defines body for RetryVerification for application/json ContentType.
type RetryVerificationJSONRequestBody = RetryVerificationRequest

// SaveNotificationConfigJSONRequestBody defines body for SaveNotificationConfig for application/json ContentType.
type SaveNotificationConfigJSONRequestBody SaveNotificationConfigJSONBody

// Create1JSONRequestBody defines body for Create1 for application/json ContentType.
type Create1JSONRequestBody Create1JSONBody

// Update1JSONRequestBody defines body for Update1 for application/json ContentType.
type Update1JSONRequestBody Update1JSONBody

// SavePipelineJSONRequestBody defines body for SavePipeline for application/json ContentType.
type SavePipelineJSONRequestBody SavePipelineJSONBody

// BulksavePipelineJSONRequestBody defines body for BulksavePipeline for application/json ContentType.
type BulksavePipelineJSONRequestBody = BulksavePipelineJSONBody

// RenamePipelineJSONRequestBody defines body for RenamePipeline for application/json ContentType.
type RenamePipelineJSONRequestBody RenamePipelineJSONBody

// StartJSONRequestBody defines body for Start for application/json ContentType.
type StartJSONRequestBody StartJSONBody

// InvokePipelineConfigViaEchoJSONRequestBody defines body for InvokePipelineConfigViaEcho for application/json ContentType.
type InvokePipelineConfigViaEchoJSONRequestBody InvokePipelineConfigViaEchoJSONBody

// InvokePipelineConfigJSONRequestBody defines body for InvokePipelineConfig for application/json ContentType.
type InvokePipelineConfigJSONRequestBody InvokePipelineConfigJSONBody

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody UpdatePipelineJSONBody

// EvaluateExpressionForExecutionViaPOST1JSONRequestBody defines body for EvaluateExpressionForExecutionViaPOST1 for application/json ContentType.
type EvaluateExpressionForExecutionViaPOST1JSONRequestBody EvaluateExpressionForExecutionViaPOST1JSONBody

// EvaluateExpressionForExecutionViaPOST1TextRequestBody defines body for EvaluateExpressionForExecutionViaPOST1 for text/plain ContentType.
type EvaluateExpressionForExecutionViaPOST1TextRequestBody = EvaluateExpressionForExecutionViaPOST1TextBody

// EvaluateVariablesJSONRequestBody defines body for EvaluateVariables for application/json ContentType.
type EvaluateVariablesJSONRequestBody = EvaluateVariablesJSONBody

// UpdateStageJSONRequestBody defines body for UpdateStage for application/json ContentType.
type UpdateStageJSONRequestBody UpdateStageJSONBody

// RestartStageJSONRequestBody defines body for RestartStage for application/json ContentType.
type RestartStageJSONRequestBody RestartStageJSONBody

// PersistPluginInfoJSONRequestBody defines body for PersistPluginInfo for application/json ContentType.
type PersistPluginInfoJSONRequestBody = SpinnakerPluginInfo

// PersistPluginInfo1JSONRequestBody defines body for PersistPluginInfo1 for application/json ContentType.
type PersistPluginInfo1JSONRequestBody = SpinnakerPluginInfo

// PublishPluginMultipartRequestBody defines body for PublishPlugin for multipart/form-data ContentType.
type PublishPluginMultipartRequestBody PublishPluginMultipartBody

// SaveStrategyJSONRequestBody defines body for SaveStrategy for application/json ContentType.
type SaveStrategyJSONRequestBody SaveStrategyJSONBody

// RenameStrategyJSONRequestBody defines body for RenameStrategy for application/json ContentType.
type RenameStrategyJSONRequestBody RenameStrategyJSONBody

// UpdateStrategyJSONRequestBody defines body for UpdateStrategy for application/json ContentType.
type UpdateStrategyJSONRequestBody UpdateStrategyJSONBody

// PostJSONRequestBody defines body for Post for application/json ContentType.
type PostJSONRequestBody = PostJSONBody

// TaskJSONRequestBody defines body for Task for application/json ContentType.
type TaskJSONRequestBody TaskJSONBody

// InitiateCanaryWithConfigJSONRequestBody defines body for InitiateCanaryWithConfig for application/json ContentType.
type InitiateCanaryWithConfigJSONRequestBody InitiateCanaryWithConfigJSONBody

// InitiateCanaryJSONRequestBody defines body for InitiateCanary for application/json ContentType.
type InitiateCanaryJSONRequestBody InitiateCanaryJSONBody

// CreateCanaryConfigJSONRequestBody defines body for CreateCanaryConfig for application/json ContentType.
type CreateCanaryConfigJSONRequestBody CreateCanaryConfigJSONBody

// UpdateCanaryConfigJSONRequestBody defines body for UpdateCanaryConfig for application/json ContentType.
type UpdateCanaryConfigJSONRequestBody UpdateCanaryConfigJSONBody

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody CreateJSONBody

// PlanJSONRequestBody defines body for Plan for application/json ContentType.
type PlanJSONRequestBody PlanJSONBody

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody UpdateJSONBody

// Webhooks1JSONRequestBody defines body for Webhooks1 for application/json ContentType.
type Webhooks1JSONRequestBody = CloudEvent

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Root5 request
	Root5(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root request
	Root(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root1 request
	Root1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root6 request
	Root6(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root4 request
	Root4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root2 request
	Root2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Root3 request
	Root3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReorderPipelinesWithBody request with any body
	ReorderPipelinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReorderPipelines(ctx context.Context, body ReorderPipelinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReorderPipelineStrategiesWithBody request with any body
	ReorderPipelineStrategiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReorderPipelineStrategies(ctx context.Context, body ReorderPipelineStrategiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllApplications request
	GetAllApplications(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJob request
	GetJob(ctx context.Context, applicationName string, account string, region string, name string, params *GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroupsForApplication request
	GetServerGroupsForApplication(ctx context.Context, applicationName string, params *GetServerGroupsForApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroupDetails request
	GetServerGroupDetails(ctx context.Context, applicationName string, account string, region string, serverGroupName string, params *GetServerGroupDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, application string, params *GetApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters1 request
	GetClusters1(ctx context.Context, application string, params *GetClusters1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters2 request
	GetClusters2(ctx context.Context, application string, account string, params *GetClusters2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters3 request
	GetClusters3(ctx context.Context, application string, account string, clusterName string, params *GetClusters3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroups1 request
	GetServerGroups1(ctx context.Context, application string, account string, clusterName string, params *GetServerGroups1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroups2 request
	GetServerGroups2(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetServerGroups2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScalingActivities request
	GetScalingActivities(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetScalingActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetServerGroup request
	GetTargetServerGroup(ctx context.Context, application string, account string, clusterName string, cloudProvider string, scope string, target string, params *GetTargetServerGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterLoadBalancers request
	GetClusterLoadBalancers(ctx context.Context, application string, account string, clusterName string, pType string, params *GetClusterLoadBalancersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForPipelineExecutionsByTrigger request
	SearchForPipelineExecutionsByTrigger(ctx context.Context, application string, params *SearchForPipelineExecutionsByTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationFunctions request
	ApplicationFunctions(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationHistory request
	GetApplicationHistory(ctx context.Context, application string, params *GetApplicationHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationLoadBalancers request
	GetApplicationLoadBalancers(ctx context.Context, application string, params *GetApplicationLoadBalancersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineConfigsForApplication request
	GetPipelineConfigsForApplication(ctx context.Context, application string, params *GetPipelineConfigsForApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineConfig request
	GetPipelineConfig(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvokePipelineConfig1WithBody request with any body
	InvokePipelineConfig1WithBody(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvokePipelineConfig1(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, body InvokePipelineConfig1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelines request
	GetPipelines(ctx context.Context, application string, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPipeline1 request
	CancelPipeline1(ctx context.Context, application string, id string, params *CancelPipeline1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationRawResources request
	GetApplicationRawResources(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroupManagersForApplication request
	GetServerGroupManagersForApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, application string, account string, serverGroupName string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentSnapshot request
	GetCurrentSnapshot(ctx context.Context, application string, account string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotHistory request
	GetSnapshotHistory(ctx context.Context, application string, account string, params *GetSnapshotHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStrategyConfigsForApplication request
	GetStrategyConfigsForApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStrategyConfig request
	GetStrategyConfig(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasks request
	GetTasks(ctx context.Context, application string, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Task1WithBody request with any body
	Task1WithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Task1(ctx context.Context, application string, body Task1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask1 request
	GetTask1(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelTask1 request
	CancelTask1(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskDetails1 request
	GetTaskDetails1(ctx context.Context, application string, id string, taskDetailsId string, params *GetTaskDetails1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Names1 request
	Names1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactNames request
	ArtifactNames(ctx context.Context, accountName string, params *ArtifactNamesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactVersions request
	ArtifactVersions(ctx context.Context, accountName string, params *ArtifactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoredArtifact request
	GetStoredArtifact(ctx context.Context, application string, hash string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All11 request
	All11(ctx context.Context, params *All11Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchWithBody request with any body
	FetchWithBody(ctx context.Context, params *FetchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fetch(ctx context.Context, params *FetchParams, body FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersionsOfArtifactForProvider request
	GetVersionsOfArtifactForProvider(ctx context.Context, provider string, packageName string, params *GetVersionsOfArtifactForProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifact request
	GetArtifact(ctx context.Context, provider string, packageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSessionCache request
	DeleteSessionCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoggedOut request
	LoggedOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RawUser request
	RawUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Redirect request
	Redirect(ctx context.Context, params *RedirectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Sync request
	Sync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// User request
	User(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LookupLogs request
	LookupLogs(ctx context.Context, region string, statusId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BakeOptions request
	BakeOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BakeOptions1 request
	BakeOptions1(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchUpdateWithBody request with any body
	BatchUpdateWithBody(ctx context.Context, params *BatchUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchUpdate(ctx context.Context, params *BatchUpdateParams, body BatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentMonitors request
	GetDeploymentMonitors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExpressionCapabilities request
	GetExpressionCapabilities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQuietPeriodState request
	GetQuietPeriodState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All10 request
	All10(ctx context.Context, params *All10Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByCloudProvider2 request
	AllByCloudProvider2(ctx context.Context, cloudProvider string, params *AllByCloudProvider2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindImages1 request
	FindImages1(ctx context.Context, params *FindImages1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindTags1 request
	FindTags1(ctx context.Context, params *FindTags1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImageDetails1 request
	GetImageDetails1(ctx context.Context, account string, region string, imageId string, params *GetImageDetails1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuilds1 request
	GetBuilds1(ctx context.Context, params *GetBuilds1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuildOutputById request
	GetBuildOutputById(ctx context.Context, buildId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllDeletedResources request
	GetAllDeletedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMarkedResources request
	GetAllMarkedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarkedResource request
	GetMarkedResource(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptOut request
	OptOut(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAll request
	FindAll(ctx context.Context, cloudProvider string, account string, region string, params *FindAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatistics request
	GetStatistics(ctx context.Context, cloudProvider string, account string, region string, metricName string, params *GetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StageExecution request
	StageExecution(ctx context.Context, params *StageExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Teams request
	Teams(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Pipelines request
	Pipelines(ctx context.Context, buildMaster string, team string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Jobs request
	Jobs(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Resources request
	Resources(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccounts request
	GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountWithBody request with any body
	UpdateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccount(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsByType request
	GetAccountsByType(ctx context.Context, accountType string, params *GetAccountsByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, account string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateCronExpression request
	ValidateCronExpression(ctx context.Context, params *ValidateCronExpressionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllMetricAlarms request
	AllMetricAlarms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEcsClusterDescriptions request
	GetEcsClusterDescriptions(ctx context.Context, account string, region string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All9 request
	All9(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All8 request
	All8(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All7 request
	All7(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error5 request
	Error5(ctx context.Context, params *Error5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error request
	Error(ctx context.Context, params *ErrorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error1 request
	Error1(ctx context.Context, params *Error1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error6 request
	Error6(ctx context.Context, params *Error6Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error4 request
	Error4(ctx context.Context, params *Error4Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error2 request
	Error2(ctx context.Context, params *Error2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Error3 request
	Error3(ctx context.Context, params *Error3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestExecutionsByConfigIds request
	GetLatestExecutionsByConfigIds(ctx context.Context, params *GetLatestExecutionsByConfigIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any9 request
	Any9(ctx context.Context, extension string, params *Any9Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any4 request
	Any4(ctx context.Context, extension string, params *Any4Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any5 request
	Any5(ctx context.Context, extension string, params *Any5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any10 request
	Any10(ctx context.Context, extension string, params *Any10Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any8 request
	Any8(ctx context.Context, extension string, params *Any8Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any6 request
	Any6(ctx context.Context, extension string, params *Any6Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any7 request
	Any7(ctx context.Context, extension string, params *Any7Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All6 request
	All6(ctx context.Context, params *All6Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByAccount1 request
	AllByAccount1(ctx context.Context, account string, params *AllByAccount1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByAccountAndRegion request
	AllByAccountAndRegion(ctx context.Context, account string, region string, params *AllByAccountAndRegionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecurityGroup1 request
	GetSecurityGroup1(ctx context.Context, account string, region string, name string, params *GetSecurityGroup1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Functions request
	Functions(ctx context.Context, params *FunctionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHistory request
	GetHistory(ctx context.Context, name string, params *GetHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindImages request
	FindImages(ctx context.Context, params *FindImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindTags request
	FindTags(ctx context.Context, params *FindTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImageDetails request
	GetImageDetails(ctx context.Context, account string, region string, imageId string, params *GetImageDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceTypes request
	InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceDetails request
	GetInstanceDetails(ctx context.Context, account string, region string, instanceId string, params *GetInstanceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleOutput request
	GetConsoleOutput(ctx context.Context, account string, region string, instanceId string, params *GetConsoleOutputParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreconfiguredWebhooks1 request
	PreconfiguredWebhooks1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyPairs request
	KeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAll request
	GetAll(ctx context.Context, params *GetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoadBalancerDetails request
	GetLoadBalancerDetails(ctx context.Context, account string, region string, name string, params *GetLoadBalancerDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoadBalancer request
	GetLoadBalancer(ctx context.Context, name string, params *GetLoadBalancerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationDetails request
	GetApplicationDetails(ctx context.Context, application string, params *GetApplicationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteManifestByApp request
	DeleteManifestByApp(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigBy request
	GetConfigBy(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConstraintStatusWithBody request with any body
	UpdateConstraintStatusWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConstraintStatus(ctx context.Context, application string, environment string, body UpdateConstraintStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConstraintState request
	GetConstraintState(ctx context.Context, application string, environment string, params *GetConstraintStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkBadWithBody request with any body
	MarkBadWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarkBad(ctx context.Context, application string, body MarkBadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkGoodWithBody request with any body
	MarkGoodWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarkGood(ctx context.Context, application string, body MarkGoodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeApplication request
	ResumeApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseApplication request
	PauseApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePinWithBody request with any body
	CreatePinWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePin(ctx context.Context, application string, body CreatePinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePin request
	DeletePin(ctx context.Context, application string, targetEnvironment string, params *DeletePinParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VetoWithBody request with any body
	VetoWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Veto(ctx context.Context, application string, body VetoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVeto request
	DeleteVeto(ctx context.Context, application string, targetEnvironment string, reference string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertManifestWithBody request with any body
	UpsertManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertManifest(ctx context.Context, body UpsertManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiffManifestWithBody request with any body
	DiffManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DiffManifest(ctx context.Context, body DiffManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Schema request
	Schema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateManifestWithBody request with any body
	ValidateManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateManifest(ctx context.Context, body ValidateManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteManifest request
	DeleteManifest(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetManifest1 request
	GetManifest1(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetManifestYaml request
	GetManifestYaml(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetManifestArtifacts request
	GetManifestArtifacts(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironments request
	GetEnvironments(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlWithBody request with any body
	GraphqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Graphql(ctx context.Context, body GraphqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessNotificationCallback1 request
	ProcessNotificationCallback1(ctx context.Context, source string, params *ProcessNotificationCallback1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdoptionReport request
	GetAdoptionReport(ctx context.Context, params *GetAdoptionReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOnboardingReport request
	GetOnboardingReport(ctx context.Context, params *GetOnboardingReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiffResourceWithBody request with any body
	DiffResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DiffResource(ctx context.Context, body DiffResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportResource1 request
	ExportResource1(ctx context.Context, cloudProvider string, account string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportResource request
	ExportResource(ctx context.Context, cloudProvider string, account string, pType string, name string, params *ExportResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceYaml request
	GetResourceYaml(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeResource request
	ResumeResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseResource request
	PauseResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceStatus request
	GetResourceStatus(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverrideVerificationWithBody request with any body
	OverrideVerificationWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OverrideVerification(ctx context.Context, application string, environment string, body OverrideVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetryVerificationWithBody request with any body
	RetryVerificationWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetryVerification(ctx context.Context, application string, environment string, body RetryVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetManifest request
	GetManifest(ctx context.Context, account string, location string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All5 request
	All5(ctx context.Context, params *All5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByCloudProvider1 request
	AllByCloudProvider1(ctx context.Context, cloudProvider string, params *AllByCloudProvider1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Names request
	Names(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessNotificationCallback request
	ProcessNotificationCallback(ctx context.Context, source string, params *ProcessNotificationCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationTypeMetadata request
	GetNotificationTypeMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline2 request
	DeletePipeline2(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationConfig request
	GetNotificationConfig(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SaveNotificationConfigWithBody request with any body
	SaveNotificationConfigWithBody(ctx context.Context, pType string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SaveNotificationConfig(ctx context.Context, pType string, application string, body SaveNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPipelineConfigs request
	GetAllPipelineConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertPipelineConfigToPipelineTemplate request
	ConvertPipelineConfigToPipelineTemplate(ctx context.Context, pipelineConfigId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineConfigHistory1 request
	GetPipelineConfigHistory1(ctx context.Context, pipelineConfigId string, params *GetPipelineConfigHistory1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List3 request
	List3(ctx context.Context, params *List3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create1WithBody request with any body
	Create1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create1(ctx context.Context, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveTemplates request
	ResolveTemplates(ctx context.Context, params *ResolveTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete2 request
	Delete2(ctx context.Context, id string, params *Delete2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get3 request
	Get3(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update1WithBody request with any body
	Update1WithBody(ctx context.Context, id string, params *Update1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update1(ctx context.Context, id string, params *Update1Params, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineTemplateDependents1 request
	ListPipelineTemplateDependents1(ctx context.Context, id string, params *ListPipelineTemplateDependents1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavePipelineWithBody request with any body
	SavePipelineWithBody(ctx context.Context, params *SavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavePipeline(ctx context.Context, params *SavePipelineParams, body SavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulksavePipelineWithBody request with any body
	BulksavePipelineWithBody(ctx context.Context, params *BulksavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulksavePipeline(ctx context.Context, params *BulksavePipelineParams, body BulksavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenamePipelineWithBody request with any body
	RenamePipelineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RenamePipeline(ctx context.Context, body RenamePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartWithBody request with any body
	StartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Start(ctx context.Context, body StartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvokePipelineConfigViaEchoWithBody request with any body
	InvokePipelineConfigViaEchoWithBody(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvokePipelineConfigViaEcho(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigViaEchoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvokePipelineConfigWithBody request with any body
	InvokePipelineConfigWithBody(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvokePipelineConfig(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline1 request
	DeletePipeline1(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline request
	DeletePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipeline request
	GetPipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineWithBody request with any body
	UpdatePipelineWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePipeline(ctx context.Context, id string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPipeline request
	CancelPipeline(ctx context.Context, id string, params *CancelPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateExpressionForExecution request
	EvaluateExpressionForExecution(ctx context.Context, id string, params *EvaluateExpressionForExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateExpressionForExecutionViaPOST1WithBody request with any body
	EvaluateExpressionForExecutionViaPOST1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateExpressionForExecutionViaPOST1(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateExpressionForExecutionViaPOST1WithTextBody(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1TextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateVariablesWithBody request with any body
	EvaluateVariablesWithBody(ctx context.Context, id string, params *EvaluateVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateVariables(ctx context.Context, id string, params *EvaluateVariablesParams, body EvaluateVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PausePipeline request
	PausePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumePipeline request
	ResumePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStageWithBody request with any body
	UpdateStageWithBody(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStage(ctx context.Context, id string, stageId string, body UpdateStageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartStageWithBody request with any body
	RestartStageWithBody(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestartStage(ctx context.Context, id string, stageId string, body RestartStageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateExpressionForExecutionAtStage request
	EvaluateExpressionForExecutionAtStage(ctx context.Context, id string, stageId string, params *EvaluateExpressionForExecutionAtStageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginManifest request
	GetPluginManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginAsset request
	GetPluginAsset(ctx context.Context, pluginId string, pluginVersion string, asset string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPluginInfo request
	GetAllPluginInfo(ctx context.Context, params *GetAllPluginInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PersistPluginInfoWithBody request with any body
	PersistPluginInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PersistPluginInfo(ctx context.Context, body PersistPluginInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PersistPluginInfo1WithBody request with any body
	PersistPluginInfo1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PersistPluginInfo1(ctx context.Context, body PersistPluginInfo1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePluginInfo request
	DeletePluginInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstalledPlugins request
	GetInstalledPlugins(ctx context.Context, params *GetInstalledPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishPluginWithBody request with any body
	PublishPluginWithBody(ctx context.Context, pluginId string, pluginVersion string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All4 request
	All4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get2 request
	Get2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters request
	GetClusters(ctx context.Context, id string, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllPipelinesForProject request
	AllPipelinesForProject(ctx context.Context, id string, params *AllPipelinesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List2 request
	List2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any3 request
	Any3(ctx context.Context, proxy string, params *Any3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any request
	Any(ctx context.Context, proxy string, params *AnyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any1 request
	Any1(ctx context.Context, proxy string, params *Any1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Any2 request
	Any2(ctx context.Context, proxy string, params *Any2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All3 request
	All3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Api1 request
	Api1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All2 request
	All2(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Search request
	Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All1 request
	All1(ctx context.Context, params *All1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByAccount request
	AllByAccount(ctx context.Context, account string, params *AllByAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecurityGroup request
	GetSecurityGroup(ctx context.Context, account string, region string, name string, params *GetSecurityGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerGroups request
	GetServerGroups(ctx context.Context, params *GetServerGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceInstance request
	GetServiceInstance(ctx context.Context, account string, params *GetServiceInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, account string, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// All request
	All(ctx context.Context, params *AllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SaveStrategyWithBody request with any body
	SaveStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SaveStrategy(ctx context.Context, body SaveStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenameStrategyWithBody request with any body
	RenameStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RenameStrategy(ctx context.Context, body RenameStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStrategy request
	DeleteStrategy(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStrategyWithBody request with any body
	UpdateStrategyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStrategy(ctx context.Context, id string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStrategyConfigs request
	GetAllStrategyConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineConfigHistory request
	GetPipelineConfigHistory(ctx context.Context, strategyConfigId string, params *GetPipelineConfigHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Subnets request
	Subnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllByCloudProvider request
	AllByCloudProvider(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List1 request
	List1(ctx context.Context, params *List1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWithBody request with any body
	PostWithBody(ctx context.Context, params *PostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post(ctx context.Context, params *PostParams, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1 request
	Get1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete1 request
	Delete1(ctx context.Context, id string, tag string, params *Delete1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TaskWithBody request with any body
	TaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Task(ctx context.Context, body TaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelTasks request
	CancelTasks(ctx context.Context, params *CancelTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTask request
	DeleteTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelTask request
	CancelTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskDetails request
	GetTaskDetails(ctx context.Context, id string, taskDetailsId string, params *GetTaskDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Api request
	Api(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AsyncApi request
	AsyncApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData5 request
	GetAdhocData5(ctx context.Context, groupId string, bucketId string, params *GetAdhocData5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData request
	GetAdhocData(ctx context.Context, groupId string, bucketId string, params *GetAdhocDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData1 request
	GetAdhocData1(ctx context.Context, groupId string, bucketId string, params *GetAdhocData1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData6 request
	GetAdhocData6(ctx context.Context, groupId string, bucketId string, params *GetAdhocData6Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData4 request
	GetAdhocData4(ctx context.Context, groupId string, bucketId string, params *GetAdhocData4Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData2 request
	GetAdhocData2(ctx context.Context, groupId string, bucketId string, params *GetAdhocData2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdhocData3 request
	GetAdhocData3(ctx context.Context, groupId string, bucketId string, params *GetAdhocData3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticData request
	GetStaticData(ctx context.Context, id string, params *GetStaticDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuildMasters request
	GetBuildMasters(ctx context.Context, params *GetBuildMastersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuild request
	GetBuild(ctx context.Context, buildMaster string, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuilds request
	GetBuilds(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsForBuildMaster request
	GetJobsForBuildMaster(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobConfig request
	GetJobConfig(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitiateCanaryWithConfigWithBody request with any body
	InitiateCanaryWithConfigWithBody(ctx context.Context, params *InitiateCanaryWithConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InitiateCanaryWithConfig(ctx context.Context, params *InitiateCanaryWithConfigParams, body InitiateCanaryWithConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitiateCanaryWithBody request with any body
	InitiateCanaryWithBody(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InitiateCanary(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, body InitiateCanaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCanaryResult1 request
	GetCanaryResult1(ctx context.Context, canaryConfigId string, canaryExecutionId string, params *GetCanaryResult1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCanaryResult request
	GetCanaryResult(ctx context.Context, canaryExecutionId string, params *GetCanaryResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCredentials request
	ListCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJudges request
	ListJudges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsServiceMetadata request
	ListMetricsServiceMetadata(ctx context.Context, params *ListMetricsServiceMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricSetPairList request
	GetMetricSetPairList(ctx context.Context, metricSetPairListId string, params *GetMetricSetPairListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCanaryResultsByApplication request
	GetCanaryResultsByApplication(ctx context.Context, application string, params *GetCanaryResultsByApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCanaryConfigs request
	GetCanaryConfigs(ctx context.Context, params *GetCanaryConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCanaryConfigWithBody request with any body
	CreateCanaryConfigWithBody(ctx context.Context, params *CreateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCanaryConfig(ctx context.Context, params *CreateCanaryConfigParams, body CreateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCanaryConfig request
	DeleteCanaryConfig(ctx context.Context, id string, params *DeleteCanaryConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCanaryConfig request
	GetCanaryConfig(ctx context.Context, id string, params *GetCanaryConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCanaryConfigWithBody request with any body
	UpdateCanaryConfigWithBody(ctx context.Context, id string, params *UpdateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCanaryConfig(ctx context.Context, id string, params *UpdateCanaryConfigParams, body UpdateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List request
	List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWithBody request with any body
	CreateWithBody(ctx context.Context, params *CreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create(ctx context.Context, params *CreateParams, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanWithBody request with any body
	PlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Plan(ctx context.Context, body PlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWithBody request with any body
	UpdateWithBody(ctx context.Context, id string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, id string, params *UpdateParams, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListVersions request
	ListVersions(ctx context.Context, params *ListVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	Get(ctx context.Context, id string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineTemplateDependents request
	ListPipelineTemplateDependents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V3GetBuildMasters request
	V3GetBuildMasters(ctx context.Context, params *V3GetBuildMastersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V3GetBuild request
	V3GetBuild(ctx context.Context, buildMaster string, number string, params *V3GetBuildParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V3GetBuilds request
	V3GetBuilds(ctx context.Context, buildMaster string, params *V3GetBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V3GetJobConfig request
	V3GetJobConfig(ctx context.Context, buildMaster string, params *V3GetJobConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V3GetJobsForBuildMaster request
	V3GetJobsForBuildMaster(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Vpcs request
	Vpcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Webhooks1WithBody request with any body
	Webhooks1WithBody(ctx context.Context, source string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Webhooks1(ctx context.Context, source string, body Webhooks1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreconfiguredWebhooks request
	PreconfiguredWebhooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Webhooks request
	Webhooks(ctx context.Context, pType string, source string, params *WebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Root5(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot5Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRootRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root6(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot6Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot4Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Root3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoot3Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderPipelinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderPipelinesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderPipelines(ctx context.Context, body ReorderPipelinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderPipelinesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderPipelineStrategiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderPipelineStrategiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderPipelineStrategies(ctx context.Context, body ReorderPipelineStrategiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderPipelineStrategiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllApplications(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJob(ctx context.Context, applicationName string, account string, region string, name string, params *GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobRequest(c.Server, applicationName, account, region, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroupsForApplication(ctx context.Context, applicationName string, params *GetServerGroupsForApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroupsForApplicationRequest(c.Server, applicationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroupDetails(ctx context.Context, applicationName string, account string, region string, serverGroupName string, params *GetServerGroupDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroupDetailsRequest(c.Server, applicationName, account, region, serverGroupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, application string, params *GetApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters1(ctx context.Context, application string, params *GetClusters1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusters1Request(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters2(ctx context.Context, application string, account string, params *GetClusters2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusters2Request(c.Server, application, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters3(ctx context.Context, application string, account string, clusterName string, params *GetClusters3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusters3Request(c.Server, application, account, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroups1(ctx context.Context, application string, account string, clusterName string, params *GetServerGroups1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroups1Request(c.Server, application, account, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroups2(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetServerGroups2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroups2Request(c.Server, application, account, clusterName, serverGroupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScalingActivities(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetScalingActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScalingActivitiesRequest(c.Server, application, account, clusterName, serverGroupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetServerGroup(ctx context.Context, application string, account string, clusterName string, cloudProvider string, scope string, target string, params *GetTargetServerGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetServerGroupRequest(c.Server, application, account, clusterName, cloudProvider, scope, target, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterLoadBalancers(ctx context.Context, application string, account string, clusterName string, pType string, params *GetClusterLoadBalancersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterLoadBalancersRequest(c.Server, application, account, clusterName, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForPipelineExecutionsByTrigger(ctx context.Context, application string, params *SearchForPipelineExecutionsByTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForPipelineExecutionsByTriggerRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationFunctions(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationFunctionsRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationHistory(ctx context.Context, application string, params *GetApplicationHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationHistoryRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationLoadBalancers(ctx context.Context, application string, params *GetApplicationLoadBalancersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationLoadBalancersRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineConfigsForApplication(ctx context.Context, application string, params *GetPipelineConfigsForApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineConfigsForApplicationRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineConfig(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineConfigRequest(c.Server, application, pipelineName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfig1WithBody(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfig1RequestWithBody(c.Server, application, pipelineName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfig1(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, body InvokePipelineConfig1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfig1Request(c.Server, application, pipelineName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelines(ctx context.Context, application string, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelinesRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPipeline1(ctx context.Context, application string, id string, params *CancelPipeline1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPipeline1Request(c.Server, application, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationRawResources(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRawResourcesRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroupManagersForApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroupManagersForApplicationRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, application string, account string, serverGroupName string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, application, account, serverGroupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentSnapshot(ctx context.Context, application string, account string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentSnapshotRequest(c.Server, application, account)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotHistory(ctx context.Context, application string, account string, params *GetSnapshotHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotHistoryRequest(c.Server, application, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStrategyConfigsForApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStrategyConfigsForApplicationRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStrategyConfig(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStrategyConfigRequest(c.Server, application, strategyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, application string, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Task1WithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTask1RequestWithBody(c.Server, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Task1(ctx context.Context, application string, body Task1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTask1Request(c.Server, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask1(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTask1Request(c.Server, application, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelTask1(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelTask1Request(c.Server, application, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskDetails1(ctx context.Context, application string, id string, taskDetailsId string, params *GetTaskDetails1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskDetails1Request(c.Server, application, id, taskDetailsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Names1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNames1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactNames(ctx context.Context, accountName string, params *ArtifactNamesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactNamesRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactVersions(ctx context.Context, accountName string, params *ArtifactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactVersionsRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoredArtifact(ctx context.Context, application string, hash string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoredArtifactRequest(c.Server, application, hash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All11(ctx context.Context, params *All11Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll11Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchWithBody(ctx context.Context, params *FetchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fetch(ctx context.Context, params *FetchParams, body FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersionsOfArtifactForProvider(ctx context.Context, provider string, packageName string, params *GetVersionsOfArtifactForProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionsOfArtifactForProviderRequest(c.Server, provider, packageName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifact(ctx context.Context, provider string, packageName string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactRequest(c.Server, provider, packageName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSessionCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionCacheRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoggedOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoggedOutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RawUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRawUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Redirect(ctx context.Context, params *RedirectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedirectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Sync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) User(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LookupLogs(ctx context.Context, region string, statusId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLookupLogsRequest(c.Server, region, statusId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BakeOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBakeOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BakeOptions1(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBakeOptions1Request(c.Server, cloudProvider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchUpdateWithBody(ctx context.Context, params *BatchUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchUpdate(ctx context.Context, params *BatchUpdateParams, body BatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentMonitors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentMonitorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionCapabilities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpressionCapabilitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQuietPeriodState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQuietPeriodStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All10(ctx context.Context, params *All10Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll10Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByCloudProvider2(ctx context.Context, cloudProvider string, params *AllByCloudProvider2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByCloudProvider2Request(c.Server, cloudProvider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindImages1(ctx context.Context, params *FindImages1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindImages1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindTags1(ctx context.Context, params *FindTags1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindTags1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImageDetails1(ctx context.Context, account string, region string, imageId string, params *GetImageDetails1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImageDetails1Request(c.Server, account, region, imageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuilds1(ctx context.Context, params *GetBuilds1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuilds1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuildOutputById(ctx context.Context, buildId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildOutputByIdRequest(c.Server, buildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllDeletedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllDeletedResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMarkedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMarkedResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarkedResource(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarkedResourceRequest(c.Server, namespace, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptOut(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptOutRequest(c.Server, namespace, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAll(ctx context.Context, cloudProvider string, account string, region string, params *FindAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllRequest(c.Server, cloudProvider, account, region, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatistics(ctx context.Context, cloudProvider string, account string, region string, metricName string, params *GetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticsRequest(c.Server, cloudProvider, account, region, metricName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StageExecution(ctx context.Context, params *StageExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStageExecutionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Teams(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsRequest(c.Server, buildMaster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Pipelines(ctx context.Context, buildMaster string, team string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinesRequest(c.Server, buildMaster, team)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Jobs(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJobsRequest(c.Server, buildMaster, team, pipeline)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Resources(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesRequest(c.Server, buildMaster, team, pipeline)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccount(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsByType(ctx context.Context, accountType string, params *GetAccountsByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsByTypeRequest(c.Server, accountType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, accountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, account string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateCronExpression(ctx context.Context, params *ValidateCronExpressionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateCronExpressionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllMetricAlarms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllMetricAlarmsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEcsClusterDescriptions(ctx context.Context, account string, region string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEcsClusterDescriptionsRequest(c.Server, account, region)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All9(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll9Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All8(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll8Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All7(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll7Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error5(ctx context.Context, params *Error5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError5Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error(ctx context.Context, params *ErrorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewErrorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error1(ctx context.Context, params *Error1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error6(ctx context.Context, params *Error6Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError6Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error4(ctx context.Context, params *Error4Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError4Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error2(ctx context.Context, params *Error2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Error3(ctx context.Context, params *Error3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewError3Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestExecutionsByConfigIds(ctx context.Context, params *GetLatestExecutionsByConfigIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestExecutionsByConfigIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any9(ctx context.Context, extension string, params *Any9Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny9Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any4(ctx context.Context, extension string, params *Any4Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny4Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any5(ctx context.Context, extension string, params *Any5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny5Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any10(ctx context.Context, extension string, params *Any10Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny10Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any8(ctx context.Context, extension string, params *Any8Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny8Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any6(ctx context.Context, extension string, params *Any6Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny6Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any7(ctx context.Context, extension string, params *Any7Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny7Request(c.Server, extension, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All6(ctx context.Context, params *All6Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll6Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByAccount1(ctx context.Context, account string, params *AllByAccount1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByAccount1Request(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByAccountAndRegion(ctx context.Context, account string, region string, params *AllByAccountAndRegionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByAccountAndRegionRequest(c.Server, account, region, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecurityGroup1(ctx context.Context, account string, region string, name string, params *GetSecurityGroup1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecurityGroup1Request(c.Server, account, region, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Functions(ctx context.Context, params *FunctionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFunctionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHistory(ctx context.Context, name string, params *GetHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoryRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindImages(ctx context.Context, params *FindImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindImagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindTags(ctx context.Context, params *FindTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImageDetails(ctx context.Context, account string, region string, imageId string, params *GetImageDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImageDetailsRequest(c.Server, account, region, imageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceDetails(ctx context.Context, account string, region string, instanceId string, params *GetInstanceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceDetailsRequest(c.Server, account, region, instanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleOutput(ctx context.Context, account string, region string, instanceId string, params *GetConsoleOutputParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleOutputRequest(c.Server, account, region, instanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreconfiguredWebhooks1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreconfiguredWebhooks1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyPairsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAll(ctx context.Context, params *GetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoadBalancerDetails(ctx context.Context, account string, region string, name string, params *GetLoadBalancerDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoadBalancerDetailsRequest(c.Server, account, region, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoadBalancer(ctx context.Context, name string, params *GetLoadBalancerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoadBalancerRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationDetails(ctx context.Context, application string, params *GetApplicationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationDetailsRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteManifestByApp(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteManifestByAppRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigBy(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigByRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConstraintStatusWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConstraintStatusRequestWithBody(c.Server, application, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConstraintStatus(ctx context.Context, application string, environment string, body UpdateConstraintStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConstraintStatusRequest(c.Server, application, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConstraintState(ctx context.Context, application string, environment string, params *GetConstraintStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConstraintStateRequest(c.Server, application, environment, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkBadWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkBadRequestWithBody(c.Server, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkBad(ctx context.Context, application string, body MarkBadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkBadRequest(c.Server, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkGoodWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkGoodRequestWithBody(c.Server, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkGood(ctx context.Context, application string, body MarkGoodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkGoodRequest(c.Server, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeApplicationRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseApplication(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseApplicationRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePinWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePinRequestWithBody(c.Server, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePin(ctx context.Context, application string, body CreatePinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePinRequest(c.Server, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePin(ctx context.Context, application string, targetEnvironment string, params *DeletePinParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePinRequest(c.Server, application, targetEnvironment, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VetoWithBody(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVetoRequestWithBody(c.Server, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Veto(ctx context.Context, application string, body VetoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVetoRequest(c.Server, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVeto(ctx context.Context, application string, targetEnvironment string, reference string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVetoRequest(c.Server, application, targetEnvironment, reference, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertManifestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertManifest(ctx context.Context, body UpsertManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertManifestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffManifestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffManifest(ctx context.Context, body DiffManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffManifestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Schema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateManifestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateManifestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateManifest(ctx context.Context, body ValidateManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateManifestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteManifest(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteManifestRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetManifest1(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetManifest1Request(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetManifestYaml(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetManifestYamlRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetManifestArtifacts(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetManifestArtifactsRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironments(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Graphql(ctx context.Context, body GraphqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessNotificationCallback1(ctx context.Context, source string, params *ProcessNotificationCallback1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessNotificationCallback1Request(c.Server, source, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdoptionReport(ctx context.Context, params *GetAdoptionReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdoptionReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOnboardingReport(ctx context.Context, params *GetOnboardingReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOnboardingReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffResource(ctx context.Context, body DiffResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportResource1(ctx context.Context, cloudProvider string, account string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportResource1Request(c.Server, cloudProvider, account, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportResource(ctx context.Context, cloudProvider string, account string, pType string, name string, params *ExportResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportResourceRequest(c.Server, cloudProvider, account, pType, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceYaml(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceYamlRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeResourceRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseResourceRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceStatus(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceStatusRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverrideVerificationWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverrideVerificationRequestWithBody(c.Server, application, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverrideVerification(ctx context.Context, application string, environment string, body OverrideVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverrideVerificationRequest(c.Server, application, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetryVerificationWithBody(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetryVerificationRequestWithBody(c.Server, application, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetryVerification(ctx context.Context, application string, environment string, body RetryVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetryVerificationRequest(c.Server, application, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetManifest(ctx context.Context, account string, location string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetManifestRequest(c.Server, account, location, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All5(ctx context.Context, params *All5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll5Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByCloudProvider1(ctx context.Context, cloudProvider string, params *AllByCloudProvider1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByCloudProvider1Request(c.Server, cloudProvider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Names(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessNotificationCallback(ctx context.Context, source string, params *ProcessNotificationCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessNotificationCallbackRequest(c.Server, source, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationTypeMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationTypeMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline2(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipeline2Request(c.Server, pType, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationConfig(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationConfigRequest(c.Server, pType, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveNotificationConfigWithBody(ctx context.Context, pType string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveNotificationConfigRequestWithBody(c.Server, pType, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveNotificationConfig(ctx context.Context, pType string, application string, body SaveNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveNotificationConfigRequest(c.Server, pType, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPipelineConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPipelineConfigsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertPipelineConfigToPipelineTemplate(ctx context.Context, pipelineConfigId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertPipelineConfigToPipelineTemplateRequest(c.Server, pipelineConfigId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineConfigHistory1(ctx context.Context, pipelineConfigId string, params *GetPipelineConfigHistory1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineConfigHistory1Request(c.Server, pipelineConfigId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List3(ctx context.Context, params *List3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList3Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create1(ctx context.Context, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveTemplates(ctx context.Context, params *ResolveTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete2(ctx context.Context, id string, params *Delete2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete2Request(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get3(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update1WithBody(ctx context.Context, id string, params *Update1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate1RequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update1(ctx context.Context, id string, params *Update1Params, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate1Request(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineTemplateDependents1(ctx context.Context, id string, params *ListPipelineTemplateDependents1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineTemplateDependents1Request(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavePipelineWithBody(ctx context.Context, params *SavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavePipelineRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavePipeline(ctx context.Context, params *SavePipelineParams, body SavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavePipelineRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulksavePipelineWithBody(ctx context.Context, params *BulksavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulksavePipelineRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulksavePipeline(ctx context.Context, params *BulksavePipelineParams, body BulksavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulksavePipelineRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenamePipelineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenamePipelineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenamePipeline(ctx context.Context, body RenamePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenamePipelineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Start(ctx context.Context, body StartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfigViaEchoWithBody(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfigViaEchoRequestWithBody(c.Server, application, pipelineNameOrId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfigViaEcho(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigViaEchoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfigViaEchoRequest(c.Server, application, pipelineNameOrId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfigWithBody(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfigRequestWithBody(c.Server, application, pipelineNameOrId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvokePipelineConfig(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokePipelineConfigRequest(c.Server, application, pipelineNameOrId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline1(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipeline1Request(c.Server, application, pipelineName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipeline(ctx context.Context, id string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPipeline(ctx context.Context, id string, params *CancelPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPipelineRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateExpressionForExecution(ctx context.Context, id string, params *EvaluateExpressionForExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateExpressionForExecutionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateExpressionForExecutionViaPOST1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateExpressionForExecutionViaPOST1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateExpressionForExecutionViaPOST1(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateExpressionForExecutionViaPOST1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateExpressionForExecutionViaPOST1WithTextBody(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1TextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateExpressionForExecutionViaPOST1RequestWithTextBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateVariablesWithBody(ctx context.Context, id string, params *EvaluateVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateVariablesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateVariables(ctx context.Context, id string, params *EvaluateVariablesParams, body EvaluateVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateVariablesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PausePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPausePipelineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumePipeline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumePipelineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStageWithBody(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStageRequestWithBody(c.Server, id, stageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStage(ctx context.Context, id string, stageId string, body UpdateStageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStageRequest(c.Server, id, stageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartStageWithBody(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartStageRequestWithBody(c.Server, id, stageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartStage(ctx context.Context, id string, stageId string, body RestartStageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartStageRequest(c.Server, id, stageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateExpressionForExecutionAtStage(ctx context.Context, id string, stageId string, params *EvaluateExpressionForExecutionAtStageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateExpressionForExecutionAtStageRequest(c.Server, id, stageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginManifestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginAsset(ctx context.Context, pluginId string, pluginVersion string, asset string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginAssetRequest(c.Server, pluginId, pluginVersion, asset)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPluginInfo(ctx context.Context, params *GetAllPluginInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPluginInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PersistPluginInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPersistPluginInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PersistPluginInfo(ctx context.Context, body PersistPluginInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPersistPluginInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PersistPluginInfo1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPersistPluginInfo1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PersistPluginInfo1(ctx context.Context, body PersistPluginInfo1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPersistPluginInfo1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePluginInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePluginInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstalledPlugins(ctx context.Context, params *GetInstalledPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstalledPluginsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishPluginWithBody(ctx context.Context, pluginId string, pluginVersion string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishPluginRequestWithBody(c.Server, pluginId, pluginVersion, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll4Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters(ctx context.Context, id string, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllPipelinesForProject(ctx context.Context, id string, params *AllPipelinesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllPipelinesForProjectRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any3(ctx context.Context, proxy string, params *Any3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny3Request(c.Server, proxy, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any(ctx context.Context, proxy string, params *AnyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyRequest(c.Server, proxy, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any1(ctx context.Context, proxy string, params *Any1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny1Request(c.Server, proxy, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Any2(ctx context.Context, proxy string, params *Any2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAny2Request(c.Server, proxy, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll3Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Api1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApi1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All2(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll2Request(c.Server, cloudProvider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All1(ctx context.Context, params *All1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAll1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByAccount(ctx context.Context, account string, params *AllByAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByAccountRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecurityGroup(ctx context.Context, account string, region string, name string, params *GetSecurityGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecurityGroupRequest(c.Server, account, region, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerGroups(ctx context.Context, params *GetServerGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceInstance(ctx context.Context, account string, params *GetServiceInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceInstanceRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, account string, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) All(ctx context.Context, params *AllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveStrategyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveStrategy(ctx context.Context, body SaveStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveStrategyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenameStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenameStrategyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenameStrategy(ctx context.Context, body RenameStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenameStrategyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStrategy(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStrategyRequest(c.Server, application, strategyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStrategyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStrategyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStrategy(ctx context.Context, id string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStrategyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStrategyConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStrategyConfigsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineConfigHistory(ctx context.Context, strategyConfigId string, params *GetPipelineConfigHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineConfigHistoryRequest(c.Server, strategyConfigId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Subnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubnetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllByCloudProvider(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllByCloudProviderRequest(c.Server, cloudProvider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List1(ctx context.Context, params *List1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWithBody(ctx context.Context, params *PostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post(ctx context.Context, params *PostParams, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete1(ctx context.Context, id string, tag string, params *Delete1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete1Request(c.Server, id, tag, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Task(ctx context.Context, body TaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelTasks(ctx context.Context, params *CancelTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskDetails(ctx context.Context, id string, taskDetailsId string, params *GetTaskDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskDetailsRequest(c.Server, id, taskDetailsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Api(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AsyncApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAsyncApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData5(ctx context.Context, groupId string, bucketId string, params *GetAdhocData5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData5Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData(ctx context.Context, groupId string, bucketId string, params *GetAdhocDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocDataRequest(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData1(ctx context.Context, groupId string, bucketId string, params *GetAdhocData1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData1Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData6(ctx context.Context, groupId string, bucketId string, params *GetAdhocData6Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData6Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData4(ctx context.Context, groupId string, bucketId string, params *GetAdhocData4Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData4Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData2(ctx context.Context, groupId string, bucketId string, params *GetAdhocData2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData2Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdhocData3(ctx context.Context, groupId string, bucketId string, params *GetAdhocData3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdhocData3Request(c.Server, groupId, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticData(ctx context.Context, id string, params *GetStaticDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticDataRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuildMasters(ctx context.Context, params *GetBuildMastersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildMastersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuild(ctx context.Context, buildMaster string, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildRequest(c.Server, buildMaster, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuilds(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildsRequest(c.Server, buildMaster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsForBuildMaster(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsForBuildMasterRequest(c.Server, buildMaster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobConfig(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobConfigRequest(c.Server, buildMaster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitiateCanaryWithConfigWithBody(ctx context.Context, params *InitiateCanaryWithConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitiateCanaryWithConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitiateCanaryWithConfig(ctx context.Context, params *InitiateCanaryWithConfigParams, body InitiateCanaryWithConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitiateCanaryWithConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitiateCanaryWithBody(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitiateCanaryRequestWithBody(c.Server, canaryConfigId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitiateCanary(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, body InitiateCanaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitiateCanaryRequest(c.Server, canaryConfigId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCanaryResult1(ctx context.Context, canaryConfigId string, canaryExecutionId string, params *GetCanaryResult1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCanaryResult1Request(c.Server, canaryConfigId, canaryExecutionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCanaryResult(ctx context.Context, canaryExecutionId string, params *GetCanaryResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCanaryResultRequest(c.Server, canaryExecutionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJudges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJudgesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsServiceMetadata(ctx context.Context, params *ListMetricsServiceMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsServiceMetadataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricSetPairList(ctx context.Context, metricSetPairListId string, params *GetMetricSetPairListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricSetPairListRequest(c.Server, metricSetPairListId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCanaryResultsByApplication(ctx context.Context, application string, params *GetCanaryResultsByApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCanaryResultsByApplicationRequest(c.Server, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCanaryConfigs(ctx context.Context, params *GetCanaryConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCanaryConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCanaryConfigWithBody(ctx context.Context, params *CreateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCanaryConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCanaryConfig(ctx context.Context, params *CreateCanaryConfigParams, body CreateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCanaryConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCanaryConfig(ctx context.Context, id string, params *DeleteCanaryConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCanaryConfigRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCanaryConfig(ctx context.Context, id string, params *GetCanaryConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCanaryConfigRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCanaryConfigWithBody(ctx context.Context, id string, params *UpdateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCanaryConfigRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCanaryConfig(ctx context.Context, id string, params *UpdateCanaryConfigParams, body UpdateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCanaryConfigRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithBody(ctx context.Context, params *CreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, params *CreateParams, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Plan(ctx context.Context, body PlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, id string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, id string, params *UpdateParams, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListVersions(ctx context.Context, params *ListVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListVersionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get(ctx context.Context, id string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineTemplateDependents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineTemplateDependentsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V3GetBuildMasters(ctx context.Context, params *V3GetBuildMastersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV3GetBuildMastersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V3GetBuild(ctx context.Context, buildMaster string, number string, params *V3GetBuildParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV3GetBuildRequest(c.Server, buildMaster, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V3GetBuilds(ctx context.Context, buildMaster string, params *V3GetBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV3GetBuildsRequest(c.Server, buildMaster, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V3GetJobConfig(ctx context.Context, buildMaster string, params *V3GetJobConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV3GetJobConfigRequest(c.Server, buildMaster, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V3GetJobsForBuildMaster(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV3GetJobsForBuildMasterRequest(c.Server, buildMaster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Vpcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVpcsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Webhooks1WithBody(ctx context.Context, source string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebhooks1RequestWithBody(c.Server, source, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Webhooks1(ctx context.Context, source string, body Webhooks1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebhooks1Request(c.Server, source, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreconfiguredWebhooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreconfiguredWebhooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Webhooks(ctx context.Context, pType string, source string, params *WebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebhooksRequest(c.Server, pType, source, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRoot5Request generates requests for Root5
func NewRoot5Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRootRequest generates requests for Root
func NewRootRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoot1Request generates requests for Root1
func NewRoot1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoot6Request generates requests for Root6
func NewRoot6Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoot4Request generates requests for Root4
func NewRoot4Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoot2Request generates requests for Root2
func NewRoot2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoot3Request generates requests for Root3
func NewRoot3Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReorderPipelinesRequest calls the generic ReorderPipelines builder with application/json body
func NewReorderPipelinesRequest(server string, body ReorderPipelinesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReorderPipelinesRequestWithBody(server, "application/json", bodyReader)
}

// NewReorderPipelinesRequestWithBody generates requests for ReorderPipelines with any type of body
func NewReorderPipelinesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/actions/pipelines/reorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReorderPipelineStrategiesRequest calls the generic ReorderPipelineStrategies builder with application/json body
func NewReorderPipelineStrategiesRequest(server string, body ReorderPipelineStrategiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReorderPipelineStrategiesRequestWithBody(server, "application/json", bodyReader)
}

// NewReorderPipelineStrategiesRequestWithBody generates requests for ReorderPipelineStrategies with any type of body
func NewReorderPipelineStrategiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/actions/strategies/reorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllApplicationsRequest generates requests for GetAllApplications
func NewGetAllApplicationsRequest(server string, params *GetAllApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, applicationName string, account string, region string, name string, params *GetJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/jobs/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServerGroupsForApplicationRequest generates requests for GetServerGroupsForApplication
func NewGetServerGroupsForApplicationRequest(server string, applicationName string, params *GetServerGroupsForApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/serverGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CloudProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, *params.CloudProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Clusters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusters", runtime.ParamLocationQuery, *params.Clusters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServerGroupDetailsRequest generates requests for GetServerGroupDetails
func NewGetServerGroupDetailsRequest(server string, applicationName string, account string, region string, serverGroupName string, params *GetServerGroupDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationName", runtime.ParamLocationPath, applicationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "serverGroupName", runtime.ParamLocationPath, serverGroupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/serverGroups/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, application string, params *GetApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusters1Request generates requests for GetClusters1
func NewGetClusters1Request(server string, application string, params *GetClusters1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetClusters2Request generates requests for GetClusters2
func NewGetClusters2Request(server string, application string, account string, params *GetClusters2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetClusters3Request generates requests for GetClusters3
func NewGetClusters3Request(server string, application string, account string, clusterName string, params *GetClusters3Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServerGroups1Request generates requests for GetServerGroups1
func NewGetServerGroups1Request(server string, application string, account string, clusterName string, params *GetServerGroups1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s/serverGroups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServerGroups2Request generates requests for GetServerGroups2
func NewGetServerGroups2Request(server string, application string, account string, clusterName string, serverGroupName string, params *GetServerGroups2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "serverGroupName", runtime.ParamLocationPath, serverGroupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s/serverGroups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetScalingActivitiesRequest generates requests for GetScalingActivities
func NewGetScalingActivitiesRequest(server string, application string, account string, clusterName string, serverGroupName string, params *GetScalingActivitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "serverGroupName", runtime.ParamLocationPath, serverGroupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s/serverGroups/%s/scalingActivities", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetTargetServerGroupRequest generates requests for GetTargetServerGroup
func NewGetTargetServerGroupRequest(server string, application string, account string, clusterName string, cloudProvider string, scope string, target string, params *GetTargetServerGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "target", runtime.ParamLocationPath, target)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s/%s/%s/serverGroups/target/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OnlyEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyEnabled", runtime.ParamLocationQuery, *params.OnlyEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValidateOldest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validateOldest", runtime.ParamLocationQuery, *params.ValidateOldest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetClusterLoadBalancersRequest generates requests for GetClusterLoadBalancers
func NewGetClusterLoadBalancersRequest(server string, application string, account string, clusterName string, pType string, params *GetClusterLoadBalancersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/clusters/%s/%s/%s/loadBalancers", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewSearchForPipelineExecutionsByTriggerRequest generates requests for SearchForPipelineExecutionsByTrigger
func NewSearchForPipelineExecutionsByTriggerRequest(server string, application string, params *SearchForPipelineExecutionsByTriggerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/executions/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TriggerTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "triggerTypes", runtime.ParamLocationQuery, *params.TriggerTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PipelineName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineName", runtime.ParamLocationQuery, *params.PipelineName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventId", runtime.ParamLocationQuery, *params.EventId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trigger != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger", runtime.ParamLocationQuery, *params.Trigger); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TriggerTimeStartBoundary != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "triggerTimeStartBoundary", runtime.ParamLocationQuery, *params.TriggerTimeStartBoundary); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TriggerTimeEndBoundary != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "triggerTimeEndBoundary", runtime.ParamLocationQuery, *params.TriggerTimeEndBoundary); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationFunctionsRequest generates requests for ApplicationFunctions
func NewApplicationFunctionsRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/functions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationHistoryRequest generates requests for GetApplicationHistory
func NewGetApplicationHistoryRequest(server string, application string, params *GetApplicationHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationLoadBalancersRequest generates requests for GetApplicationLoadBalancers
func NewGetApplicationLoadBalancersRequest(server string, application string, params *GetApplicationLoadBalancersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/loadBalancers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetPipelineConfigsForApplicationRequest generates requests for GetPipelineConfigsForApplication
func NewGetPipelineConfigsForApplicationRequest(server string, application string, params *GetPipelineConfigsForApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/pipelineConfigs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PipelineNameFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineNameFilter", runtime.ParamLocationQuery, *params.PipelineNameFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineConfigRequest generates requests for GetPipelineConfig
func NewGetPipelineConfigRequest(server string, application string, pipelineName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineName", runtime.ParamLocationPath, pipelineName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/pipelineConfigs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvokePipelineConfig1Request calls the generic InvokePipelineConfig1 builder with application/json body
func NewInvokePipelineConfig1Request(server string, application string, pipelineName string, params *InvokePipelineConfig1Params, body InvokePipelineConfig1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvokePipelineConfig1RequestWithBody(server, application, pipelineName, params, "application/json", bodyReader)
}

// NewInvokePipelineConfig1RequestWithBody generates requests for InvokePipelineConfig1 with any type of body
func NewInvokePipelineConfig1RequestWithBody(server string, application string, pipelineName string, params *InvokePipelineConfig1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineName", runtime.ParamLocationPath, pipelineName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/pipelineConfigs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPipelinesRequest generates requests for GetPipelines
func NewGetPipelinesRequest(server string, application string, params *GetPipelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPipeline1Request generates requests for CancelPipeline1
func NewCancelPipeline1Request(server string, application string, id string, params *CancelPipeline1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/pipelines/%s/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRawResourcesRequest generates requests for GetApplicationRawResources
func NewGetApplicationRawResourcesRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/rawResources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerGroupManagersForApplicationRequest generates requests for GetServerGroupManagersForApplication
func NewGetServerGroupManagersForApplicationRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/serverGroupManagers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, application string, account string, serverGroupName string, params *GetEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serverGroupName", runtime.ParamLocationPath, serverGroupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/serverGroups/%s/%s/events", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentSnapshotRequest generates requests for GetCurrentSnapshot
func NewGetCurrentSnapshotRequest(server string, application string, account string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/snapshots/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnapshotHistoryRequest generates requests for GetSnapshotHistory
func NewGetSnapshotHistoryRequest(server string, application string, account string, params *GetSnapshotHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/snapshots/%s/history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStrategyConfigsForApplicationRequest generates requests for GetStrategyConfigsForApplication
func NewGetStrategyConfigsForApplicationRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/strategyConfigs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStrategyConfigRequest generates requests for GetStrategyConfig
func NewGetStrategyConfigRequest(server string, application string, strategyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "strategyName", runtime.ParamLocationPath, strategyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/strategyConfigs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, application string, params *GetTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTask1Request calls the generic Task1 builder with application/json body
func NewTask1Request(server string, application string, body Task1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTask1RequestWithBody(server, application, "application/json", bodyReader)
}

// NewTask1RequestWithBody generates requests for Task1 with any type of body
func NewTask1RequestWithBody(server string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTask1Request generates requests for GetTask1
func NewGetTask1Request(server string, application string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelTask1Request generates requests for CancelTask1
func NewCancelTask1Request(server string, application string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/tasks/%s/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskDetails1Request generates requests for GetTaskDetails1
func NewGetTaskDetails1Request(server string, application string, id string, taskDetailsId string, params *GetTaskDetails1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "taskDetailsId", runtime.ParamLocationPath, taskDetailsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/tasks/%s/details/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewNames1Request generates requests for Names1
func NewNames1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifactory/names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArtifactNamesRequest generates requests for ArtifactNames
func NewArtifactNamesRequest(server string, accountName string, params *ArtifactNamesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountName", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/account/%s/names", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewArtifactVersionsRequest generates requests for ArtifactVersions
func NewArtifactVersionsRequest(server string, accountName string, params *ArtifactVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountName", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/account/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artifactName", runtime.ParamLocationQuery, params.ArtifactName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetStoredArtifactRequest generates requests for GetStoredArtifact
func NewGetStoredArtifactRequest(server string, application string, hash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hash", runtime.ParamLocationPath, hash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/content-address/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll11Request generates requests for All11
func NewAll11Request(server string, params *All11Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewFetchRequest calls the generic Fetch builder with application/json body
func NewFetchRequest(server string, params *FetchParams, body FetchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFetchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFetchRequestWithBody generates requests for Fetch with any type of body
func NewFetchRequestWithBody(server string, params *FetchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/fetch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetVersionsOfArtifactForProviderRequest generates requests for GetVersionsOfArtifactForProvider
func NewGetVersionsOfArtifactForProviderRequest(server string, provider string, packageName string, params *GetVersionsOfArtifactForProviderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "packageName", runtime.ParamLocationPath, packageName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReleaseStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "releaseStatus", runtime.ParamLocationQuery, *params.ReleaseStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactRequest generates requests for GetArtifact
func NewGetArtifactRequest(server string, provider string, packageName string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "packageName", runtime.ParamLocationPath, packageName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artifacts/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSessionCacheRequest generates requests for DeleteSessionCache
func NewDeleteSessionCacheRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/deleteSessionCache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoggedOutRequest generates requests for LoggedOut
func NewLoggedOutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/loggedOut")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRawUserRequest generates requests for RawUser
func NewRawUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/rawUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRedirectRequest generates requests for Redirect
func NewRedirectRequest(server string, params *RedirectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/redirect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyncRequest generates requests for Sync
func NewSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserRequest generates requests for User
func NewUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLookupLogsRequest generates requests for LookupLogs
func NewLookupLogsRequest(server string, region string, statusId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "statusId", runtime.ParamLocationPath, statusId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bakery/logs/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBakeOptionsRequest generates requests for BakeOptions
func NewBakeOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bakery/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBakeOptions1Request generates requests for BakeOptions1
func NewBakeOptions1Request(server string, cloudProvider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bakery/options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchUpdateRequest calls the generic BatchUpdate builder with application/json body
func NewBatchUpdateRequest(server string, params *BatchUpdateParams, body BatchUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBatchUpdateRequestWithBody generates requests for BatchUpdate with any type of body
func NewBatchUpdateRequestWithBody(server string, params *BatchUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeploymentMonitorsRequest generates requests for GetDeploymentMonitors
func NewGetDeploymentMonitorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/deploymentMonitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionCapabilitiesRequest generates requests for GetExpressionCapabilities
func NewGetExpressionCapabilitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/expressions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQuietPeriodStateRequest generates requests for GetQuietPeriodState
func NewGetQuietPeriodStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/quietPeriod")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll10Request generates requests for All10
func NewAll10Request(server string, params *All10Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllByCloudProvider2Request generates requests for AllByCloudProvider2
func NewAllByCloudProvider2Request(server string, cloudProvider string, params *AllByCloudProvider2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewFindImages1Request generates requests for FindImages1
func NewFindImages1Request(server string, params *FindImages1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charts/find")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindTags1Request generates requests for FindTags1
func NewFindTags1Request(server string, params *FindTags1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charts/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, params.Account); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository", runtime.ParamLocationQuery, params.Repository); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetImageDetails1Request generates requests for GetImageDetails1
func NewGetImageDetails1Request(server string, account string, region string, imageId string, params *GetImageDetails1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charts/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetBuilds1Request generates requests for GetBuilds1
func NewGetBuilds1Request(server string, params *GetBuilds1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ci/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepoSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repoSlug", runtime.ParamLocationQuery, *params.RepoSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompletionStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completionStatus", runtime.ParamLocationQuery, *params.CompletionStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buildNumber", runtime.ParamLocationQuery, *params.BuildNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommitId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitId", runtime.ParamLocationQuery, *params.CommitId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildOutputByIdRequest generates requests for GetBuildOutputById
func NewGetBuildOutputByIdRequest(server string, buildId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildId", runtime.ParamLocationPath, buildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ci/builds/%s/output", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllDeletedResourcesRequest generates requests for GetAllDeletedResources
func NewGetAllDeletedResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cleanup/resources/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMarkedResourcesRequest generates requests for GetAllMarkedResources
func NewGetAllMarkedResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cleanup/resources/marked")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarkedResourceRequest generates requests for GetMarkedResource
func NewGetMarkedResourceRequest(server string, namespace string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cleanup/resources/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptOutRequest generates requests for OptOut
func NewOptOutRequest(server string, namespace string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cleanup/resources/%s/%s/optOut", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAllRequest generates requests for FindAll
func NewFindAllRequest(server string, cloudProvider string, account string, region string, params *FindAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudMetrics/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, params.Filters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetStatisticsRequest generates requests for GetStatistics
func NewGetStatisticsRequest(server string, cloudProvider string, account string, region string, metricName string, params *GetStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "metricName", runtime.ParamLocationPath, metricName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudMetrics/%s/%s/%s/%s/statistics", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, params.Filters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewStageExecutionRequest generates requests for StageExecution
func NewStageExecutionRequest(server string, params *StageExecutionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concourse/stage/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stageId", runtime.ParamLocationQuery, params.StageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job", runtime.ParamLocationQuery, params.Job); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buildNumber", runtime.ParamLocationQuery, params.BuildNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsRequest generates requests for Teams
func NewTeamsRequest(server string, buildMaster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concourse/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPipelinesRequest generates requests for Pipelines
func NewPipelinesRequest(server string, buildMaster string, team string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concourse/%s/teams/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJobsRequest generates requests for Jobs
func NewJobsRequest(server string, buildMaster string, team string, pipeline string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline", runtime.ParamLocationPath, pipeline)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concourse/%s/teams/%s/pipelines/%s/jobs", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesRequest generates requests for Resources
func NewResourcesRequest(server string, buildMaster string, team string, pipeline string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline", runtime.ParamLocationPath, pipeline)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concourse/%s/teams/%s/pipelines/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string, params *GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAccountRequest calls the generic UpdateAccount builder with application/json body
func NewUpdateAccountRequest(server string, body UpdateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAccountRequestWithBody generates requests for UpdateAccount with any type of body
func NewUpdateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsByTypeRequest generates requests for GetAccountsByType
func NewGetAccountsByTypeRequest(server string, accountType string, params *GetAccountsByTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountType", runtime.ParamLocationPath, accountType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartingAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startingAccountName", runtime.ParamLocationQuery, *params.StartingAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string, accountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountName", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, account string, params *GetAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewValidateCronExpressionRequest generates requests for ValidateCronExpression
func NewValidateCronExpressionRequest(server string, params *ValidateCronExpressionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cron/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expression", runtime.ParamLocationQuery, params.Expression); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllMetricAlarmsRequest generates requests for AllMetricAlarms
func NewAllMetricAlarmsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecs/cloudMetrics/alarms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEcsClusterDescriptionsRequest generates requests for GetEcsClusterDescriptions
func NewGetEcsClusterDescriptionsRequest(server string, account string, region string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecs/ecsClusterDescriptions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll9Request generates requests for All9
func NewAll9Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecs/ecsClusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll8Request generates requests for All8
func NewAll8Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecs/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll7Request generates requests for All7
func NewAll7Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecs/serviceDiscoveryRegistries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError5Request generates requests for Error5
func NewError5Request(server string, params *Error5Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewErrorRequest generates requests for Error
func NewErrorRequest(server string, params *ErrorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError1Request generates requests for Error1
func NewError1Request(server string, params *Error1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError6Request generates requests for Error6
func NewError6Request(server string, params *Error6Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError4Request generates requests for Error4
func NewError4Request(server string, params *Error4Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError2Request generates requests for Error2
func NewError2Request(server string, params *Error2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewError3Request generates requests for Error3
func NewError3Request(server string, params *Error3Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Trace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trace", runtime.ParamLocationQuery, *params.Trace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestExecutionsByConfigIdsRequest generates requests for GetLatestExecutionsByConfigIds
func NewGetLatestExecutionsByConfigIdsRequest(server string, params *GetLatestExecutionsByConfigIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/executions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PipelineConfigIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineConfigIds", runtime.ParamLocationQuery, *params.PipelineConfigIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExecutionIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "executionIds", runtime.ParamLocationQuery, *params.ExecutionIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny9Request generates requests for Any9
func NewAny9Request(server string, extension string, params *Any9Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny4Request generates requests for Any4
func NewAny4Request(server string, extension string, params *Any4Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny5Request generates requests for Any5
func NewAny5Request(server string, extension string, params *Any5Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny10Request generates requests for Any10
func NewAny10Request(server string, extension string, params *Any10Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny8Request generates requests for Any8
func NewAny8Request(server string, extension string, params *Any8Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny6Request generates requests for Any6
func NewAny6Request(server string, extension string, params *Any6Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny7Request generates requests for Any7
func NewAny7Request(server string, extension string, params *Any7Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension", runtime.ParamLocationPath, extension)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, *params.RequestParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll6Request generates requests for All6
func NewAll6Request(server string, params *All6Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/firewalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllByAccount1Request generates requests for AllByAccount1
func NewAllByAccount1Request(server string, account string, params *AllByAccount1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/firewalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllByAccountAndRegionRequest generates requests for AllByAccountAndRegion
func NewAllByAccountAndRegionRequest(server string, account string, region string, params *AllByAccountAndRegionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/firewalls/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetSecurityGroup1Request generates requests for GetSecurityGroup1
func NewGetSecurityGroup1Request(server string, account string, region string, name string, params *GetSecurityGroup1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/firewalls/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VpcId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpcId", runtime.ParamLocationQuery, *params.VpcId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewFunctionsRequest generates requests for Functions
func NewFunctionsRequest(server string, params *FunctionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FunctionName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "functionName", runtime.ParamLocationQuery, *params.FunctionName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHistoryRequest generates requests for GetHistory
func NewGetHistoryRequest(server string, name string, params *GetHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/history/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindImagesRequest generates requests for FindImages
func NewFindImagesRequest(server string, params *FindImagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/find")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindTagsRequest generates requests for FindTags
func NewFindTagsRequest(server string, params *FindTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, params.Account); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository", runtime.ParamLocationQuery, params.Repository); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetImageDetailsRequest generates requests for GetImageDetails
func NewGetImageDetailsRequest(server string, account string, region string, imageId string, params *GetImageDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewInstanceTypesRequest generates requests for InstanceTypes
func NewInstanceTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instanceTypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceDetailsRequest generates requests for GetInstanceDetails
func NewGetInstanceDetailsRequest(server string, account string, region string, instanceId string, params *GetInstanceDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleOutputRequest generates requests for GetConsoleOutput
func NewGetConsoleOutputRequest(server string, account string, region string, instanceId string, params *GetConsoleOutputParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/%s/%s/console", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewPreconfiguredWebhooks1Request generates requests for PreconfiguredWebhooks1
func NewPreconfiguredWebhooks1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/preconfigured")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyPairsRequest generates requests for KeyPairs
func NewKeyPairsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllRequest generates requests for GetAll
func NewGetAllRequest(server string, params *GetAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loadBalancers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetLoadBalancerDetailsRequest generates requests for GetLoadBalancerDetails
func NewGetLoadBalancerDetailsRequest(server string, account string, region string, name string, params *GetLoadBalancerDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loadBalancers/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetLoadBalancerRequest generates requests for GetLoadBalancer
func NewGetLoadBalancerRequest(server string, name string, params *GetLoadBalancerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loadBalancers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetApplicationDetailsRequest generates requests for GetApplicationDetails
func NewGetApplicationDetailsRequest(server string, application string, params *GetApplicationDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDetails", runtime.ParamLocationQuery, *params.IncludeDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Entities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entities", runtime.ParamLocationQuery, *params.Entities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxArtifactVersions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxArtifactVersions", runtime.ParamLocationQuery, *params.MaxArtifactVersions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteManifestByAppRequest generates requests for DeleteManifestByApp
func NewDeleteManifestByAppRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigByRequest generates requests for GetConfigBy
func NewGetConfigByRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConstraintStatusRequest calls the generic UpdateConstraintStatus builder with application/json body
func NewUpdateConstraintStatusRequest(server string, application string, environment string, body UpdateConstraintStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConstraintStatusRequestWithBody(server, application, environment, "application/json", bodyReader)
}

// NewUpdateConstraintStatusRequestWithBody generates requests for UpdateConstraintStatus with any type of body
func NewUpdateConstraintStatusRequestWithBody(server string, application string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/environment/%s/constraint", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConstraintStateRequest generates requests for GetConstraintState
func NewGetConstraintStateRequest(server string, application string, environment string, params *GetConstraintStateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/environment/%s/constraints", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarkBadRequest calls the generic MarkBad builder with application/json body
func NewMarkBadRequest(server string, application string, body MarkBadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarkBadRequestWithBody(server, application, "application/json", bodyReader)
}

// NewMarkBadRequestWithBody generates requests for MarkBad with any type of body
func NewMarkBadRequestWithBody(server string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/mark/bad", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarkGoodRequest calls the generic MarkGood builder with application/json body
func NewMarkGoodRequest(server string, application string, body MarkGoodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarkGoodRequestWithBody(server, application, "application/json", bodyReader)
}

// NewMarkGoodRequestWithBody generates requests for MarkGood with any type of body
func NewMarkGoodRequestWithBody(server string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/mark/good", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResumeApplicationRequest generates requests for ResumeApplication
func NewResumeApplicationRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseApplicationRequest generates requests for PauseApplication
func NewPauseApplicationRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePinRequest calls the generic CreatePin builder with application/json body
func NewCreatePinRequest(server string, application string, body CreatePinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePinRequestWithBody(server, application, "application/json", bodyReader)
}

// NewCreatePinRequestWithBody generates requests for CreatePin with any type of body
func NewCreatePinRequestWithBody(server string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/pin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePinRequest generates requests for DeletePin
func NewDeletePinRequest(server string, application string, targetEnvironment string, params *DeletePinParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetEnvironment", runtime.ParamLocationPath, targetEnvironment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/pin/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVetoRequest calls the generic Veto builder with application/json body
func NewVetoRequest(server string, application string, body VetoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVetoRequestWithBody(server, application, "application/json", bodyReader)
}

// NewVetoRequestWithBody generates requests for Veto with any type of body
func NewVetoRequestWithBody(server string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/veto", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVetoRequest generates requests for DeleteVeto
func NewDeleteVetoRequest(server string, application string, targetEnvironment string, reference string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetEnvironment", runtime.ParamLocationPath, targetEnvironment)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "reference", runtime.ParamLocationPath, reference)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/application/%s/veto/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertManifestRequest calls the generic UpsertManifest builder with application/json body
func NewUpsertManifestRequest(server string, body UpsertManifestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertManifestRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertManifestRequestWithBody generates requests for UpsertManifest with any type of body
func NewUpsertManifestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDiffManifestRequest calls the generic DiffManifest builder with application/json body
func NewDiffManifestRequest(server string, body DiffManifestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDiffManifestRequestWithBody(server, "application/json", bodyReader)
}

// NewDiffManifestRequestWithBody generates requests for DiffManifest with any type of body
func NewDiffManifestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/diff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSchemaRequest generates requests for Schema
func NewSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateManifestRequest calls the generic ValidateManifest builder with application/json body
func NewValidateManifestRequest(server string, body ValidateManifestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateManifestRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateManifestRequestWithBody generates requests for ValidateManifest with any type of body
func NewValidateManifestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteManifestRequest generates requests for DeleteManifest
func NewDeleteManifestRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetManifest1Request generates requests for GetManifest1
func NewGetManifest1Request(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetManifestYamlRequest generates requests for GetManifestYaml
func NewGetManifestYamlRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/%s.yml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetManifestArtifactsRequest generates requests for GetManifestArtifacts
func NewGetManifestArtifactsRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/delivery-configs/%s/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentsRequest generates requests for GetEnvironments
func NewGetEnvironmentsRequest(server string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlRequest calls the generic Graphql builder with application/json body
func NewGraphqlRequest(server string, body GraphqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGraphqlRequestWithBody(server, "application/json", bodyReader)
}

// NewGraphqlRequestWithBody generates requests for Graphql with any type of body
func NewGraphqlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/graphql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProcessNotificationCallback1Request generates requests for ProcessNotificationCallback1
func NewProcessNotificationCallback1Request(server string, source string, params *ProcessNotificationCallback1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/notifications/callbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdoptionReportRequest generates requests for GetAdoptionReport
func NewGetAdoptionReportRequest(server string, params *GetAdoptionReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/reports/adoption")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "params", runtime.ParamLocationQuery, params.Params); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOnboardingReportRequest generates requests for GetOnboardingReport
func NewGetOnboardingReportRequest(server string, params *GetOnboardingReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/reports/onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "params", runtime.ParamLocationQuery, params.Params); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewDiffResourceRequest calls the generic DiffResource builder with application/json body
func NewDiffResourceRequest(server string, body DiffResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDiffResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDiffResourceRequestWithBody generates requests for DiffResource with any type of body
func NewDiffResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/diff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExportResource1Request generates requests for ExportResource1
func NewExportResource1Request(server string, cloudProvider string, account string, clusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/export/artifact/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportResourceRequest generates requests for ExportResource
func NewExportResourceRequest(server string, cloudProvider string, account string, pType string, name string, params *ExportResourceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/export/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceAccount", runtime.ParamLocationQuery, params.ServiceAccount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceYamlRequest generates requests for GetResourceYaml
func NewGetResourceYamlRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/%s.yml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeResourceRequest generates requests for ResumeResource
func NewResumeResourceRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseResourceRequest generates requests for PauseResource
func NewPauseResourceRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceStatusRequest generates requests for GetResourceStatus
func NewGetResourceStatusRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/resources/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOverrideVerificationRequest calls the generic OverrideVerification builder with application/json body
func NewOverrideVerificationRequest(server string, application string, environment string, body OverrideVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOverrideVerificationRequestWithBody(server, application, environment, "application/json", bodyReader)
}

// NewOverrideVerificationRequestWithBody generates requests for OverrideVerification with any type of body
func NewOverrideVerificationRequestWithBody(server string, application string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/%s/environment/%s/verifications", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetryVerificationRequest calls the generic RetryVerification builder with application/json body
func NewRetryVerificationRequest(server string, application string, environment string, body RetryVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetryVerificationRequestWithBody(server, application, environment, "application/json", bodyReader)
}

// NewRetryVerificationRequestWithBody generates requests for RetryVerification with any type of body
func NewRetryVerificationRequestWithBody(server string, application string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managed/%s/environment/%s/verifications/retry", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetManifestRequest generates requests for GetManifest
func NewGetManifestRequest(server string, account string, location string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manifests/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll5Request generates requests for All5
func NewAll5Request(server string, params *All5Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllByCloudProvider1Request generates requests for AllByCloudProvider1
func NewAllByCloudProvider1Request(server string, cloudProvider string, params *AllByCloudProvider1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewNamesRequest generates requests for Names
func NewNamesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nexus/names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProcessNotificationCallbackRequest generates requests for ProcessNotificationCallback
func NewProcessNotificationCallbackRequest(server string, source string, params *ProcessNotificationCallbackParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/callbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationTypeMetadataRequest generates requests for GetNotificationTypeMetadata
func NewGetNotificationTypeMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePipeline2Request generates requests for DeletePipeline2
func NewDeletePipeline2Request(server string, pType string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationConfigRequest generates requests for GetNotificationConfig
func NewGetNotificationConfigRequest(server string, pType string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSaveNotificationConfigRequest calls the generic SaveNotificationConfig builder with application/json body
func NewSaveNotificationConfigRequest(server string, pType string, application string, body SaveNotificationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSaveNotificationConfigRequestWithBody(server, pType, application, "application/json", bodyReader)
}

// NewSaveNotificationConfigRequestWithBody generates requests for SaveNotificationConfig with any type of body
func NewSaveNotificationConfigRequestWithBody(server string, pType string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllPipelineConfigsRequest generates requests for GetAllPipelineConfigs
func NewGetAllPipelineConfigsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConvertPipelineConfigToPipelineTemplateRequest generates requests for ConvertPipelineConfigToPipelineTemplate
func NewConvertPipelineConfigToPipelineTemplateRequest(server string, pipelineConfigId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pipelineConfigId", runtime.ParamLocationPath, pipelineConfigId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineConfigs/%s/convertToTemplate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineConfigHistory1Request generates requests for GetPipelineConfigHistory1
func NewGetPipelineConfigHistory1Request(server string, pipelineConfigId string, params *GetPipelineConfigHistory1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pipelineConfigId", runtime.ParamLocationPath, pipelineConfigId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineConfigs/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList3Request generates requests for List3
func NewList3Request(server string, params *List3Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, *params.Scopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate1Request calls the generic Create1 builder with application/json body
func NewCreate1Request(server string, body Create1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate1RequestWithBody(server, "application/json", bodyReader)
}

// NewCreate1RequestWithBody generates requests for Create1 with any type of body
func NewCreate1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveTemplatesRequest generates requests for ResolveTemplates
func NewResolveTemplatesRequest(server string, params *ResolveTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates/resolve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExecutionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "executionId", runtime.ParamLocationQuery, *params.ExecutionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PipelineConfigId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineConfigId", runtime.ParamLocationQuery, *params.PipelineConfigId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete2Request generates requests for Delete2
func NewDelete2Request(server string, id string, params *Delete2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet3Request generates requests for Get3
func NewGet3Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate1Request calls the generic Update1 builder with application/json body
func NewUpdate1Request(server string, id string, params *Update1Params, body Update1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate1RequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdate1RequestWithBody generates requests for Update1 with any type of body
func NewUpdate1RequestWithBody(server string, id string, params *Update1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipPlanDependents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipPlanDependents", runtime.ParamLocationQuery, *params.SkipPlanDependents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPipelineTemplateDependents1Request generates requests for ListPipelineTemplateDependents1
func NewListPipelineTemplateDependents1Request(server string, id string, params *ListPipelineTemplateDependents1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelineTemplates/%s/dependents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Recursive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSavePipelineRequest calls the generic SavePipeline builder with application/json body
func NewSavePipelineRequest(server string, params *SavePipelineParams, body SavePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSavePipelineRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSavePipelineRequestWithBody generates requests for SavePipeline with any type of body
func NewSavePipelineRequestWithBody(server string, params *SavePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StaleCheck != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staleCheck", runtime.ParamLocationQuery, *params.StaleCheck); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulksavePipelineRequest calls the generic BulksavePipeline builder with application/json body
func NewBulksavePipelineRequest(server string, params *BulksavePipelineParams, body BulksavePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulksavePipelineRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBulksavePipelineRequestWithBody generates requests for BulksavePipeline with any type of body
func NewBulksavePipelineRequestWithBody(server string, params *BulksavePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/bulksave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRenamePipelineRequest calls the generic RenamePipeline builder with application/json body
func NewRenamePipelineRequest(server string, body RenamePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenamePipelineRequestWithBody(server, "application/json", bodyReader)
}

// NewRenamePipelineRequestWithBody generates requests for RenamePipeline with any type of body
func NewRenamePipelineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartRequest calls the generic Start builder with application/json body
func NewStartRequest(server string, body StartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRequestWithBody(server, "application/json", bodyReader)
}

// NewStartRequestWithBody generates requests for Start with any type of body
func NewStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvokePipelineConfigViaEchoRequest calls the generic InvokePipelineConfigViaEcho builder with application/json body
func NewInvokePipelineConfigViaEchoRequest(server string, application string, pipelineNameOrId string, body InvokePipelineConfigViaEchoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvokePipelineConfigViaEchoRequestWithBody(server, application, pipelineNameOrId, "application/json", bodyReader)
}

// NewInvokePipelineConfigViaEchoRequestWithBody generates requests for InvokePipelineConfigViaEcho with any type of body
func NewInvokePipelineConfigViaEchoRequestWithBody(server string, application string, pipelineNameOrId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineNameOrId", runtime.ParamLocationPath, pipelineNameOrId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/v2/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvokePipelineConfigRequest calls the generic InvokePipelineConfig builder with application/json body
func NewInvokePipelineConfigRequest(server string, application string, pipelineNameOrId string, body InvokePipelineConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvokePipelineConfigRequestWithBody(server, application, pipelineNameOrId, "application/json", bodyReader)
}

// NewInvokePipelineConfigRequestWithBody generates requests for InvokePipelineConfig with any type of body
func NewInvokePipelineConfigRequestWithBody(server string, application string, pipelineNameOrId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineNameOrId", runtime.ParamLocationPath, pipelineNameOrId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipeline1Request generates requests for DeletePipeline1
func NewDeletePipeline1Request(server string, application string, pipelineName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineName", runtime.ParamLocationPath, pipelineName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePipelineRequest generates requests for DeletePipeline
func NewDeletePipelineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineRequest generates requests for GetPipeline
func NewGetPipelineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineRequest calls the generic UpdatePipeline builder with application/json body
func NewUpdatePipelineRequest(server string, id string, body UpdatePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePipelineRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePipelineRequestWithBody generates requests for UpdatePipeline with any type of body
func NewUpdatePipelineRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelPipelineRequest generates requests for CancelPipeline
func NewCancelPipelineRequest(server string, id string, params *CancelPipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateExpressionForExecutionRequest generates requests for EvaluateExpressionForExecution
func NewEvaluateExpressionForExecutionRequest(server string, id string, params *EvaluateExpressionForExecutionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/evaluateExpression", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expression", runtime.ParamLocationQuery, params.Expression); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateExpressionForExecutionViaPOST1Request calls the generic EvaluateExpressionForExecutionViaPOST1 builder with application/json body
func NewEvaluateExpressionForExecutionViaPOST1Request(server string, id string, body EvaluateExpressionForExecutionViaPOST1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluateExpressionForExecutionViaPOST1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewEvaluateExpressionForExecutionViaPOST1RequestWithTextBody calls the generic EvaluateExpressionForExecutionViaPOST1 builder with text/plain body
func NewEvaluateExpressionForExecutionViaPOST1RequestWithTextBody(server string, id string, body EvaluateExpressionForExecutionViaPOST1TextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewEvaluateExpressionForExecutionViaPOST1RequestWithBody(server, id, "text/plain", bodyReader)
}

// NewEvaluateExpressionForExecutionViaPOST1RequestWithBody generates requests for EvaluateExpressionForExecutionViaPOST1 with any type of body
func NewEvaluateExpressionForExecutionViaPOST1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/evaluateExpression", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvaluateVariablesRequest calls the generic EvaluateVariables builder with application/json body
func NewEvaluateVariablesRequest(server string, id string, params *EvaluateVariablesParams, body EvaluateVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluateVariablesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewEvaluateVariablesRequestWithBody generates requests for EvaluateVariables with any type of body
func NewEvaluateVariablesRequestWithBody(server string, id string, params *EvaluateVariablesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/evaluateVariables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "executionId", runtime.ParamLocationQuery, params.ExecutionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RequisiteStageRefIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requisiteStageRefIds", runtime.ParamLocationQuery, *params.RequisiteStageRefIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpelVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spelVersion", runtime.ParamLocationQuery, *params.SpelVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPausePipelineRequest generates requests for PausePipeline
func NewPausePipelineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumePipelineRequest generates requests for ResumePipeline
func NewResumePipelineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStageRequest calls the generic UpdateStage builder with application/json body
func NewUpdateStageRequest(server string, id string, stageId string, body UpdateStageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStageRequestWithBody(server, id, stageId, "application/json", bodyReader)
}

// NewUpdateStageRequestWithBody generates requests for UpdateStage with any type of body
func NewUpdateStageRequestWithBody(server string, id string, stageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/stages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestartStageRequest calls the generic RestartStage builder with application/json body
func NewRestartStageRequest(server string, id string, stageId string, body RestartStageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestartStageRequestWithBody(server, id, stageId, "application/json", bodyReader)
}

// NewRestartStageRequestWithBody generates requests for RestartStage with any type of body
func NewRestartStageRequestWithBody(server string, id string, stageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/stages/%s/restart", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvaluateExpressionForExecutionAtStageRequest generates requests for EvaluateExpressionForExecutionAtStage
func NewEvaluateExpressionForExecutionAtStageRequest(server string, id string, stageId string, params *EvaluateExpressionForExecutionAtStageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines/%s/%s/evaluateExpression", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expression", runtime.ParamLocationQuery, params.Expression); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginManifestRequest generates requests for GetPluginManifest
func NewGetPluginManifestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/deck/plugin-manifest.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginAssetRequest generates requests for GetPluginAsset
func NewGetPluginAssetRequest(server string, pluginId string, pluginVersion string, asset string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pluginId", runtime.ParamLocationPath, pluginId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pluginVersion", runtime.ParamLocationPath, pluginVersion)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "asset", runtime.ParamLocationPath, asset)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/deck/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllPluginInfoRequest generates requests for GetAllPluginInfo
func NewGetAllPluginInfoRequest(server string, params *GetAllPluginInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPersistPluginInfoRequest calls the generic PersistPluginInfo builder with application/json body
func NewPersistPluginInfoRequest(server string, body PersistPluginInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPersistPluginInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPersistPluginInfoRequestWithBody generates requests for PersistPluginInfo with any type of body
func NewPersistPluginInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPersistPluginInfo1Request calls the generic PersistPluginInfo1 builder with application/json body
func NewPersistPluginInfo1Request(server string, body PersistPluginInfo1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPersistPluginInfo1RequestWithBody(server, "application/json", bodyReader)
}

// NewPersistPluginInfo1RequestWithBody generates requests for PersistPluginInfo1 with any type of body
func NewPersistPluginInfo1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePluginInfoRequest generates requests for DeletePluginInfo
func NewDeletePluginInfoRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstalledPluginsRequest generates requests for GetInstalledPlugins
func NewGetInstalledPluginsRequest(server string, params *GetInstalledPluginsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/installed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishPluginRequestWithBody generates requests for PublishPlugin with any type of body
func NewPublishPluginRequestWithBody(server string, pluginId string, pluginVersion string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pluginId", runtime.ParamLocationPath, pluginId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pluginVersion", runtime.ParamLocationPath, pluginVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugins/publish/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAll4Request generates requests for All4
func NewAll4Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet2Request generates requests for Get2
func NewGet2Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersRequest generates requests for GetClusters
func NewGetClustersRequest(server string, id string, params *GetClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllPipelinesForProjectRequest generates requests for AllPipelinesForProject
func NewAllPipelinesForProjectRequest(server string, id string, params *AllPipelinesForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList2Request generates requests for List2
func NewList2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny3Request generates requests for Any3
func NewAny3Request(server string, proxy string, params *Any3Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "proxy", runtime.ParamLocationPath, proxy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxies/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, params.RequestParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnyRequest generates requests for Any
func NewAnyRequest(server string, proxy string, params *AnyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "proxy", runtime.ParamLocationPath, proxy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxies/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, params.RequestParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny1Request generates requests for Any1
func NewAny1Request(server string, proxy string, params *Any1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "proxy", runtime.ParamLocationPath, proxy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxies/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, params.RequestParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAny2Request generates requests for Any2
func NewAny2Request(server string, proxy string, params *Any2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "proxy", runtime.ParamLocationPath, proxy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxies/%s/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestParams", runtime.ParamLocationQuery, params.RequestParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll3Request generates requests for All3
func NewAll3Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pubsub/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApi1Request generates requests for Api1
func NewApi1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/responseHeader/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAll2Request generates requests for All2
func NewAll2Request(server string, cloudProvider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchRequest generates requests for Search
func NewSearchRequest(server string, params *SearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Platform != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllowShortQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allowShortQuery", runtime.ParamLocationQuery, *params.AllowShortQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAll1Request generates requests for All1
func NewAll1Request(server string, params *All1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewAllByAccountRequest generates requests for AllByAccount
func NewAllByAccountRequest(server string, account string, params *AllByAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetSecurityGroupRequest generates requests for GetSecurityGroup
func NewGetSecurityGroupRequest(server string, account string, region string, name string, params *GetSecurityGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VpcId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpcId", runtime.ParamLocationQuery, *params.VpcId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServerGroupsRequest generates requests for GetServerGroups
func NewGetServerGroupsRequest(server string, params *GetServerGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/serverGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Applications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applications", runtime.ParamLocationQuery, *params.Applications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CloudProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, *params.CloudProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewGetServiceInstanceRequest generates requests for GetServiceInstance
func NewGetServiceInstanceRequest(server string, account string, params *GetServiceInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servicebroker/%s/serviceInstance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, params.CloudProvider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceInstanceName", runtime.ParamLocationQuery, params.ServiceInstanceName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, account string, params *ListServicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servicebroker/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CloudProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, *params.CloudProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllRequest generates requests for All
func NewAllRequest(server string, params *AllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewSaveStrategyRequest calls the generic SaveStrategy builder with application/json body
func NewSaveStrategyRequest(server string, body SaveStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSaveStrategyRequestWithBody(server, "application/json", bodyReader)
}

// NewSaveStrategyRequestWithBody generates requests for SaveStrategy with any type of body
func NewSaveStrategyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRenameStrategyRequest calls the generic RenameStrategy builder with application/json body
func NewRenameStrategyRequest(server string, body RenameStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenameStrategyRequestWithBody(server, "application/json", bodyReader)
}

// NewRenameStrategyRequestWithBody generates requests for RenameStrategy with any type of body
func NewRenameStrategyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategies/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStrategyRequest generates requests for DeleteStrategy
func NewDeleteStrategyRequest(server string, application string, strategyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "strategyName", runtime.ParamLocationPath, strategyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategies/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStrategyRequest calls the generic UpdateStrategy builder with application/json body
func NewUpdateStrategyRequest(server string, id string, body UpdateStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStrategyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateStrategyRequestWithBody generates requests for UpdateStrategy with any type of body
func NewUpdateStrategyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllStrategyConfigsRequest generates requests for GetAllStrategyConfigs
func NewGetAllStrategyConfigsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategyConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineConfigHistoryRequest generates requests for GetPipelineConfigHistory
func NewGetPipelineConfigHistoryRequest(server string, strategyConfigId string, params *GetPipelineConfigHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "strategyConfigId", runtime.ParamLocationPath, strategyConfigId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/strategyConfigs/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubnetsRequest generates requests for Subnets
func NewSubnetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllByCloudProviderRequest generates requests for AllByCloudProvider
func NewAllByCloudProviderRequest(server string, cloudProvider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cloudProvider", runtime.ParamLocationPath, cloudProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList1Request generates requests for List1
func NewList1Request(server string, params *List1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allParameters", runtime.ParamLocationQuery, params.AllParameters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewPostRequest calls the generic Post builder with application/json body
func NewPostRequest(server string, params *PostParams, body PostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRequestWithBody generates requests for Post with any type of body
func NewPostRequestWithBody(server string, params *PostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityId", runtime.ParamLocationQuery, params.EntityId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, params.EntityType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, params.Account); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, params.CloudProvider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsPartial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPartial", runtime.ParamLocationQuery, *params.IsPartial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1Request generates requests for Get1
func NewGet1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/**")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete1Request generates requests for Delete1
func NewDelete1Request(server string, id string, tag string, params *Delete1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewTaskRequest calls the generic Task builder with application/json body
func NewTaskRequest(server string, body TaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewTaskRequestWithBody generates requests for Task with any type of body
func NewTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelTasksRequest generates requests for CancelTasks
func NewCancelTasksRequest(server string, params *CancelTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTaskRequest generates requests for DeleteTask
func NewDeleteTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelTaskRequest generates requests for CancelTask
func NewCancelTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskDetailsRequest generates requests for GetTaskDetails
func NewGetTaskDetailsRequest(server string, id string, taskDetailsId string, params *GetTaskDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskDetailsId", runtime.ParamLocationPath, taskDetailsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/details/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRateLimitApp != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-RateLimit-App", runtime.ParamLocationHeader, *params.XRateLimitApp)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-RateLimit-App", headerParam0)
		}

	}

	return req, nil
}

// NewApiRequest generates requests for Api
func NewApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-provided-id-request-filter/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAsyncApiRequest generates requests for AsyncApi
func NewAsyncApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test/asyncApi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData5Request generates requests for GetAdhocData5
func NewGetAdhocData5Request(server string, groupId string, bucketId string, params *GetAdhocData5Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocDataRequest generates requests for GetAdhocData
func NewGetAdhocDataRequest(server string, groupId string, bucketId string, params *GetAdhocDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData1Request generates requests for GetAdhocData1
func NewGetAdhocData1Request(server string, groupId string, bucketId string, params *GetAdhocData1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData6Request generates requests for GetAdhocData6
func NewGetAdhocData6Request(server string, groupId string, bucketId string, params *GetAdhocData6Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData4Request generates requests for GetAdhocData4
func NewGetAdhocData4Request(server string, groupId string, bucketId string, params *GetAdhocData4Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData2Request generates requests for GetAdhocData2
func NewGetAdhocData2Request(server string, groupId string, bucketId string, params *GetAdhocData2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdhocData3Request generates requests for GetAdhocData3
func NewGetAdhocData3Request(server string, groupId string, bucketId string, params *GetAdhocData3Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucketId", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/adhoc/%s/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticDataRequest generates requests for GetStaticData
func NewGetStaticDataRequest(server string, id string, params *GetStaticDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/data/static/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, params.Filters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExpectedContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectedContentType", runtime.ParamLocationQuery, *params.ExpectedContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildMastersRequest generates requests for GetBuildMasters
func NewGetBuildMastersRequest(server string, params *GetBuildMastersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildRequest generates requests for GetBuild
func NewGetBuildRequest(server string, buildMaster string, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/builds/%s/build/%s/**", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildsRequest generates requests for GetBuilds
func NewGetBuildsRequest(server string, buildMaster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/builds/%s/builds/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsForBuildMasterRequest generates requests for GetJobsForBuildMaster
func NewGetJobsForBuildMasterRequest(server string, buildMaster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/builds/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobConfigRequest generates requests for GetJobConfig
func NewGetJobConfigRequest(server string, buildMaster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/builds/%s/jobs/**", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInitiateCanaryWithConfigRequest calls the generic InitiateCanaryWithConfig builder with application/json body
func NewInitiateCanaryWithConfigRequest(server string, params *InitiateCanaryWithConfigParams, body InitiateCanaryWithConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInitiateCanaryWithConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewInitiateCanaryWithConfigRequestWithBody generates requests for InitiateCanaryWithConfig with any type of body
func NewInitiateCanaryWithConfigRequestWithBody(server string, params *InitiateCanaryWithConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/canary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPipelineExecutionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentPipelineExecutionId", runtime.ParamLocationQuery, *params.ParentPipelineExecutionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricsAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricsAccountName", runtime.ParamLocationQuery, *params.MetricsAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInitiateCanaryRequest calls the generic InitiateCanary builder with application/json body
func NewInitiateCanaryRequest(server string, canaryConfigId string, params *InitiateCanaryParams, body InitiateCanaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInitiateCanaryRequestWithBody(server, canaryConfigId, params, "application/json", bodyReader)
}

// NewInitiateCanaryRequestWithBody generates requests for InitiateCanary with any type of body
func NewInitiateCanaryRequestWithBody(server string, canaryConfigId string, params *InitiateCanaryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "canaryConfigId", runtime.ParamLocationPath, canaryConfigId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/canary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPipelineExecutionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentPipelineExecutionId", runtime.ParamLocationQuery, *params.ParentPipelineExecutionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricsAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricsAccountName", runtime.ParamLocationQuery, *params.MetricsAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCanaryResult1Request generates requests for GetCanaryResult1
func NewGetCanaryResult1Request(server string, canaryConfigId string, canaryExecutionId string, params *GetCanaryResult1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "canaryConfigId", runtime.ParamLocationPath, canaryConfigId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "canaryExecutionId", runtime.ParamLocationPath, canaryExecutionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/canary/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCanaryResultRequest generates requests for GetCanaryResult
func NewGetCanaryResultRequest(server string, canaryExecutionId string, params *GetCanaryResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "canaryExecutionId", runtime.ParamLocationPath, canaryExecutionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/canary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCredentialsRequest generates requests for ListCredentials
func NewListCredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJudgesRequest generates requests for ListJudges
func NewListJudgesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/judges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMetricsServiceMetadataRequest generates requests for ListMetricsServiceMetadata
func NewListMetricsServiceMetadataRequest(server string, params *ListMetricsServiceMetadataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/metadata/metricsService")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricsAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricsAccountName", runtime.ParamLocationQuery, *params.MetricsAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricSetPairListRequest generates requests for GetMetricSetPairList
func NewGetMetricSetPairListRequest(server string, metricSetPairListId string, params *GetMetricSetPairListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metricSetPairListId", runtime.ParamLocationPath, metricSetPairListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/metricSetPairList/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCanaryResultsByApplicationRequest generates requests for GetCanaryResultsByApplication
func NewGetCanaryResultsByApplicationRequest(server string, application string, params *GetCanaryResultsByApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaries/%s/executions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StorageAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storageAccountName", runtime.ParamLocationQuery, *params.StorageAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCanaryConfigsRequest generates requests for GetCanaryConfigs
func NewGetCanaryConfigsRequest(server string, params *GetCanaryConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaryConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCanaryConfigRequest calls the generic CreateCanaryConfig builder with application/json body
func NewCreateCanaryConfigRequest(server string, params *CreateCanaryConfigParams, body CreateCanaryConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCanaryConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCanaryConfigRequestWithBody generates requests for CreateCanaryConfig with any type of body
func NewCreateCanaryConfigRequestWithBody(server string, params *CreateCanaryConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaryConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCanaryConfigRequest generates requests for DeleteCanaryConfig
func NewDeleteCanaryConfigRequest(server string, id string, params *DeleteCanaryConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaryConfig/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCanaryConfigRequest generates requests for GetCanaryConfig
func NewGetCanaryConfigRequest(server string, id string, params *GetCanaryConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaryConfig/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCanaryConfigRequest calls the generic UpdateCanaryConfig builder with application/json body
func NewUpdateCanaryConfigRequest(server string, id string, params *UpdateCanaryConfigParams, body UpdateCanaryConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCanaryConfigRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCanaryConfigRequestWithBody generates requests for UpdateCanaryConfig with any type of body
func NewUpdateCanaryConfigRequestWithBody(server string, id string, params *UpdateCanaryConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/canaryConfig/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigurationAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configurationAccountName", runtime.ParamLocationQuery, *params.ConfigurationAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRequest generates requests for List
func NewListRequest(server string, params *ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, *params.Scopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(server string, params *CreateParams, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(server string, params *CreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPlanRequest calls the generic Plan builder with application/json body
func NewPlanRequest(server string, body PlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewPlanRequestWithBody generates requests for Plan with any type of body
func NewPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(server string, id string, params *UpdateParams, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, id string, params *UpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/update/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipPlanDependents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipPlanDependents", runtime.ParamLocationQuery, *params.SkipPlanDependents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListVersionsRequest generates requests for ListVersions
func NewListVersionsRequest(server string, params *ListVersionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, *params.Scopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(server string, id string, params *DeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Digest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, *params.Digest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string, id string, params *GetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Digest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, *params.Digest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineTemplateDependentsRequest generates requests for ListPipelineTemplateDependents
func NewListPipelineTemplateDependentsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pipelineTemplates/%s/dependents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV3GetBuildMastersRequest generates requests for V3GetBuildMasters
func NewV3GetBuildMastersRequest(server string, params *V3GetBuildMastersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV3GetBuildRequest generates requests for V3GetBuild
func NewV3GetBuildRequest(server string, buildMaster string, number string, params *V3GetBuildParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s/build/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job", runtime.ParamLocationQuery, params.Job); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV3GetBuildsRequest generates requests for V3GetBuilds
func NewV3GetBuildsRequest(server string, buildMaster string, params *V3GetBuildsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job", runtime.ParamLocationQuery, params.Job); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV3GetJobConfigRequest generates requests for V3GetJobConfig
func NewV3GetJobConfigRequest(server string, buildMaster string, params *V3GetJobConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s/job", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job", runtime.ParamLocationQuery, params.Job); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV3GetJobsForBuildMasterRequest generates requests for V3GetJobsForBuildMaster
func NewV3GetJobsForBuildMasterRequest(server string, buildMaster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildMaster", runtime.ParamLocationPath, buildMaster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVpcsRequest generates requests for Vpcs
func NewVpcsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vpcs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebhooks1Request calls the generic Webhooks1 builder with application/json body
func NewWebhooks1Request(server string, source string, body Webhooks1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebhooks1RequestWithBody(server, source, "application/json", bodyReader)
}

// NewWebhooks1RequestWithBody generates requests for Webhooks1 with any type of body
func NewWebhooks1RequestWithBody(server string, source string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/cdevents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPreconfiguredWebhooksRequest generates requests for PreconfiguredWebhooks
func NewPreconfiguredWebhooksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/preconfigured")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebhooksRequest generates requests for Webhooks
func NewWebhooksRequest(server string, pType string, source string, params *WebhooksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHubSignature != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Hub-Signature", runtime.ParamLocationHeader, *params.XHubSignature)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Hub-Signature", headerParam0)
		}

		if params.XEventKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Event-Key", runtime.ParamLocationHeader, *params.XEventKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Event-Key", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Root5WithResponse request
	Root5WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root5Response, error)

	// RootWithResponse request
	RootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RootResponse, error)

	// Root1WithResponse request
	Root1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root1Response, error)

	// Root6WithResponse request
	Root6WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root6Response, error)

	// Root4WithResponse request
	Root4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root4Response, error)

	// Root2WithResponse request
	Root2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root2Response, error)

	// Root3WithResponse request
	Root3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root3Response, error)

	// ReorderPipelinesWithBodyWithResponse request with any body
	ReorderPipelinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReorderPipelinesResponse, error)

	ReorderPipelinesWithResponse(ctx context.Context, body ReorderPipelinesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReorderPipelinesResponse, error)

	// ReorderPipelineStrategiesWithBodyWithResponse request with any body
	ReorderPipelineStrategiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReorderPipelineStrategiesResponse, error)

	ReorderPipelineStrategiesWithResponse(ctx context.Context, body ReorderPipelineStrategiesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReorderPipelineStrategiesResponse, error)

	// GetAllApplicationsWithResponse request
	GetAllApplicationsWithResponse(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*GetAllApplicationsResponse, error)

	// GetJobWithResponse request
	GetJobWithResponse(ctx context.Context, applicationName string, account string, region string, name string, params *GetJobParams, reqEditors ...RequestEditorFn) (*GetJobResponse, error)

	// GetServerGroupsForApplicationWithResponse request
	GetServerGroupsForApplicationWithResponse(ctx context.Context, applicationName string, params *GetServerGroupsForApplicationParams, reqEditors ...RequestEditorFn) (*GetServerGroupsForApplicationResponse, error)

	// GetServerGroupDetailsWithResponse request
	GetServerGroupDetailsWithResponse(ctx context.Context, applicationName string, account string, region string, serverGroupName string, params *GetServerGroupDetailsParams, reqEditors ...RequestEditorFn) (*GetServerGroupDetailsResponse, error)

	// GetApplicationWithResponse request
	GetApplicationWithResponse(ctx context.Context, application string, params *GetApplicationParams, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// GetClusters1WithResponse request
	GetClusters1WithResponse(ctx context.Context, application string, params *GetClusters1Params, reqEditors ...RequestEditorFn) (*GetClusters1Response, error)

	// GetClusters2WithResponse request
	GetClusters2WithResponse(ctx context.Context, application string, account string, params *GetClusters2Params, reqEditors ...RequestEditorFn) (*GetClusters2Response, error)

	// GetClusters3WithResponse request
	GetClusters3WithResponse(ctx context.Context, application string, account string, clusterName string, params *GetClusters3Params, reqEditors ...RequestEditorFn) (*GetClusters3Response, error)

	// GetServerGroups1WithResponse request
	GetServerGroups1WithResponse(ctx context.Context, application string, account string, clusterName string, params *GetServerGroups1Params, reqEditors ...RequestEditorFn) (*GetServerGroups1Response, error)

	// GetServerGroups2WithResponse request
	GetServerGroups2WithResponse(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetServerGroups2Params, reqEditors ...RequestEditorFn) (*GetServerGroups2Response, error)

	// GetScalingActivitiesWithResponse request
	GetScalingActivitiesWithResponse(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetScalingActivitiesParams, reqEditors ...RequestEditorFn) (*GetScalingActivitiesResponse, error)

	// GetTargetServerGroupWithResponse request
	GetTargetServerGroupWithResponse(ctx context.Context, application string, account string, clusterName string, cloudProvider string, scope string, target string, params *GetTargetServerGroupParams, reqEditors ...RequestEditorFn) (*GetTargetServerGroupResponse, error)

	// GetClusterLoadBalancersWithResponse request
	GetClusterLoadBalancersWithResponse(ctx context.Context, application string, account string, clusterName string, pType string, params *GetClusterLoadBalancersParams, reqEditors ...RequestEditorFn) (*GetClusterLoadBalancersResponse, error)

	// SearchForPipelineExecutionsByTriggerWithResponse request
	SearchForPipelineExecutionsByTriggerWithResponse(ctx context.Context, application string, params *SearchForPipelineExecutionsByTriggerParams, reqEditors ...RequestEditorFn) (*SearchForPipelineExecutionsByTriggerResponse, error)

	// ApplicationFunctionsWithResponse request
	ApplicationFunctionsWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*ApplicationFunctionsResponse, error)

	// GetApplicationHistoryWithResponse request
	GetApplicationHistoryWithResponse(ctx context.Context, application string, params *GetApplicationHistoryParams, reqEditors ...RequestEditorFn) (*GetApplicationHistoryResponse, error)

	// GetApplicationLoadBalancersWithResponse request
	GetApplicationLoadBalancersWithResponse(ctx context.Context, application string, params *GetApplicationLoadBalancersParams, reqEditors ...RequestEditorFn) (*GetApplicationLoadBalancersResponse, error)

	// GetPipelineConfigsForApplicationWithResponse request
	GetPipelineConfigsForApplicationWithResponse(ctx context.Context, application string, params *GetPipelineConfigsForApplicationParams, reqEditors ...RequestEditorFn) (*GetPipelineConfigsForApplicationResponse, error)

	// GetPipelineConfigWithResponse request
	GetPipelineConfigWithResponse(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*GetPipelineConfigResponse, error)

	// InvokePipelineConfig1WithBodyWithResponse request with any body
	InvokePipelineConfig1WithBodyWithResponse(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfig1Response, error)

	InvokePipelineConfig1WithResponse(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, body InvokePipelineConfig1JSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfig1Response, error)

	// GetPipelinesWithResponse request
	GetPipelinesWithResponse(ctx context.Context, application string, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*GetPipelinesResponse, error)

	// CancelPipeline1WithResponse request
	CancelPipeline1WithResponse(ctx context.Context, application string, id string, params *CancelPipeline1Params, reqEditors ...RequestEditorFn) (*CancelPipeline1Response, error)

	// GetApplicationRawResourcesWithResponse request
	GetApplicationRawResourcesWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetApplicationRawResourcesResponse, error)

	// GetServerGroupManagersForApplicationWithResponse request
	GetServerGroupManagersForApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetServerGroupManagersForApplicationResponse, error)

	// GetEventsWithResponse request
	GetEventsWithResponse(ctx context.Context, application string, account string, serverGroupName string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetCurrentSnapshotWithResponse request
	GetCurrentSnapshotWithResponse(ctx context.Context, application string, account string, reqEditors ...RequestEditorFn) (*GetCurrentSnapshotResponse, error)

	// GetSnapshotHistoryWithResponse request
	GetSnapshotHistoryWithResponse(ctx context.Context, application string, account string, params *GetSnapshotHistoryParams, reqEditors ...RequestEditorFn) (*GetSnapshotHistoryResponse, error)

	// GetStrategyConfigsForApplicationWithResponse request
	GetStrategyConfigsForApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetStrategyConfigsForApplicationResponse, error)

	// GetStrategyConfigWithResponse request
	GetStrategyConfigWithResponse(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*GetStrategyConfigResponse, error)

	// GetTasksWithResponse request
	GetTasksWithResponse(ctx context.Context, application string, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// Task1WithBodyWithResponse request with any body
	Task1WithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Task1Response, error)

	Task1WithResponse(ctx context.Context, application string, body Task1JSONRequestBody, reqEditors ...RequestEditorFn) (*Task1Response, error)

	// GetTask1WithResponse request
	GetTask1WithResponse(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*GetTask1Response, error)

	// CancelTask1WithResponse request
	CancelTask1WithResponse(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*CancelTask1Response, error)

	// GetTaskDetails1WithResponse request
	GetTaskDetails1WithResponse(ctx context.Context, application string, id string, taskDetailsId string, params *GetTaskDetails1Params, reqEditors ...RequestEditorFn) (*GetTaskDetails1Response, error)

	// Names1WithResponse request
	Names1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Names1Response, error)

	// ArtifactNamesWithResponse request
	ArtifactNamesWithResponse(ctx context.Context, accountName string, params *ArtifactNamesParams, reqEditors ...RequestEditorFn) (*ArtifactNamesResponse, error)

	// ArtifactVersionsWithResponse request
	ArtifactVersionsWithResponse(ctx context.Context, accountName string, params *ArtifactVersionsParams, reqEditors ...RequestEditorFn) (*ArtifactVersionsResponse, error)

	// GetStoredArtifactWithResponse request
	GetStoredArtifactWithResponse(ctx context.Context, application string, hash string, reqEditors ...RequestEditorFn) (*GetStoredArtifactResponse, error)

	// All11WithResponse request
	All11WithResponse(ctx context.Context, params *All11Params, reqEditors ...RequestEditorFn) (*All11Response, error)

	// FetchWithBodyWithResponse request with any body
	FetchWithBodyWithResponse(ctx context.Context, params *FetchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchResponse, error)

	FetchWithResponse(ctx context.Context, params *FetchParams, body FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchResponse, error)

	// GetVersionsOfArtifactForProviderWithResponse request
	GetVersionsOfArtifactForProviderWithResponse(ctx context.Context, provider string, packageName string, params *GetVersionsOfArtifactForProviderParams, reqEditors ...RequestEditorFn) (*GetVersionsOfArtifactForProviderResponse, error)

	// GetArtifactWithResponse request
	GetArtifactWithResponse(ctx context.Context, provider string, packageName string, version string, reqEditors ...RequestEditorFn) (*GetArtifactResponse, error)

	// DeleteSessionCacheWithResponse request
	DeleteSessionCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionCacheResponse, error)

	// LoggedOutWithResponse request
	LoggedOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoggedOutResponse, error)

	// RawUserWithResponse request
	RawUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RawUserResponse, error)

	// RedirectWithResponse request
	RedirectWithResponse(ctx context.Context, params *RedirectParams, reqEditors ...RequestEditorFn) (*RedirectResponse, error)

	// SyncWithResponse request
	SyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SyncResponse, error)

	// UserWithResponse request
	UserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserResponse, error)

	// LookupLogsWithResponse request
	LookupLogsWithResponse(ctx context.Context, region string, statusId string, reqEditors ...RequestEditorFn) (*LookupLogsResponse, error)

	// BakeOptionsWithResponse request
	BakeOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BakeOptionsResponse, error)

	// BakeOptions1WithResponse request
	BakeOptions1WithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*BakeOptions1Response, error)

	// BatchUpdateWithBodyWithResponse request with any body
	BatchUpdateWithBodyWithResponse(ctx context.Context, params *BatchUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchUpdateResponse, error)

	BatchUpdateWithResponse(ctx context.Context, params *BatchUpdateParams, body BatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchUpdateResponse, error)

	// GetDeploymentMonitorsWithResponse request
	GetDeploymentMonitorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeploymentMonitorsResponse, error)

	// GetExpressionCapabilitiesWithResponse request
	GetExpressionCapabilitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExpressionCapabilitiesResponse, error)

	// GetQuietPeriodStateWithResponse request
	GetQuietPeriodStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQuietPeriodStateResponse, error)

	// All10WithResponse request
	All10WithResponse(ctx context.Context, params *All10Params, reqEditors ...RequestEditorFn) (*All10Response, error)

	// AllByCloudProvider2WithResponse request
	AllByCloudProvider2WithResponse(ctx context.Context, cloudProvider string, params *AllByCloudProvider2Params, reqEditors ...RequestEditorFn) (*AllByCloudProvider2Response, error)

	// FindImages1WithResponse request
	FindImages1WithResponse(ctx context.Context, params *FindImages1Params, reqEditors ...RequestEditorFn) (*FindImages1Response, error)

	// FindTags1WithResponse request
	FindTags1WithResponse(ctx context.Context, params *FindTags1Params, reqEditors ...RequestEditorFn) (*FindTags1Response, error)

	// GetImageDetails1WithResponse request
	GetImageDetails1WithResponse(ctx context.Context, account string, region string, imageId string, params *GetImageDetails1Params, reqEditors ...RequestEditorFn) (*GetImageDetails1Response, error)

	// GetBuilds1WithResponse request
	GetBuilds1WithResponse(ctx context.Context, params *GetBuilds1Params, reqEditors ...RequestEditorFn) (*GetBuilds1Response, error)

	// GetBuildOutputByIdWithResponse request
	GetBuildOutputByIdWithResponse(ctx context.Context, buildId string, reqEditors ...RequestEditorFn) (*GetBuildOutputByIdResponse, error)

	// GetAllDeletedResourcesWithResponse request
	GetAllDeletedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllDeletedResourcesResponse, error)

	// GetAllMarkedResourcesWithResponse request
	GetAllMarkedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllMarkedResourcesResponse, error)

	// GetMarkedResourceWithResponse request
	GetMarkedResourceWithResponse(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*GetMarkedResourceResponse, error)

	// OptOutWithResponse request
	OptOutWithResponse(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*OptOutResponse, error)

	// FindAllWithResponse request
	FindAllWithResponse(ctx context.Context, cloudProvider string, account string, region string, params *FindAllParams, reqEditors ...RequestEditorFn) (*FindAllResponse, error)

	// GetStatisticsWithResponse request
	GetStatisticsWithResponse(ctx context.Context, cloudProvider string, account string, region string, metricName string, params *GetStatisticsParams, reqEditors ...RequestEditorFn) (*GetStatisticsResponse, error)

	// StageExecutionWithResponse request
	StageExecutionWithResponse(ctx context.Context, params *StageExecutionParams, reqEditors ...RequestEditorFn) (*StageExecutionResponse, error)

	// TeamsWithResponse request
	TeamsWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*TeamsResponse, error)

	// PipelinesWithResponse request
	PipelinesWithResponse(ctx context.Context, buildMaster string, team string, reqEditors ...RequestEditorFn) (*PipelinesResponse, error)

	// JobsWithResponse request
	JobsWithResponse(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*JobsResponse, error)

	// ResourcesWithResponse request
	ResourcesWithResponse(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*ResourcesResponse, error)

	// GetAccountsWithResponse request
	GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// UpdateAccountWithBodyWithResponse request with any body
	UpdateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	UpdateAccountWithResponse(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	// GetAccountsByTypeWithResponse request
	GetAccountsByTypeWithResponse(ctx context.Context, accountType string, params *GetAccountsByTypeParams, reqEditors ...RequestEditorFn) (*GetAccountsByTypeResponse, error)

	// DeleteAccountWithResponse request
	DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, account string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// ValidateCronExpressionWithResponse request
	ValidateCronExpressionWithResponse(ctx context.Context, params *ValidateCronExpressionParams, reqEditors ...RequestEditorFn) (*ValidateCronExpressionResponse, error)

	// AllMetricAlarmsWithResponse request
	AllMetricAlarmsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AllMetricAlarmsResponse, error)

	// GetEcsClusterDescriptionsWithResponse request
	GetEcsClusterDescriptionsWithResponse(ctx context.Context, account string, region string, reqEditors ...RequestEditorFn) (*GetEcsClusterDescriptionsResponse, error)

	// All9WithResponse request
	All9WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All9Response, error)

	// All8WithResponse request
	All8WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All8Response, error)

	// All7WithResponse request
	All7WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All7Response, error)

	// Error5WithResponse request
	Error5WithResponse(ctx context.Context, params *Error5Params, reqEditors ...RequestEditorFn) (*Error5Response, error)

	// ErrorWithResponse request
	ErrorWithResponse(ctx context.Context, params *ErrorParams, reqEditors ...RequestEditorFn) (*ErrorResponse, error)

	// Error1WithResponse request
	Error1WithResponse(ctx context.Context, params *Error1Params, reqEditors ...RequestEditorFn) (*Error1Response, error)

	// Error6WithResponse request
	Error6WithResponse(ctx context.Context, params *Error6Params, reqEditors ...RequestEditorFn) (*Error6Response, error)

	// Error4WithResponse request
	Error4WithResponse(ctx context.Context, params *Error4Params, reqEditors ...RequestEditorFn) (*Error4Response, error)

	// Error2WithResponse request
	Error2WithResponse(ctx context.Context, params *Error2Params, reqEditors ...RequestEditorFn) (*Error2Response, error)

	// Error3WithResponse request
	Error3WithResponse(ctx context.Context, params *Error3Params, reqEditors ...RequestEditorFn) (*Error3Response, error)

	// GetLatestExecutionsByConfigIdsWithResponse request
	GetLatestExecutionsByConfigIdsWithResponse(ctx context.Context, params *GetLatestExecutionsByConfigIdsParams, reqEditors ...RequestEditorFn) (*GetLatestExecutionsByConfigIdsResponse, error)

	// Any9WithResponse request
	Any9WithResponse(ctx context.Context, extension string, params *Any9Params, reqEditors ...RequestEditorFn) (*Any9Response, error)

	// Any4WithResponse request
	Any4WithResponse(ctx context.Context, extension string, params *Any4Params, reqEditors ...RequestEditorFn) (*Any4Response, error)

	// Any5WithResponse request
	Any5WithResponse(ctx context.Context, extension string, params *Any5Params, reqEditors ...RequestEditorFn) (*Any5Response, error)

	// Any10WithResponse request
	Any10WithResponse(ctx context.Context, extension string, params *Any10Params, reqEditors ...RequestEditorFn) (*Any10Response, error)

	// Any8WithResponse request
	Any8WithResponse(ctx context.Context, extension string, params *Any8Params, reqEditors ...RequestEditorFn) (*Any8Response, error)

	// Any6WithResponse request
	Any6WithResponse(ctx context.Context, extension string, params *Any6Params, reqEditors ...RequestEditorFn) (*Any6Response, error)

	// Any7WithResponse request
	Any7WithResponse(ctx context.Context, extension string, params *Any7Params, reqEditors ...RequestEditorFn) (*Any7Response, error)

	// All6WithResponse request
	All6WithResponse(ctx context.Context, params *All6Params, reqEditors ...RequestEditorFn) (*All6Response, error)

	// AllByAccount1WithResponse request
	AllByAccount1WithResponse(ctx context.Context, account string, params *AllByAccount1Params, reqEditors ...RequestEditorFn) (*AllByAccount1Response, error)

	// AllByAccountAndRegionWithResponse request
	AllByAccountAndRegionWithResponse(ctx context.Context, account string, region string, params *AllByAccountAndRegionParams, reqEditors ...RequestEditorFn) (*AllByAccountAndRegionResponse, error)

	// GetSecurityGroup1WithResponse request
	GetSecurityGroup1WithResponse(ctx context.Context, account string, region string, name string, params *GetSecurityGroup1Params, reqEditors ...RequestEditorFn) (*GetSecurityGroup1Response, error)

	// FunctionsWithResponse request
	FunctionsWithResponse(ctx context.Context, params *FunctionsParams, reqEditors ...RequestEditorFn) (*FunctionsResponse, error)

	// GetHistoryWithResponse request
	GetHistoryWithResponse(ctx context.Context, name string, params *GetHistoryParams, reqEditors ...RequestEditorFn) (*GetHistoryResponse, error)

	// FindImagesWithResponse request
	FindImagesWithResponse(ctx context.Context, params *FindImagesParams, reqEditors ...RequestEditorFn) (*FindImagesResponse, error)

	// FindTagsWithResponse request
	FindTagsWithResponse(ctx context.Context, params *FindTagsParams, reqEditors ...RequestEditorFn) (*FindTagsResponse, error)

	// GetImageDetailsWithResponse request
	GetImageDetailsWithResponse(ctx context.Context, account string, region string, imageId string, params *GetImageDetailsParams, reqEditors ...RequestEditorFn) (*GetImageDetailsResponse, error)

	// InstanceTypesWithResponse request
	InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InstanceTypesResponse, error)

	// GetInstanceDetailsWithResponse request
	GetInstanceDetailsWithResponse(ctx context.Context, account string, region string, instanceId string, params *GetInstanceDetailsParams, reqEditors ...RequestEditorFn) (*GetInstanceDetailsResponse, error)

	// GetConsoleOutputWithResponse request
	GetConsoleOutputWithResponse(ctx context.Context, account string, region string, instanceId string, params *GetConsoleOutputParams, reqEditors ...RequestEditorFn) (*GetConsoleOutputResponse, error)

	// PreconfiguredWebhooks1WithResponse request
	PreconfiguredWebhooks1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PreconfiguredWebhooks1Response, error)

	// KeyPairsWithResponse request
	KeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KeyPairsResponse, error)

	// GetAllWithResponse request
	GetAllWithResponse(ctx context.Context, params *GetAllParams, reqEditors ...RequestEditorFn) (*GetAllResponse, error)

	// GetLoadBalancerDetailsWithResponse request
	GetLoadBalancerDetailsWithResponse(ctx context.Context, account string, region string, name string, params *GetLoadBalancerDetailsParams, reqEditors ...RequestEditorFn) (*GetLoadBalancerDetailsResponse, error)

	// GetLoadBalancerWithResponse request
	GetLoadBalancerWithResponse(ctx context.Context, name string, params *GetLoadBalancerParams, reqEditors ...RequestEditorFn) (*GetLoadBalancerResponse, error)

	// GetApplicationDetailsWithResponse request
	GetApplicationDetailsWithResponse(ctx context.Context, application string, params *GetApplicationDetailsParams, reqEditors ...RequestEditorFn) (*GetApplicationDetailsResponse, error)

	// DeleteManifestByAppWithResponse request
	DeleteManifestByAppWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*DeleteManifestByAppResponse, error)

	// GetConfigByWithResponse request
	GetConfigByWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetConfigByResponse, error)

	// UpdateConstraintStatusWithBodyWithResponse request with any body
	UpdateConstraintStatusWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConstraintStatusResponse, error)

	UpdateConstraintStatusWithResponse(ctx context.Context, application string, environment string, body UpdateConstraintStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConstraintStatusResponse, error)

	// GetConstraintStateWithResponse request
	GetConstraintStateWithResponse(ctx context.Context, application string, environment string, params *GetConstraintStateParams, reqEditors ...RequestEditorFn) (*GetConstraintStateResponse, error)

	// MarkBadWithBodyWithResponse request with any body
	MarkBadWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkBadResponse, error)

	MarkBadWithResponse(ctx context.Context, application string, body MarkBadJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkBadResponse, error)

	// MarkGoodWithBodyWithResponse request with any body
	MarkGoodWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkGoodResponse, error)

	MarkGoodWithResponse(ctx context.Context, application string, body MarkGoodJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkGoodResponse, error)

	// ResumeApplicationWithResponse request
	ResumeApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*ResumeApplicationResponse, error)

	// PauseApplicationWithResponse request
	PauseApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*PauseApplicationResponse, error)

	// CreatePinWithBodyWithResponse request with any body
	CreatePinWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePinResponse, error)

	CreatePinWithResponse(ctx context.Context, application string, body CreatePinJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePinResponse, error)

	// DeletePinWithResponse request
	DeletePinWithResponse(ctx context.Context, application string, targetEnvironment string, params *DeletePinParams, reqEditors ...RequestEditorFn) (*DeletePinResponse, error)

	// VetoWithBodyWithResponse request with any body
	VetoWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VetoResponse, error)

	VetoWithResponse(ctx context.Context, application string, body VetoJSONRequestBody, reqEditors ...RequestEditorFn) (*VetoResponse, error)

	// DeleteVetoWithResponse request
	DeleteVetoWithResponse(ctx context.Context, application string, targetEnvironment string, reference string, version string, reqEditors ...RequestEditorFn) (*DeleteVetoResponse, error)

	// UpsertManifestWithBodyWithResponse request with any body
	UpsertManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertManifestResponse, error)

	UpsertManifestWithResponse(ctx context.Context, body UpsertManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertManifestResponse, error)

	// DiffManifestWithBodyWithResponse request with any body
	DiffManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffManifestResponse, error)

	DiffManifestWithResponse(ctx context.Context, body DiffManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffManifestResponse, error)

	// SchemaWithResponse request
	SchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SchemaResponse, error)

	// ValidateManifestWithBodyWithResponse request with any body
	ValidateManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateManifestResponse, error)

	ValidateManifestWithResponse(ctx context.Context, body ValidateManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateManifestResponse, error)

	// DeleteManifestWithResponse request
	DeleteManifestWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteManifestResponse, error)

	// GetManifest1WithResponse request
	GetManifest1WithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifest1Response, error)

	// GetManifestYamlWithResponse request
	GetManifestYamlWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifestYamlResponse, error)

	// GetManifestArtifactsWithResponse request
	GetManifestArtifactsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifestArtifactsResponse, error)

	// GetEnvironmentsWithResponse request
	GetEnvironmentsWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetEnvironmentsResponse, error)

	// GraphqlWithBodyWithResponse request with any body
	GraphqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GraphqlResponse, error)

	GraphqlWithResponse(ctx context.Context, body GraphqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GraphqlResponse, error)

	// ProcessNotificationCallback1WithResponse request
	ProcessNotificationCallback1WithResponse(ctx context.Context, source string, params *ProcessNotificationCallback1Params, reqEditors ...RequestEditorFn) (*ProcessNotificationCallback1Response, error)

	// GetAdoptionReportWithResponse request
	GetAdoptionReportWithResponse(ctx context.Context, params *GetAdoptionReportParams, reqEditors ...RequestEditorFn) (*GetAdoptionReportResponse, error)

	// GetOnboardingReportWithResponse request
	GetOnboardingReportWithResponse(ctx context.Context, params *GetOnboardingReportParams, reqEditors ...RequestEditorFn) (*GetOnboardingReportResponse, error)

	// DiffResourceWithBodyWithResponse request with any body
	DiffResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffResourceResponse, error)

	DiffResourceWithResponse(ctx context.Context, body DiffResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffResourceResponse, error)

	// ExportResource1WithResponse request
	ExportResource1WithResponse(ctx context.Context, cloudProvider string, account string, clusterName string, reqEditors ...RequestEditorFn) (*ExportResource1Response, error)

	// ExportResourceWithResponse request
	ExportResourceWithResponse(ctx context.Context, cloudProvider string, account string, pType string, name string, params *ExportResourceParams, reqEditors ...RequestEditorFn) (*ExportResourceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// GetResourceYamlWithResponse request
	GetResourceYamlWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceYamlResponse, error)

	// ResumeResourceWithResponse request
	ResumeResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*ResumeResourceResponse, error)

	// PauseResourceWithResponse request
	PauseResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*PauseResourceResponse, error)

	// GetResourceStatusWithResponse request
	GetResourceStatusWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceStatusResponse, error)

	// OverrideVerificationWithBodyWithResponse request with any body
	OverrideVerificationWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverrideVerificationResponse, error)

	OverrideVerificationWithResponse(ctx context.Context, application string, environment string, body OverrideVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*OverrideVerificationResponse, error)

	// RetryVerificationWithBodyWithResponse request with any body
	RetryVerificationWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetryVerificationResponse, error)

	RetryVerificationWithResponse(ctx context.Context, application string, environment string, body RetryVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*RetryVerificationResponse, error)

	// GetManifestWithResponse request
	GetManifestWithResponse(ctx context.Context, account string, location string, name string, reqEditors ...RequestEditorFn) (*GetManifestResponse, error)

	// All5WithResponse request
	All5WithResponse(ctx context.Context, params *All5Params, reqEditors ...RequestEditorFn) (*All5Response, error)

	// AllByCloudProvider1WithResponse request
	AllByCloudProvider1WithResponse(ctx context.Context, cloudProvider string, params *AllByCloudProvider1Params, reqEditors ...RequestEditorFn) (*AllByCloudProvider1Response, error)

	// NamesWithResponse request
	NamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NamesResponse, error)

	// ProcessNotificationCallbackWithResponse request
	ProcessNotificationCallbackWithResponse(ctx context.Context, source string, params *ProcessNotificationCallbackParams, reqEditors ...RequestEditorFn) (*ProcessNotificationCallbackResponse, error)

	// GetNotificationTypeMetadataWithResponse request
	GetNotificationTypeMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNotificationTypeMetadataResponse, error)

	// DeletePipeline2WithResponse request
	DeletePipeline2WithResponse(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*DeletePipeline2Response, error)

	// GetNotificationConfigWithResponse request
	GetNotificationConfigWithResponse(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*GetNotificationConfigResponse, error)

	// SaveNotificationConfigWithBodyWithResponse request with any body
	SaveNotificationConfigWithBodyWithResponse(ctx context.Context, pType string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveNotificationConfigResponse, error)

	SaveNotificationConfigWithResponse(ctx context.Context, pType string, application string, body SaveNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveNotificationConfigResponse, error)

	// GetAllPipelineConfigsWithResponse request
	GetAllPipelineConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllPipelineConfigsResponse, error)

	// ConvertPipelineConfigToPipelineTemplateWithResponse request
	ConvertPipelineConfigToPipelineTemplateWithResponse(ctx context.Context, pipelineConfigId string, reqEditors ...RequestEditorFn) (*ConvertPipelineConfigToPipelineTemplateResponse, error)

	// GetPipelineConfigHistory1WithResponse request
	GetPipelineConfigHistory1WithResponse(ctx context.Context, pipelineConfigId string, params *GetPipelineConfigHistory1Params, reqEditors ...RequestEditorFn) (*GetPipelineConfigHistory1Response, error)

	// List3WithResponse request
	List3WithResponse(ctx context.Context, params *List3Params, reqEditors ...RequestEditorFn) (*List3Response, error)

	// Create1WithBodyWithResponse request with any body
	Create1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create1Response, error)

	Create1WithResponse(ctx context.Context, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*Create1Response, error)

	// ResolveTemplatesWithResponse request
	ResolveTemplatesWithResponse(ctx context.Context, params *ResolveTemplatesParams, reqEditors ...RequestEditorFn) (*ResolveTemplatesResponse, error)

	// Delete2WithResponse request
	Delete2WithResponse(ctx context.Context, id string, params *Delete2Params, reqEditors ...RequestEditorFn) (*Delete2Response, error)

	// Get3WithResponse request
	Get3WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Get3Response, error)

	// Update1WithBodyWithResponse request with any body
	Update1WithBodyWithResponse(ctx context.Context, id string, params *Update1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update1Response, error)

	Update1WithResponse(ctx context.Context, id string, params *Update1Params, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*Update1Response, error)

	// ListPipelineTemplateDependents1WithResponse request
	ListPipelineTemplateDependents1WithResponse(ctx context.Context, id string, params *ListPipelineTemplateDependents1Params, reqEditors ...RequestEditorFn) (*ListPipelineTemplateDependents1Response, error)

	// SavePipelineWithBodyWithResponse request with any body
	SavePipelineWithBodyWithResponse(ctx context.Context, params *SavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavePipelineResponse, error)

	SavePipelineWithResponse(ctx context.Context, params *SavePipelineParams, body SavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*SavePipelineResponse, error)

	// BulksavePipelineWithBodyWithResponse request with any body
	BulksavePipelineWithBodyWithResponse(ctx context.Context, params *BulksavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulksavePipelineResponse, error)

	BulksavePipelineWithResponse(ctx context.Context, params *BulksavePipelineParams, body BulksavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*BulksavePipelineResponse, error)

	// RenamePipelineWithBodyWithResponse request with any body
	RenamePipelineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenamePipelineResponse, error)

	RenamePipelineWithResponse(ctx context.Context, body RenamePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*RenamePipelineResponse, error)

	// StartWithBodyWithResponse request with any body
	StartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartResponse, error)

	StartWithResponse(ctx context.Context, body StartJSONRequestBody, reqEditors ...RequestEditorFn) (*StartResponse, error)

	// InvokePipelineConfigViaEchoWithBodyWithResponse request with any body
	InvokePipelineConfigViaEchoWithBodyWithResponse(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfigViaEchoResponse, error)

	InvokePipelineConfigViaEchoWithResponse(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigViaEchoJSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfigViaEchoResponse, error)

	// InvokePipelineConfigWithBodyWithResponse request with any body
	InvokePipelineConfigWithBodyWithResponse(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfigResponse, error)

	InvokePipelineConfigWithResponse(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfigResponse, error)

	// DeletePipeline1WithResponse request
	DeletePipeline1WithResponse(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*DeletePipeline1Response, error)

	// DeletePipelineWithResponse request
	DeletePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error)

	// GetPipelineWithResponse request
	GetPipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error)

	// UpdatePipelineWithBodyWithResponse request with any body
	UpdatePipelineWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error)

	UpdatePipelineWithResponse(ctx context.Context, id string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error)

	// CancelPipelineWithResponse request
	CancelPipelineWithResponse(ctx context.Context, id string, params *CancelPipelineParams, reqEditors ...RequestEditorFn) (*CancelPipelineResponse, error)

	// EvaluateExpressionForExecutionWithResponse request
	EvaluateExpressionForExecutionWithResponse(ctx context.Context, id string, params *EvaluateExpressionForExecutionParams, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionResponse, error)

	// EvaluateExpressionForExecutionViaPOST1WithBodyWithResponse request with any body
	EvaluateExpressionForExecutionViaPOST1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error)

	EvaluateExpressionForExecutionViaPOST1WithResponse(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error)

	EvaluateExpressionForExecutionViaPOST1WithTextBodyWithResponse(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1TextRequestBody, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error)

	// EvaluateVariablesWithBodyWithResponse request with any body
	EvaluateVariablesWithBodyWithResponse(ctx context.Context, id string, params *EvaluateVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateVariablesResponse, error)

	EvaluateVariablesWithResponse(ctx context.Context, id string, params *EvaluateVariablesParams, body EvaluateVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateVariablesResponse, error)

	// PausePipelineWithResponse request
	PausePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PausePipelineResponse, error)

	// ResumePipelineWithResponse request
	ResumePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ResumePipelineResponse, error)

	// UpdateStageWithBodyWithResponse request with any body
	UpdateStageWithBodyWithResponse(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStageResponse, error)

	UpdateStageWithResponse(ctx context.Context, id string, stageId string, body UpdateStageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStageResponse, error)

	// RestartStageWithBodyWithResponse request with any body
	RestartStageWithBodyWithResponse(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartStageResponse, error)

	RestartStageWithResponse(ctx context.Context, id string, stageId string, body RestartStageJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartStageResponse, error)

	// EvaluateExpressionForExecutionAtStageWithResponse request
	EvaluateExpressionForExecutionAtStageWithResponse(ctx context.Context, id string, stageId string, params *EvaluateExpressionForExecutionAtStageParams, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionAtStageResponse, error)

	// GetPluginManifestWithResponse request
	GetPluginManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginManifestResponse, error)

	// GetPluginAssetWithResponse request
	GetPluginAssetWithResponse(ctx context.Context, pluginId string, pluginVersion string, asset string, reqEditors ...RequestEditorFn) (*GetPluginAssetResponse, error)

	// GetAllPluginInfoWithResponse request
	GetAllPluginInfoWithResponse(ctx context.Context, params *GetAllPluginInfoParams, reqEditors ...RequestEditorFn) (*GetAllPluginInfoResponse, error)

	// PersistPluginInfoWithBodyWithResponse request with any body
	PersistPluginInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PersistPluginInfoResponse, error)

	PersistPluginInfoWithResponse(ctx context.Context, body PersistPluginInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PersistPluginInfoResponse, error)

	// PersistPluginInfo1WithBodyWithResponse request with any body
	PersistPluginInfo1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PersistPluginInfo1Response, error)

	PersistPluginInfo1WithResponse(ctx context.Context, body PersistPluginInfo1JSONRequestBody, reqEditors ...RequestEditorFn) (*PersistPluginInfo1Response, error)

	// DeletePluginInfoWithResponse request
	DeletePluginInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePluginInfoResponse, error)

	// GetInstalledPluginsWithResponse request
	GetInstalledPluginsWithResponse(ctx context.Context, params *GetInstalledPluginsParams, reqEditors ...RequestEditorFn) (*GetInstalledPluginsResponse, error)

	// PublishPluginWithBodyWithResponse request with any body
	PublishPluginWithBodyWithResponse(ctx context.Context, pluginId string, pluginVersion string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishPluginResponse, error)

	// All4WithResponse request
	All4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All4Response, error)

	// Get2WithResponse request
	Get2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Get2Response, error)

	// GetClustersWithResponse request
	GetClustersWithResponse(ctx context.Context, id string, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// AllPipelinesForProjectWithResponse request
	AllPipelinesForProjectWithResponse(ctx context.Context, id string, params *AllPipelinesForProjectParams, reqEditors ...RequestEditorFn) (*AllPipelinesForProjectResponse, error)

	// List2WithResponse request
	List2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List2Response, error)

	// Any3WithResponse request
	Any3WithResponse(ctx context.Context, proxy string, params *Any3Params, reqEditors ...RequestEditorFn) (*Any3Response, error)

	// AnyWithResponse request
	AnyWithResponse(ctx context.Context, proxy string, params *AnyParams, reqEditors ...RequestEditorFn) (*AnyResponse, error)

	// Any1WithResponse request
	Any1WithResponse(ctx context.Context, proxy string, params *Any1Params, reqEditors ...RequestEditorFn) (*Any1Response, error)

	// Any2WithResponse request
	Any2WithResponse(ctx context.Context, proxy string, params *Any2Params, reqEditors ...RequestEditorFn) (*Any2Response, error)

	// All3WithResponse request
	All3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All3Response, error)

	// Api1WithResponse request
	Api1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Api1Response, error)

	// All2WithResponse request
	All2WithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*All2Response, error)

	// SearchWithResponse request
	SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error)

	// All1WithResponse request
	All1WithResponse(ctx context.Context, params *All1Params, reqEditors ...RequestEditorFn) (*All1Response, error)

	// AllByAccountWithResponse request
	AllByAccountWithResponse(ctx context.Context, account string, params *AllByAccountParams, reqEditors ...RequestEditorFn) (*AllByAccountResponse, error)

	// GetSecurityGroupWithResponse request
	GetSecurityGroupWithResponse(ctx context.Context, account string, region string, name string, params *GetSecurityGroupParams, reqEditors ...RequestEditorFn) (*GetSecurityGroupResponse, error)

	// GetServerGroupsWithResponse request
	GetServerGroupsWithResponse(ctx context.Context, params *GetServerGroupsParams, reqEditors ...RequestEditorFn) (*GetServerGroupsResponse, error)

	// GetServiceInstanceWithResponse request
	GetServiceInstanceWithResponse(ctx context.Context, account string, params *GetServiceInstanceParams, reqEditors ...RequestEditorFn) (*GetServiceInstanceResponse, error)

	// ListServicesWithResponse request
	ListServicesWithResponse(ctx context.Context, account string, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// AllWithResponse request
	AllWithResponse(ctx context.Context, params *AllParams, reqEditors ...RequestEditorFn) (*AllResponse, error)

	// SaveStrategyWithBodyWithResponse request with any body
	SaveStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveStrategyResponse, error)

	SaveStrategyWithResponse(ctx context.Context, body SaveStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveStrategyResponse, error)

	// RenameStrategyWithBodyWithResponse request with any body
	RenameStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenameStrategyResponse, error)

	RenameStrategyWithResponse(ctx context.Context, body RenameStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*RenameStrategyResponse, error)

	// DeleteStrategyWithResponse request
	DeleteStrategyWithResponse(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*DeleteStrategyResponse, error)

	// UpdateStrategyWithBodyWithResponse request with any body
	UpdateStrategyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error)

	UpdateStrategyWithResponse(ctx context.Context, id string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error)

	// GetAllStrategyConfigsWithResponse request
	GetAllStrategyConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStrategyConfigsResponse, error)

	// GetPipelineConfigHistoryWithResponse request
	GetPipelineConfigHistoryWithResponse(ctx context.Context, strategyConfigId string, params *GetPipelineConfigHistoryParams, reqEditors ...RequestEditorFn) (*GetPipelineConfigHistoryResponse, error)

	// SubnetsWithResponse request
	SubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubnetsResponse, error)

	// AllByCloudProviderWithResponse request
	AllByCloudProviderWithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*AllByCloudProviderResponse, error)

	// List1WithResponse request
	List1WithResponse(ctx context.Context, params *List1Params, reqEditors ...RequestEditorFn) (*List1Response, error)

	// PostWithBodyWithResponse request with any body
	PostWithBodyWithResponse(ctx context.Context, params *PostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error)

	PostWithResponse(ctx context.Context, params *PostParams, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error)

	// Get1WithResponse request
	Get1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1Response, error)

	// Delete1WithResponse request
	Delete1WithResponse(ctx context.Context, id string, tag string, params *Delete1Params, reqEditors ...RequestEditorFn) (*Delete1Response, error)

	// TaskWithBodyWithResponse request with any body
	TaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TaskResponse, error)

	TaskWithResponse(ctx context.Context, body TaskJSONRequestBody, reqEditors ...RequestEditorFn) (*TaskResponse, error)

	// CancelTasksWithResponse request
	CancelTasksWithResponse(ctx context.Context, params *CancelTasksParams, reqEditors ...RequestEditorFn) (*CancelTasksResponse, error)

	// DeleteTaskWithResponse request
	DeleteTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error)

	// GetTaskWithResponse request
	GetTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// CancelTaskWithResponse request
	CancelTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelTaskResponse, error)

	// GetTaskDetailsWithResponse request
	GetTaskDetailsWithResponse(ctx context.Context, id string, taskDetailsId string, params *GetTaskDetailsParams, reqEditors ...RequestEditorFn) (*GetTaskDetailsResponse, error)

	// ApiWithResponse request
	ApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiResponse, error)

	// AsyncApiWithResponse request
	AsyncApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AsyncApiResponse, error)

	// GetAdhocData5WithResponse request
	GetAdhocData5WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData5Params, reqEditors ...RequestEditorFn) (*GetAdhocData5Response, error)

	// GetAdhocDataWithResponse request
	GetAdhocDataWithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocDataParams, reqEditors ...RequestEditorFn) (*GetAdhocDataResponse, error)

	// GetAdhocData1WithResponse request
	GetAdhocData1WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData1Params, reqEditors ...RequestEditorFn) (*GetAdhocData1Response, error)

	// GetAdhocData6WithResponse request
	GetAdhocData6WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData6Params, reqEditors ...RequestEditorFn) (*GetAdhocData6Response, error)

	// GetAdhocData4WithResponse request
	GetAdhocData4WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData4Params, reqEditors ...RequestEditorFn) (*GetAdhocData4Response, error)

	// GetAdhocData2WithResponse request
	GetAdhocData2WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData2Params, reqEditors ...RequestEditorFn) (*GetAdhocData2Response, error)

	// GetAdhocData3WithResponse request
	GetAdhocData3WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData3Params, reqEditors ...RequestEditorFn) (*GetAdhocData3Response, error)

	// GetStaticDataWithResponse request
	GetStaticDataWithResponse(ctx context.Context, id string, params *GetStaticDataParams, reqEditors ...RequestEditorFn) (*GetStaticDataResponse, error)

	// GetBuildMastersWithResponse request
	GetBuildMastersWithResponse(ctx context.Context, params *GetBuildMastersParams, reqEditors ...RequestEditorFn) (*GetBuildMastersResponse, error)

	// GetBuildWithResponse request
	GetBuildWithResponse(ctx context.Context, buildMaster string, number string, reqEditors ...RequestEditorFn) (*GetBuildResponse, error)

	// GetBuildsWithResponse request
	GetBuildsWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetBuildsResponse, error)

	// GetJobsForBuildMasterWithResponse request
	GetJobsForBuildMasterWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetJobsForBuildMasterResponse, error)

	// GetJobConfigWithResponse request
	GetJobConfigWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetJobConfigResponse, error)

	// InitiateCanaryWithConfigWithBodyWithResponse request with any body
	InitiateCanaryWithConfigWithBodyWithResponse(ctx context.Context, params *InitiateCanaryWithConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitiateCanaryWithConfigResponse, error)

	InitiateCanaryWithConfigWithResponse(ctx context.Context, params *InitiateCanaryWithConfigParams, body InitiateCanaryWithConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*InitiateCanaryWithConfigResponse, error)

	// InitiateCanaryWithBodyWithResponse request with any body
	InitiateCanaryWithBodyWithResponse(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitiateCanaryResponse, error)

	InitiateCanaryWithResponse(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, body InitiateCanaryJSONRequestBody, reqEditors ...RequestEditorFn) (*InitiateCanaryResponse, error)

	// GetCanaryResult1WithResponse request
	GetCanaryResult1WithResponse(ctx context.Context, canaryConfigId string, canaryExecutionId string, params *GetCanaryResult1Params, reqEditors ...RequestEditorFn) (*GetCanaryResult1Response, error)

	// GetCanaryResultWithResponse request
	GetCanaryResultWithResponse(ctx context.Context, canaryExecutionId string, params *GetCanaryResultParams, reqEditors ...RequestEditorFn) (*GetCanaryResultResponse, error)

	// ListCredentialsWithResponse request
	ListCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCredentialsResponse, error)

	// ListJudgesWithResponse request
	ListJudgesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJudgesResponse, error)

	// ListMetricsServiceMetadataWithResponse request
	ListMetricsServiceMetadataWithResponse(ctx context.Context, params *ListMetricsServiceMetadataParams, reqEditors ...RequestEditorFn) (*ListMetricsServiceMetadataResponse, error)

	// GetMetricSetPairListWithResponse request
	GetMetricSetPairListWithResponse(ctx context.Context, metricSetPairListId string, params *GetMetricSetPairListParams, reqEditors ...RequestEditorFn) (*GetMetricSetPairListResponse, error)

	// GetCanaryResultsByApplicationWithResponse request
	GetCanaryResultsByApplicationWithResponse(ctx context.Context, application string, params *GetCanaryResultsByApplicationParams, reqEditors ...RequestEditorFn) (*GetCanaryResultsByApplicationResponse, error)

	// GetCanaryConfigsWithResponse request
	GetCanaryConfigsWithResponse(ctx context.Context, params *GetCanaryConfigsParams, reqEditors ...RequestEditorFn) (*GetCanaryConfigsResponse, error)

	// CreateCanaryConfigWithBodyWithResponse request with any body
	CreateCanaryConfigWithBodyWithResponse(ctx context.Context, params *CreateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCanaryConfigResponse, error)

	CreateCanaryConfigWithResponse(ctx context.Context, params *CreateCanaryConfigParams, body CreateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCanaryConfigResponse, error)

	// DeleteCanaryConfigWithResponse request
	DeleteCanaryConfigWithResponse(ctx context.Context, id string, params *DeleteCanaryConfigParams, reqEditors ...RequestEditorFn) (*DeleteCanaryConfigResponse, error)

	// GetCanaryConfigWithResponse request
	GetCanaryConfigWithResponse(ctx context.Context, id string, params *GetCanaryConfigParams, reqEditors ...RequestEditorFn) (*GetCanaryConfigResponse, error)

	// UpdateCanaryConfigWithBodyWithResponse request with any body
	UpdateCanaryConfigWithBodyWithResponse(ctx context.Context, id string, params *UpdateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCanaryConfigResponse, error)

	UpdateCanaryConfigWithResponse(ctx context.Context, id string, params *UpdateCanaryConfigParams, body UpdateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCanaryConfigResponse, error)

	// ListWithResponse request
	ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// CreateWithBodyWithResponse request with any body
	CreateWithBodyWithResponse(ctx context.Context, params *CreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	CreateWithResponse(ctx context.Context, params *CreateParams, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// PlanWithBodyWithResponse request with any body
	PlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanResponse, error)

	PlanWithResponse(ctx context.Context, body PlanJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanResponse, error)

	// UpdateWithBodyWithResponse request with any body
	UpdateWithBodyWithResponse(ctx context.Context, id string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, id string, params *UpdateParams, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// ListVersionsWithResponse request
	ListVersionsWithResponse(ctx context.Context, params *ListVersionsParams, reqEditors ...RequestEditorFn) (*ListVersionsResponse, error)

	// DeleteWithResponse request
	DeleteWithResponse(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// GetWithResponse request
	GetWithResponse(ctx context.Context, id string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// ListPipelineTemplateDependentsWithResponse request
	ListPipelineTemplateDependentsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListPipelineTemplateDependentsResponse, error)

	// V3GetBuildMastersWithResponse request
	V3GetBuildMastersWithResponse(ctx context.Context, params *V3GetBuildMastersParams, reqEditors ...RequestEditorFn) (*V3GetBuildMastersResponse, error)

	// V3GetBuildWithResponse request
	V3GetBuildWithResponse(ctx context.Context, buildMaster string, number string, params *V3GetBuildParams, reqEditors ...RequestEditorFn) (*V3GetBuildResponse, error)

	// V3GetBuildsWithResponse request
	V3GetBuildsWithResponse(ctx context.Context, buildMaster string, params *V3GetBuildsParams, reqEditors ...RequestEditorFn) (*V3GetBuildsResponse, error)

	// V3GetJobConfigWithResponse request
	V3GetJobConfigWithResponse(ctx context.Context, buildMaster string, params *V3GetJobConfigParams, reqEditors ...RequestEditorFn) (*V3GetJobConfigResponse, error)

	// V3GetJobsForBuildMasterWithResponse request
	V3GetJobsForBuildMasterWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*V3GetJobsForBuildMasterResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// VpcsWithResponse request
	VpcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VpcsResponse, error)

	// Webhooks1WithBodyWithResponse request with any body
	Webhooks1WithBodyWithResponse(ctx context.Context, source string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Webhooks1Response, error)

	Webhooks1WithResponse(ctx context.Context, source string, body Webhooks1JSONRequestBody, reqEditors ...RequestEditorFn) (*Webhooks1Response, error)

	// PreconfiguredWebhooksWithResponse request
	PreconfiguredWebhooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PreconfiguredWebhooksResponse, error)

	// WebhooksWithResponse request
	WebhooksWithResponse(ctx context.Context, pType string, source string, params *WebhooksParams, reqEditors ...RequestEditorFn) (*WebhooksResponse, error)
}

type Root5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Root1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Root6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Root4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Root2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Root3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Root3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Root3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReorderPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReorderPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReorderPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReorderPipelineStrategiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReorderPipelineStrategiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReorderPipelineStrategiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroupsForApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroupsForApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroupsForApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroupDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroupDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroupDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusters1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusters1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusters1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusters2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusters2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusters2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusters3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusters3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusters3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroups1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroups1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroups1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroups2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroups2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroups2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScalingActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScalingActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScalingActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetServerGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTargetServerGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetServerGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterLoadBalancersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusterLoadBalancersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterLoadBalancersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForPipelineExecutionsByTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchForPipelineExecutionsByTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForPipelineExecutionsByTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApplicationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationLoadBalancersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApplicationLoadBalancersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationLoadBalancersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineConfigsForApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineConfigsForApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineConfigsForApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvokePipelineConfig1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InvokePipelineConfig1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvokePipelineConfig1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPipeline1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelPipeline1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPipeline1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationRawResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApplicationRawResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationRawResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroupManagersForApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroupManagersForApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroupManagersForApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCurrentSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSnapshotHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStrategyConfigsForApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStrategyConfigsForApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStrategyConfigsForApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStrategyConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStrategyConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStrategyConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Task1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Task1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Task1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTask1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTask1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTask1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelTask1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelTask1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelTask1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskDetails1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaskDetails1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskDetails1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Names1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Names1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Names1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArtifactNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArtifactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoredArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStoredArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoredArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All11Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionsOfArtifactForProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionsOfArtifactForProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionsOfArtifactForProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSessionCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoggedOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoggedOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoggedOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RawUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RawUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RawUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LookupLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LookupLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LookupLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BakeOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BakeOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BakeOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BakeOptions1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BakeOptions1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BakeOptions1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentMonitorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeploymentMonitorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentMonitorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpressionCapabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExpressionCapabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpressionCapabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQuietPeriodStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetQuietPeriodStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQuietPeriodStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All10Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByCloudProvider2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByCloudProvider2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByCloudProvider2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindImages1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindImages1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindImages1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindTags1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindTags1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindTags1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageDetails1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetImageDetails1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageDetails1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuilds1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBuilds1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuilds1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildOutputByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBuildOutputByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildOutputByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllDeletedResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAllDeletedResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllDeletedResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMarkedResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAllMarkedResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMarkedResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarkedResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMarkedResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarkedResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r OptOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StageExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StageExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StageExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsByTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccountsByTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsByTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateCronExpressionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ValidateCronExpressionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateCronExpressionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllMetricAlarmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllMetricAlarmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllMetricAlarmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEcsClusterDescriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEcsClusterDescriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEcsClusterDescriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All9Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All8Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All7Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Error3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Error3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Error3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestExecutionsByConfigIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLatestExecutionsByConfigIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestExecutionsByConfigIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any9Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any10Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any8Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any7Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByAccount1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByAccount1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByAccount1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByAccountAndRegionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByAccountAndRegionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByAccountAndRegionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecurityGroup1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSecurityGroup1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecurityGroup1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetImageDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInstanceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleOutputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConsoleOutputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleOutputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreconfiguredWebhooks1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PreconfiguredWebhooks1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreconfiguredWebhooks1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyPairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KeyPairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyPairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoadBalancerDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoadBalancerDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoadBalancerDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApplicationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteManifestByAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteManifestByAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteManifestByAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConfigByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConstraintStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateConstraintStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConstraintStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConstraintStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConstraintStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConstraintStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkBadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkBadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkBadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkGoodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkGoodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkGoodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumeApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VetoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VetoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VetoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVetoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVetoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVetoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryConfig
}

// Status returns HTTPResponse.Status
func (r UpsertManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiffManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DiffManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiffManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
	YAML200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r SchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
	YAML200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ValidateManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManifest1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetManifest1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManifest1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManifestYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *DeliveryConfig
}

// Status returns HTTPResponse.Status
func (r GetManifestYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManifestYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManifestArtifactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetManifestArtifactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManifestArtifactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GraphqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessNotificationCallback1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ProcessNotificationCallback1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessNotificationCallback1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdoptionReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdoptionReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdoptionReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOnboardingReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOnboardingReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOnboardingReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiffResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DiffResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiffResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportResource1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportResource1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportResource1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *Resource
}

// Status returns HTTPResponse.Status
func (r GetResourceYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumeResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverrideVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OverrideVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverrideVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetryVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RetryVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetryVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByCloudProvider1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByCloudProvider1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByCloudProvider1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessNotificationCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ProcessNotificationCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessNotificationCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationTypeMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNotificationTypeMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationTypeMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipeline2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePipeline2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipeline2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNotificationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SaveNotificationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SaveNotificationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SaveNotificationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPipelineConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllPipelineConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPipelineConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertPipelineConfigToPipelineTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ConvertPipelineConfigToPipelineTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertPipelineConfigToPipelineTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineConfigHistory1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineConfigHistory1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineConfigHistory1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Update1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineTemplateDependents1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPipelineTemplateDependents1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineTemplateDependents1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SavePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulksavePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BulksavePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulksavePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenamePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RenamePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenamePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvokePipelineConfigViaEchoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InvokePipelineConfigViaEchoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvokePipelineConfigViaEchoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvokePipelineConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InvokePipelineConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvokePipelineConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipeline1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePipeline1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipeline1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateExpressionForExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateExpressionForExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateExpressionForExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateExpressionForExecutionViaPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateExpressionForExecutionViaPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateExpressionForExecutionViaPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PausePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PausePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PausePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestartStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateExpressionForExecutionAtStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateExpressionForExecutionAtStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateExpressionForExecutionAtStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPluginInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllPluginInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPluginInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PersistPluginInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PersistPluginInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PersistPluginInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PersistPluginInfo1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PersistPluginInfo1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PersistPluginInfo1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePluginInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePluginInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePluginInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstalledPluginsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInstalledPluginsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstalledPluginsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllPipelinesForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllPipelinesForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllPipelinesForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AnyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Any2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Any2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Any2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Api1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Api1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Api1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type All1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r All1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r All1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SaveStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SaveStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SaveStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenameStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RenameStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenameStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStrategyConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllStrategyConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStrategyConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineConfigHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineConfigHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineConfigHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllByCloudProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllByCloudProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllByCloudProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaskDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AsyncApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AsyncApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AsyncApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdhocData3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdhocData3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdhocData3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildMastersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBuildMastersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildMastersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsForBuildMasterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobsForBuildMasterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsForBuildMasterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitiateCanaryWithConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InitiateCanaryWithConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitiateCanaryWithConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitiateCanaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InitiateCanaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitiateCanaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCanaryResult1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCanaryResult1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCanaryResult1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCanaryResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCanaryResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCanaryResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJudgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListJudgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJudgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsServiceMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListMetricsServiceMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsServiceMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricSetPairListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetricSetPairListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricSetPairListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCanaryResultsByApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCanaryResultsByApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCanaryResultsByApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCanaryConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCanaryConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCanaryConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCanaryConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCanaryConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCanaryConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCanaryConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCanaryConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCanaryConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCanaryConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCanaryConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCanaryConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCanaryConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCanaryConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCanaryConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineTemplateDependentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPipelineTemplateDependentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineTemplateDependentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V3GetBuildMastersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V3GetBuildMastersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V3GetBuildMastersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V3GetBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V3GetBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V3GetBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V3GetBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V3GetBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V3GetBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V3GetJobConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V3GetJobConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V3GetJobConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V3GetJobsForBuildMasterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V3GetJobsForBuildMasterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V3GetJobsForBuildMasterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VpcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VpcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VpcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Webhooks1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Webhooks1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Webhooks1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreconfiguredWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PreconfiguredWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreconfiguredWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Root5WithResponse request returning *Root5Response
func (c *ClientWithResponses) Root5WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root5Response, error) {
	rsp, err := c.Root5(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot5Response(rsp)
}

// RootWithResponse request returning *RootResponse
func (c *ClientWithResponses) RootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RootResponse, error) {
	rsp, err := c.Root(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRootResponse(rsp)
}

// Root1WithResponse request returning *Root1Response
func (c *ClientWithResponses) Root1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root1Response, error) {
	rsp, err := c.Root1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot1Response(rsp)
}

// Root6WithResponse request returning *Root6Response
func (c *ClientWithResponses) Root6WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root6Response, error) {
	rsp, err := c.Root6(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot6Response(rsp)
}

// Root4WithResponse request returning *Root4Response
func (c *ClientWithResponses) Root4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root4Response, error) {
	rsp, err := c.Root4(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot4Response(rsp)
}

// Root2WithResponse request returning *Root2Response
func (c *ClientWithResponses) Root2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root2Response, error) {
	rsp, err := c.Root2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot2Response(rsp)
}

// Root3WithResponse request returning *Root3Response
func (c *ClientWithResponses) Root3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Root3Response, error) {
	rsp, err := c.Root3(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoot3Response(rsp)
}

// ReorderPipelinesWithBodyWithResponse request with arbitrary body returning *ReorderPipelinesResponse
func (c *ClientWithResponses) ReorderPipelinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReorderPipelinesResponse, error) {
	rsp, err := c.ReorderPipelinesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReorderPipelinesResponse(rsp)
}

func (c *ClientWithResponses) ReorderPipelinesWithResponse(ctx context.Context, body ReorderPipelinesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReorderPipelinesResponse, error) {
	rsp, err := c.ReorderPipelines(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReorderPipelinesResponse(rsp)
}

// ReorderPipelineStrategiesWithBodyWithResponse request with arbitrary body returning *ReorderPipelineStrategiesResponse
func (c *ClientWithResponses) ReorderPipelineStrategiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReorderPipelineStrategiesResponse, error) {
	rsp, err := c.ReorderPipelineStrategiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReorderPipelineStrategiesResponse(rsp)
}

func (c *ClientWithResponses) ReorderPipelineStrategiesWithResponse(ctx context.Context, body ReorderPipelineStrategiesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReorderPipelineStrategiesResponse, error) {
	rsp, err := c.ReorderPipelineStrategies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReorderPipelineStrategiesResponse(rsp)
}

// GetAllApplicationsWithResponse request returning *GetAllApplicationsResponse
func (c *ClientWithResponses) GetAllApplicationsWithResponse(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*GetAllApplicationsResponse, error) {
	rsp, err := c.GetAllApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllApplicationsResponse(rsp)
}

// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, applicationName string, account string, region string, name string, params *GetJobParams, reqEditors ...RequestEditorFn) (*GetJobResponse, error) {
	rsp, err := c.GetJob(ctx, applicationName, account, region, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobResponse(rsp)
}

// GetServerGroupsForApplicationWithResponse request returning *GetServerGroupsForApplicationResponse
func (c *ClientWithResponses) GetServerGroupsForApplicationWithResponse(ctx context.Context, applicationName string, params *GetServerGroupsForApplicationParams, reqEditors ...RequestEditorFn) (*GetServerGroupsForApplicationResponse, error) {
	rsp, err := c.GetServerGroupsForApplication(ctx, applicationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroupsForApplicationResponse(rsp)
}

// GetServerGroupDetailsWithResponse request returning *GetServerGroupDetailsResponse
func (c *ClientWithResponses) GetServerGroupDetailsWithResponse(ctx context.Context, applicationName string, account string, region string, serverGroupName string, params *GetServerGroupDetailsParams, reqEditors ...RequestEditorFn) (*GetServerGroupDetailsResponse, error) {
	rsp, err := c.GetServerGroupDetails(ctx, applicationName, account, region, serverGroupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroupDetailsResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, application string, params *GetApplicationParams, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// GetClusters1WithResponse request returning *GetClusters1Response
func (c *ClientWithResponses) GetClusters1WithResponse(ctx context.Context, application string, params *GetClusters1Params, reqEditors ...RequestEditorFn) (*GetClusters1Response, error) {
	rsp, err := c.GetClusters1(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusters1Response(rsp)
}

// GetClusters2WithResponse request returning *GetClusters2Response
func (c *ClientWithResponses) GetClusters2WithResponse(ctx context.Context, application string, account string, params *GetClusters2Params, reqEditors ...RequestEditorFn) (*GetClusters2Response, error) {
	rsp, err := c.GetClusters2(ctx, application, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusters2Response(rsp)
}

// GetClusters3WithResponse request returning *GetClusters3Response
func (c *ClientWithResponses) GetClusters3WithResponse(ctx context.Context, application string, account string, clusterName string, params *GetClusters3Params, reqEditors ...RequestEditorFn) (*GetClusters3Response, error) {
	rsp, err := c.GetClusters3(ctx, application, account, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusters3Response(rsp)
}

// GetServerGroups1WithResponse request returning *GetServerGroups1Response
func (c *ClientWithResponses) GetServerGroups1WithResponse(ctx context.Context, application string, account string, clusterName string, params *GetServerGroups1Params, reqEditors ...RequestEditorFn) (*GetServerGroups1Response, error) {
	rsp, err := c.GetServerGroups1(ctx, application, account, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroups1Response(rsp)
}

// GetServerGroups2WithResponse request returning *GetServerGroups2Response
func (c *ClientWithResponses) GetServerGroups2WithResponse(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetServerGroups2Params, reqEditors ...RequestEditorFn) (*GetServerGroups2Response, error) {
	rsp, err := c.GetServerGroups2(ctx, application, account, clusterName, serverGroupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroups2Response(rsp)
}

// GetScalingActivitiesWithResponse request returning *GetScalingActivitiesResponse
func (c *ClientWithResponses) GetScalingActivitiesWithResponse(ctx context.Context, application string, account string, clusterName string, serverGroupName string, params *GetScalingActivitiesParams, reqEditors ...RequestEditorFn) (*GetScalingActivitiesResponse, error) {
	rsp, err := c.GetScalingActivities(ctx, application, account, clusterName, serverGroupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScalingActivitiesResponse(rsp)
}

// GetTargetServerGroupWithResponse request returning *GetTargetServerGroupResponse
func (c *ClientWithResponses) GetTargetServerGroupWithResponse(ctx context.Context, application string, account string, clusterName string, cloudProvider string, scope string, target string, params *GetTargetServerGroupParams, reqEditors ...RequestEditorFn) (*GetTargetServerGroupResponse, error) {
	rsp, err := c.GetTargetServerGroup(ctx, application, account, clusterName, cloudProvider, scope, target, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetServerGroupResponse(rsp)
}

// GetClusterLoadBalancersWithResponse request returning *GetClusterLoadBalancersResponse
func (c *ClientWithResponses) GetClusterLoadBalancersWithResponse(ctx context.Context, application string, account string, clusterName string, pType string, params *GetClusterLoadBalancersParams, reqEditors ...RequestEditorFn) (*GetClusterLoadBalancersResponse, error) {
	rsp, err := c.GetClusterLoadBalancers(ctx, application, account, clusterName, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterLoadBalancersResponse(rsp)
}

// SearchForPipelineExecutionsByTriggerWithResponse request returning *SearchForPipelineExecutionsByTriggerResponse
func (c *ClientWithResponses) SearchForPipelineExecutionsByTriggerWithResponse(ctx context.Context, application string, params *SearchForPipelineExecutionsByTriggerParams, reqEditors ...RequestEditorFn) (*SearchForPipelineExecutionsByTriggerResponse, error) {
	rsp, err := c.SearchForPipelineExecutionsByTrigger(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForPipelineExecutionsByTriggerResponse(rsp)
}

// ApplicationFunctionsWithResponse request returning *ApplicationFunctionsResponse
func (c *ClientWithResponses) ApplicationFunctionsWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*ApplicationFunctionsResponse, error) {
	rsp, err := c.ApplicationFunctions(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationFunctionsResponse(rsp)
}

// GetApplicationHistoryWithResponse request returning *GetApplicationHistoryResponse
func (c *ClientWithResponses) GetApplicationHistoryWithResponse(ctx context.Context, application string, params *GetApplicationHistoryParams, reqEditors ...RequestEditorFn) (*GetApplicationHistoryResponse, error) {
	rsp, err := c.GetApplicationHistory(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationHistoryResponse(rsp)
}

// GetApplicationLoadBalancersWithResponse request returning *GetApplicationLoadBalancersResponse
func (c *ClientWithResponses) GetApplicationLoadBalancersWithResponse(ctx context.Context, application string, params *GetApplicationLoadBalancersParams, reqEditors ...RequestEditorFn) (*GetApplicationLoadBalancersResponse, error) {
	rsp, err := c.GetApplicationLoadBalancers(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationLoadBalancersResponse(rsp)
}

// GetPipelineConfigsForApplicationWithResponse request returning *GetPipelineConfigsForApplicationResponse
func (c *ClientWithResponses) GetPipelineConfigsForApplicationWithResponse(ctx context.Context, application string, params *GetPipelineConfigsForApplicationParams, reqEditors ...RequestEditorFn) (*GetPipelineConfigsForApplicationResponse, error) {
	rsp, err := c.GetPipelineConfigsForApplication(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineConfigsForApplicationResponse(rsp)
}

// GetPipelineConfigWithResponse request returning *GetPipelineConfigResponse
func (c *ClientWithResponses) GetPipelineConfigWithResponse(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*GetPipelineConfigResponse, error) {
	rsp, err := c.GetPipelineConfig(ctx, application, pipelineName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineConfigResponse(rsp)
}

// InvokePipelineConfig1WithBodyWithResponse request with arbitrary body returning *InvokePipelineConfig1Response
func (c *ClientWithResponses) InvokePipelineConfig1WithBodyWithResponse(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfig1Response, error) {
	rsp, err := c.InvokePipelineConfig1WithBody(ctx, application, pipelineName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfig1Response(rsp)
}

func (c *ClientWithResponses) InvokePipelineConfig1WithResponse(ctx context.Context, application string, pipelineName string, params *InvokePipelineConfig1Params, body InvokePipelineConfig1JSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfig1Response, error) {
	rsp, err := c.InvokePipelineConfig1(ctx, application, pipelineName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfig1Response(rsp)
}

// GetPipelinesWithResponse request returning *GetPipelinesResponse
func (c *ClientWithResponses) GetPipelinesWithResponse(ctx context.Context, application string, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*GetPipelinesResponse, error) {
	rsp, err := c.GetPipelines(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelinesResponse(rsp)
}

// CancelPipeline1WithResponse request returning *CancelPipeline1Response
func (c *ClientWithResponses) CancelPipeline1WithResponse(ctx context.Context, application string, id string, params *CancelPipeline1Params, reqEditors ...RequestEditorFn) (*CancelPipeline1Response, error) {
	rsp, err := c.CancelPipeline1(ctx, application, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPipeline1Response(rsp)
}

// GetApplicationRawResourcesWithResponse request returning *GetApplicationRawResourcesResponse
func (c *ClientWithResponses) GetApplicationRawResourcesWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetApplicationRawResourcesResponse, error) {
	rsp, err := c.GetApplicationRawResources(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationRawResourcesResponse(rsp)
}

// GetServerGroupManagersForApplicationWithResponse request returning *GetServerGroupManagersForApplicationResponse
func (c *ClientWithResponses) GetServerGroupManagersForApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetServerGroupManagersForApplicationResponse, error) {
	rsp, err := c.GetServerGroupManagersForApplication(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroupManagersForApplicationResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, application string, account string, serverGroupName string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, application, account, serverGroupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetCurrentSnapshotWithResponse request returning *GetCurrentSnapshotResponse
func (c *ClientWithResponses) GetCurrentSnapshotWithResponse(ctx context.Context, application string, account string, reqEditors ...RequestEditorFn) (*GetCurrentSnapshotResponse, error) {
	rsp, err := c.GetCurrentSnapshot(ctx, application, account, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentSnapshotResponse(rsp)
}

// GetSnapshotHistoryWithResponse request returning *GetSnapshotHistoryResponse
func (c *ClientWithResponses) GetSnapshotHistoryWithResponse(ctx context.Context, application string, account string, params *GetSnapshotHistoryParams, reqEditors ...RequestEditorFn) (*GetSnapshotHistoryResponse, error) {
	rsp, err := c.GetSnapshotHistory(ctx, application, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotHistoryResponse(rsp)
}

// GetStrategyConfigsForApplicationWithResponse request returning *GetStrategyConfigsForApplicationResponse
func (c *ClientWithResponses) GetStrategyConfigsForApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetStrategyConfigsForApplicationResponse, error) {
	rsp, err := c.GetStrategyConfigsForApplication(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStrategyConfigsForApplicationResponse(rsp)
}

// GetStrategyConfigWithResponse request returning *GetStrategyConfigResponse
func (c *ClientWithResponses) GetStrategyConfigWithResponse(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*GetStrategyConfigResponse, error) {
	rsp, err := c.GetStrategyConfig(ctx, application, strategyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStrategyConfigResponse(rsp)
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, application string, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// Task1WithBodyWithResponse request with arbitrary body returning *Task1Response
func (c *ClientWithResponses) Task1WithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Task1Response, error) {
	rsp, err := c.Task1WithBody(ctx, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTask1Response(rsp)
}

func (c *ClientWithResponses) Task1WithResponse(ctx context.Context, application string, body Task1JSONRequestBody, reqEditors ...RequestEditorFn) (*Task1Response, error) {
	rsp, err := c.Task1(ctx, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTask1Response(rsp)
}

// GetTask1WithResponse request returning *GetTask1Response
func (c *ClientWithResponses) GetTask1WithResponse(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*GetTask1Response, error) {
	rsp, err := c.GetTask1(ctx, application, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTask1Response(rsp)
}

// CancelTask1WithResponse request returning *CancelTask1Response
func (c *ClientWithResponses) CancelTask1WithResponse(ctx context.Context, application string, id string, reqEditors ...RequestEditorFn) (*CancelTask1Response, error) {
	rsp, err := c.CancelTask1(ctx, application, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelTask1Response(rsp)
}

// GetTaskDetails1WithResponse request returning *GetTaskDetails1Response
func (c *ClientWithResponses) GetTaskDetails1WithResponse(ctx context.Context, application string, id string, taskDetailsId string, params *GetTaskDetails1Params, reqEditors ...RequestEditorFn) (*GetTaskDetails1Response, error) {
	rsp, err := c.GetTaskDetails1(ctx, application, id, taskDetailsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskDetails1Response(rsp)
}

// Names1WithResponse request returning *Names1Response
func (c *ClientWithResponses) Names1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Names1Response, error) {
	rsp, err := c.Names1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNames1Response(rsp)
}

// ArtifactNamesWithResponse request returning *ArtifactNamesResponse
func (c *ClientWithResponses) ArtifactNamesWithResponse(ctx context.Context, accountName string, params *ArtifactNamesParams, reqEditors ...RequestEditorFn) (*ArtifactNamesResponse, error) {
	rsp, err := c.ArtifactNames(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactNamesResponse(rsp)
}

// ArtifactVersionsWithResponse request returning *ArtifactVersionsResponse
func (c *ClientWithResponses) ArtifactVersionsWithResponse(ctx context.Context, accountName string, params *ArtifactVersionsParams, reqEditors ...RequestEditorFn) (*ArtifactVersionsResponse, error) {
	rsp, err := c.ArtifactVersions(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactVersionsResponse(rsp)
}

// GetStoredArtifactWithResponse request returning *GetStoredArtifactResponse
func (c *ClientWithResponses) GetStoredArtifactWithResponse(ctx context.Context, application string, hash string, reqEditors ...RequestEditorFn) (*GetStoredArtifactResponse, error) {
	rsp, err := c.GetStoredArtifact(ctx, application, hash, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoredArtifactResponse(rsp)
}

// All11WithResponse request returning *All11Response
func (c *ClientWithResponses) All11WithResponse(ctx context.Context, params *All11Params, reqEditors ...RequestEditorFn) (*All11Response, error) {
	rsp, err := c.All11(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll11Response(rsp)
}

// FetchWithBodyWithResponse request with arbitrary body returning *FetchResponse
func (c *ClientWithResponses) FetchWithBodyWithResponse(ctx context.Context, params *FetchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchResponse, error) {
	rsp, err := c.FetchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchResponse(rsp)
}

func (c *ClientWithResponses) FetchWithResponse(ctx context.Context, params *FetchParams, body FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchResponse, error) {
	rsp, err := c.Fetch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchResponse(rsp)
}

// GetVersionsOfArtifactForProviderWithResponse request returning *GetVersionsOfArtifactForProviderResponse
func (c *ClientWithResponses) GetVersionsOfArtifactForProviderWithResponse(ctx context.Context, provider string, packageName string, params *GetVersionsOfArtifactForProviderParams, reqEditors ...RequestEditorFn) (*GetVersionsOfArtifactForProviderResponse, error) {
	rsp, err := c.GetVersionsOfArtifactForProvider(ctx, provider, packageName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionsOfArtifactForProviderResponse(rsp)
}

// GetArtifactWithResponse request returning *GetArtifactResponse
func (c *ClientWithResponses) GetArtifactWithResponse(ctx context.Context, provider string, packageName string, version string, reqEditors ...RequestEditorFn) (*GetArtifactResponse, error) {
	rsp, err := c.GetArtifact(ctx, provider, packageName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactResponse(rsp)
}

// DeleteSessionCacheWithResponse request returning *DeleteSessionCacheResponse
func (c *ClientWithResponses) DeleteSessionCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionCacheResponse, error) {
	rsp, err := c.DeleteSessionCache(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionCacheResponse(rsp)
}

// LoggedOutWithResponse request returning *LoggedOutResponse
func (c *ClientWithResponses) LoggedOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoggedOutResponse, error) {
	rsp, err := c.LoggedOut(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoggedOutResponse(rsp)
}

// RawUserWithResponse request returning *RawUserResponse
func (c *ClientWithResponses) RawUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RawUserResponse, error) {
	rsp, err := c.RawUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRawUserResponse(rsp)
}

// RedirectWithResponse request returning *RedirectResponse
func (c *ClientWithResponses) RedirectWithResponse(ctx context.Context, params *RedirectParams, reqEditors ...RequestEditorFn) (*RedirectResponse, error) {
	rsp, err := c.Redirect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedirectResponse(rsp)
}

// SyncWithResponse request returning *SyncResponse
func (c *ClientWithResponses) SyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SyncResponse, error) {
	rsp, err := c.Sync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncResponse(rsp)
}

// UserWithResponse request returning *UserResponse
func (c *ClientWithResponses) UserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserResponse, error) {
	rsp, err := c.User(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserResponse(rsp)
}

// LookupLogsWithResponse request returning *LookupLogsResponse
func (c *ClientWithResponses) LookupLogsWithResponse(ctx context.Context, region string, statusId string, reqEditors ...RequestEditorFn) (*LookupLogsResponse, error) {
	rsp, err := c.LookupLogs(ctx, region, statusId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLookupLogsResponse(rsp)
}

// BakeOptionsWithResponse request returning *BakeOptionsResponse
func (c *ClientWithResponses) BakeOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BakeOptionsResponse, error) {
	rsp, err := c.BakeOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBakeOptionsResponse(rsp)
}

// BakeOptions1WithResponse request returning *BakeOptions1Response
func (c *ClientWithResponses) BakeOptions1WithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*BakeOptions1Response, error) {
	rsp, err := c.BakeOptions1(ctx, cloudProvider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBakeOptions1Response(rsp)
}

// BatchUpdateWithBodyWithResponse request with arbitrary body returning *BatchUpdateResponse
func (c *ClientWithResponses) BatchUpdateWithBodyWithResponse(ctx context.Context, params *BatchUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchUpdateResponse, error) {
	rsp, err := c.BatchUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchUpdateResponse(rsp)
}

func (c *ClientWithResponses) BatchUpdateWithResponse(ctx context.Context, params *BatchUpdateParams, body BatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchUpdateResponse, error) {
	rsp, err := c.BatchUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchUpdateResponse(rsp)
}

// GetDeploymentMonitorsWithResponse request returning *GetDeploymentMonitorsResponse
func (c *ClientWithResponses) GetDeploymentMonitorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeploymentMonitorsResponse, error) {
	rsp, err := c.GetDeploymentMonitors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentMonitorsResponse(rsp)
}

// GetExpressionCapabilitiesWithResponse request returning *GetExpressionCapabilitiesResponse
func (c *ClientWithResponses) GetExpressionCapabilitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExpressionCapabilitiesResponse, error) {
	rsp, err := c.GetExpressionCapabilities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpressionCapabilitiesResponse(rsp)
}

// GetQuietPeriodStateWithResponse request returning *GetQuietPeriodStateResponse
func (c *ClientWithResponses) GetQuietPeriodStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQuietPeriodStateResponse, error) {
	rsp, err := c.GetQuietPeriodState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQuietPeriodStateResponse(rsp)
}

// All10WithResponse request returning *All10Response
func (c *ClientWithResponses) All10WithResponse(ctx context.Context, params *All10Params, reqEditors ...RequestEditorFn) (*All10Response, error) {
	rsp, err := c.All10(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll10Response(rsp)
}

// AllByCloudProvider2WithResponse request returning *AllByCloudProvider2Response
func (c *ClientWithResponses) AllByCloudProvider2WithResponse(ctx context.Context, cloudProvider string, params *AllByCloudProvider2Params, reqEditors ...RequestEditorFn) (*AllByCloudProvider2Response, error) {
	rsp, err := c.AllByCloudProvider2(ctx, cloudProvider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByCloudProvider2Response(rsp)
}

// FindImages1WithResponse request returning *FindImages1Response
func (c *ClientWithResponses) FindImages1WithResponse(ctx context.Context, params *FindImages1Params, reqEditors ...RequestEditorFn) (*FindImages1Response, error) {
	rsp, err := c.FindImages1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindImages1Response(rsp)
}

// FindTags1WithResponse request returning *FindTags1Response
func (c *ClientWithResponses) FindTags1WithResponse(ctx context.Context, params *FindTags1Params, reqEditors ...RequestEditorFn) (*FindTags1Response, error) {
	rsp, err := c.FindTags1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindTags1Response(rsp)
}

// GetImageDetails1WithResponse request returning *GetImageDetails1Response
func (c *ClientWithResponses) GetImageDetails1WithResponse(ctx context.Context, account string, region string, imageId string, params *GetImageDetails1Params, reqEditors ...RequestEditorFn) (*GetImageDetails1Response, error) {
	rsp, err := c.GetImageDetails1(ctx, account, region, imageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImageDetails1Response(rsp)
}

// GetBuilds1WithResponse request returning *GetBuilds1Response
func (c *ClientWithResponses) GetBuilds1WithResponse(ctx context.Context, params *GetBuilds1Params, reqEditors ...RequestEditorFn) (*GetBuilds1Response, error) {
	rsp, err := c.GetBuilds1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuilds1Response(rsp)
}

// GetBuildOutputByIdWithResponse request returning *GetBuildOutputByIdResponse
func (c *ClientWithResponses) GetBuildOutputByIdWithResponse(ctx context.Context, buildId string, reqEditors ...RequestEditorFn) (*GetBuildOutputByIdResponse, error) {
	rsp, err := c.GetBuildOutputById(ctx, buildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildOutputByIdResponse(rsp)
}

// GetAllDeletedResourcesWithResponse request returning *GetAllDeletedResourcesResponse
func (c *ClientWithResponses) GetAllDeletedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllDeletedResourcesResponse, error) {
	rsp, err := c.GetAllDeletedResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllDeletedResourcesResponse(rsp)
}

// GetAllMarkedResourcesWithResponse request returning *GetAllMarkedResourcesResponse
func (c *ClientWithResponses) GetAllMarkedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllMarkedResourcesResponse, error) {
	rsp, err := c.GetAllMarkedResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMarkedResourcesResponse(rsp)
}

// GetMarkedResourceWithResponse request returning *GetMarkedResourceResponse
func (c *ClientWithResponses) GetMarkedResourceWithResponse(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*GetMarkedResourceResponse, error) {
	rsp, err := c.GetMarkedResource(ctx, namespace, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarkedResourceResponse(rsp)
}

// OptOutWithResponse request returning *OptOutResponse
func (c *ClientWithResponses) OptOutWithResponse(ctx context.Context, namespace string, resourceId string, reqEditors ...RequestEditorFn) (*OptOutResponse, error) {
	rsp, err := c.OptOut(ctx, namespace, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptOutResponse(rsp)
}

// FindAllWithResponse request returning *FindAllResponse
func (c *ClientWithResponses) FindAllWithResponse(ctx context.Context, cloudProvider string, account string, region string, params *FindAllParams, reqEditors ...RequestEditorFn) (*FindAllResponse, error) {
	rsp, err := c.FindAll(ctx, cloudProvider, account, region, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllResponse(rsp)
}

// GetStatisticsWithResponse request returning *GetStatisticsResponse
func (c *ClientWithResponses) GetStatisticsWithResponse(ctx context.Context, cloudProvider string, account string, region string, metricName string, params *GetStatisticsParams, reqEditors ...RequestEditorFn) (*GetStatisticsResponse, error) {
	rsp, err := c.GetStatistics(ctx, cloudProvider, account, region, metricName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticsResponse(rsp)
}

// StageExecutionWithResponse request returning *StageExecutionResponse
func (c *ClientWithResponses) StageExecutionWithResponse(ctx context.Context, params *StageExecutionParams, reqEditors ...RequestEditorFn) (*StageExecutionResponse, error) {
	rsp, err := c.StageExecution(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStageExecutionResponse(rsp)
}

// TeamsWithResponse request returning *TeamsResponse
func (c *ClientWithResponses) TeamsWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*TeamsResponse, error) {
	rsp, err := c.Teams(ctx, buildMaster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsResponse(rsp)
}

// PipelinesWithResponse request returning *PipelinesResponse
func (c *ClientWithResponses) PipelinesWithResponse(ctx context.Context, buildMaster string, team string, reqEditors ...RequestEditorFn) (*PipelinesResponse, error) {
	rsp, err := c.Pipelines(ctx, buildMaster, team, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinesResponse(rsp)
}

// JobsWithResponse request returning *JobsResponse
func (c *ClientWithResponses) JobsWithResponse(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*JobsResponse, error) {
	rsp, err := c.Jobs(ctx, buildMaster, team, pipeline, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJobsResponse(rsp)
}

// ResourcesWithResponse request returning *ResourcesResponse
func (c *ClientWithResponses) ResourcesWithResponse(ctx context.Context, buildMaster string, team string, pipeline string, reqEditors ...RequestEditorFn) (*ResourcesResponse, error) {
	rsp, err := c.Resources(ctx, buildMaster, team, pipeline, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesResponse(rsp)
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// UpdateAccountWithBodyWithResponse request with arbitrary body returning *UpdateAccountResponse
func (c *ClientWithResponses) UpdateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountWithResponse(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountResponse(rsp)
}

// GetAccountsByTypeWithResponse request returning *GetAccountsByTypeResponse
func (c *ClientWithResponses) GetAccountsByTypeWithResponse(ctx context.Context, accountType string, params *GetAccountsByTypeParams, reqEditors ...RequestEditorFn) (*GetAccountsByTypeResponse, error) {
	rsp, err := c.GetAccountsByType(ctx, accountType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsByTypeResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, accountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, account string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// ValidateCronExpressionWithResponse request returning *ValidateCronExpressionResponse
func (c *ClientWithResponses) ValidateCronExpressionWithResponse(ctx context.Context, params *ValidateCronExpressionParams, reqEditors ...RequestEditorFn) (*ValidateCronExpressionResponse, error) {
	rsp, err := c.ValidateCronExpression(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateCronExpressionResponse(rsp)
}

// AllMetricAlarmsWithResponse request returning *AllMetricAlarmsResponse
func (c *ClientWithResponses) AllMetricAlarmsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AllMetricAlarmsResponse, error) {
	rsp, err := c.AllMetricAlarms(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllMetricAlarmsResponse(rsp)
}

// GetEcsClusterDescriptionsWithResponse request returning *GetEcsClusterDescriptionsResponse
func (c *ClientWithResponses) GetEcsClusterDescriptionsWithResponse(ctx context.Context, account string, region string, reqEditors ...RequestEditorFn) (*GetEcsClusterDescriptionsResponse, error) {
	rsp, err := c.GetEcsClusterDescriptions(ctx, account, region, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEcsClusterDescriptionsResponse(rsp)
}

// All9WithResponse request returning *All9Response
func (c *ClientWithResponses) All9WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All9Response, error) {
	rsp, err := c.All9(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll9Response(rsp)
}

// All8WithResponse request returning *All8Response
func (c *ClientWithResponses) All8WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All8Response, error) {
	rsp, err := c.All8(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll8Response(rsp)
}

// All7WithResponse request returning *All7Response
func (c *ClientWithResponses) All7WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All7Response, error) {
	rsp, err := c.All7(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll7Response(rsp)
}

// Error5WithResponse request returning *Error5Response
func (c *ClientWithResponses) Error5WithResponse(ctx context.Context, params *Error5Params, reqEditors ...RequestEditorFn) (*Error5Response, error) {
	rsp, err := c.Error5(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError5Response(rsp)
}

// ErrorWithResponse request returning *ErrorResponse
func (c *ClientWithResponses) ErrorWithResponse(ctx context.Context, params *ErrorParams, reqEditors ...RequestEditorFn) (*ErrorResponse, error) {
	rsp, err := c.Error(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseErrorResponse(rsp)
}

// Error1WithResponse request returning *Error1Response
func (c *ClientWithResponses) Error1WithResponse(ctx context.Context, params *Error1Params, reqEditors ...RequestEditorFn) (*Error1Response, error) {
	rsp, err := c.Error1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError1Response(rsp)
}

// Error6WithResponse request returning *Error6Response
func (c *ClientWithResponses) Error6WithResponse(ctx context.Context, params *Error6Params, reqEditors ...RequestEditorFn) (*Error6Response, error) {
	rsp, err := c.Error6(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError6Response(rsp)
}

// Error4WithResponse request returning *Error4Response
func (c *ClientWithResponses) Error4WithResponse(ctx context.Context, params *Error4Params, reqEditors ...RequestEditorFn) (*Error4Response, error) {
	rsp, err := c.Error4(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError4Response(rsp)
}

// Error2WithResponse request returning *Error2Response
func (c *ClientWithResponses) Error2WithResponse(ctx context.Context, params *Error2Params, reqEditors ...RequestEditorFn) (*Error2Response, error) {
	rsp, err := c.Error2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError2Response(rsp)
}

// Error3WithResponse request returning *Error3Response
func (c *ClientWithResponses) Error3WithResponse(ctx context.Context, params *Error3Params, reqEditors ...RequestEditorFn) (*Error3Response, error) {
	rsp, err := c.Error3(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseError3Response(rsp)
}

// GetLatestExecutionsByConfigIdsWithResponse request returning *GetLatestExecutionsByConfigIdsResponse
func (c *ClientWithResponses) GetLatestExecutionsByConfigIdsWithResponse(ctx context.Context, params *GetLatestExecutionsByConfigIdsParams, reqEditors ...RequestEditorFn) (*GetLatestExecutionsByConfigIdsResponse, error) {
	rsp, err := c.GetLatestExecutionsByConfigIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestExecutionsByConfigIdsResponse(rsp)
}

// Any9WithResponse request returning *Any9Response
func (c *ClientWithResponses) Any9WithResponse(ctx context.Context, extension string, params *Any9Params, reqEditors ...RequestEditorFn) (*Any9Response, error) {
	rsp, err := c.Any9(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny9Response(rsp)
}

// Any4WithResponse request returning *Any4Response
func (c *ClientWithResponses) Any4WithResponse(ctx context.Context, extension string, params *Any4Params, reqEditors ...RequestEditorFn) (*Any4Response, error) {
	rsp, err := c.Any4(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny4Response(rsp)
}

// Any5WithResponse request returning *Any5Response
func (c *ClientWithResponses) Any5WithResponse(ctx context.Context, extension string, params *Any5Params, reqEditors ...RequestEditorFn) (*Any5Response, error) {
	rsp, err := c.Any5(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny5Response(rsp)
}

// Any10WithResponse request returning *Any10Response
func (c *ClientWithResponses) Any10WithResponse(ctx context.Context, extension string, params *Any10Params, reqEditors ...RequestEditorFn) (*Any10Response, error) {
	rsp, err := c.Any10(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny10Response(rsp)
}

// Any8WithResponse request returning *Any8Response
func (c *ClientWithResponses) Any8WithResponse(ctx context.Context, extension string, params *Any8Params, reqEditors ...RequestEditorFn) (*Any8Response, error) {
	rsp, err := c.Any8(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny8Response(rsp)
}

// Any6WithResponse request returning *Any6Response
func (c *ClientWithResponses) Any6WithResponse(ctx context.Context, extension string, params *Any6Params, reqEditors ...RequestEditorFn) (*Any6Response, error) {
	rsp, err := c.Any6(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny6Response(rsp)
}

// Any7WithResponse request returning *Any7Response
func (c *ClientWithResponses) Any7WithResponse(ctx context.Context, extension string, params *Any7Params, reqEditors ...RequestEditorFn) (*Any7Response, error) {
	rsp, err := c.Any7(ctx, extension, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny7Response(rsp)
}

// All6WithResponse request returning *All6Response
func (c *ClientWithResponses) All6WithResponse(ctx context.Context, params *All6Params, reqEditors ...RequestEditorFn) (*All6Response, error) {
	rsp, err := c.All6(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll6Response(rsp)
}

// AllByAccount1WithResponse request returning *AllByAccount1Response
func (c *ClientWithResponses) AllByAccount1WithResponse(ctx context.Context, account string, params *AllByAccount1Params, reqEditors ...RequestEditorFn) (*AllByAccount1Response, error) {
	rsp, err := c.AllByAccount1(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByAccount1Response(rsp)
}

// AllByAccountAndRegionWithResponse request returning *AllByAccountAndRegionResponse
func (c *ClientWithResponses) AllByAccountAndRegionWithResponse(ctx context.Context, account string, region string, params *AllByAccountAndRegionParams, reqEditors ...RequestEditorFn) (*AllByAccountAndRegionResponse, error) {
	rsp, err := c.AllByAccountAndRegion(ctx, account, region, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByAccountAndRegionResponse(rsp)
}

// GetSecurityGroup1WithResponse request returning *GetSecurityGroup1Response
func (c *ClientWithResponses) GetSecurityGroup1WithResponse(ctx context.Context, account string, region string, name string, params *GetSecurityGroup1Params, reqEditors ...RequestEditorFn) (*GetSecurityGroup1Response, error) {
	rsp, err := c.GetSecurityGroup1(ctx, account, region, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecurityGroup1Response(rsp)
}

// FunctionsWithResponse request returning *FunctionsResponse
func (c *ClientWithResponses) FunctionsWithResponse(ctx context.Context, params *FunctionsParams, reqEditors ...RequestEditorFn) (*FunctionsResponse, error) {
	rsp, err := c.Functions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFunctionsResponse(rsp)
}

// GetHistoryWithResponse request returning *GetHistoryResponse
func (c *ClientWithResponses) GetHistoryWithResponse(ctx context.Context, name string, params *GetHistoryParams, reqEditors ...RequestEditorFn) (*GetHistoryResponse, error) {
	rsp, err := c.GetHistory(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoryResponse(rsp)
}

// FindImagesWithResponse request returning *FindImagesResponse
func (c *ClientWithResponses) FindImagesWithResponse(ctx context.Context, params *FindImagesParams, reqEditors ...RequestEditorFn) (*FindImagesResponse, error) {
	rsp, err := c.FindImages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindImagesResponse(rsp)
}

// FindTagsWithResponse request returning *FindTagsResponse
func (c *ClientWithResponses) FindTagsWithResponse(ctx context.Context, params *FindTagsParams, reqEditors ...RequestEditorFn) (*FindTagsResponse, error) {
	rsp, err := c.FindTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindTagsResponse(rsp)
}

// GetImageDetailsWithResponse request returning *GetImageDetailsResponse
func (c *ClientWithResponses) GetImageDetailsWithResponse(ctx context.Context, account string, region string, imageId string, params *GetImageDetailsParams, reqEditors ...RequestEditorFn) (*GetImageDetailsResponse, error) {
	rsp, err := c.GetImageDetails(ctx, account, region, imageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImageDetailsResponse(rsp)
}

// InstanceTypesWithResponse request returning *InstanceTypesResponse
func (c *ClientWithResponses) InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InstanceTypesResponse, error) {
	rsp, err := c.InstanceTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstanceTypesResponse(rsp)
}

// GetInstanceDetailsWithResponse request returning *GetInstanceDetailsResponse
func (c *ClientWithResponses) GetInstanceDetailsWithResponse(ctx context.Context, account string, region string, instanceId string, params *GetInstanceDetailsParams, reqEditors ...RequestEditorFn) (*GetInstanceDetailsResponse, error) {
	rsp, err := c.GetInstanceDetails(ctx, account, region, instanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceDetailsResponse(rsp)
}

// GetConsoleOutputWithResponse request returning *GetConsoleOutputResponse
func (c *ClientWithResponses) GetConsoleOutputWithResponse(ctx context.Context, account string, region string, instanceId string, params *GetConsoleOutputParams, reqEditors ...RequestEditorFn) (*GetConsoleOutputResponse, error) {
	rsp, err := c.GetConsoleOutput(ctx, account, region, instanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleOutputResponse(rsp)
}

// PreconfiguredWebhooks1WithResponse request returning *PreconfiguredWebhooks1Response
func (c *ClientWithResponses) PreconfiguredWebhooks1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PreconfiguredWebhooks1Response, error) {
	rsp, err := c.PreconfiguredWebhooks1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreconfiguredWebhooks1Response(rsp)
}

// KeyPairsWithResponse request returning *KeyPairsResponse
func (c *ClientWithResponses) KeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KeyPairsResponse, error) {
	rsp, err := c.KeyPairs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyPairsResponse(rsp)
}

// GetAllWithResponse request returning *GetAllResponse
func (c *ClientWithResponses) GetAllWithResponse(ctx context.Context, params *GetAllParams, reqEditors ...RequestEditorFn) (*GetAllResponse, error) {
	rsp, err := c.GetAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllResponse(rsp)
}

// GetLoadBalancerDetailsWithResponse request returning *GetLoadBalancerDetailsResponse
func (c *ClientWithResponses) GetLoadBalancerDetailsWithResponse(ctx context.Context, account string, region string, name string, params *GetLoadBalancerDetailsParams, reqEditors ...RequestEditorFn) (*GetLoadBalancerDetailsResponse, error) {
	rsp, err := c.GetLoadBalancerDetails(ctx, account, region, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoadBalancerDetailsResponse(rsp)
}

// GetLoadBalancerWithResponse request returning *GetLoadBalancerResponse
func (c *ClientWithResponses) GetLoadBalancerWithResponse(ctx context.Context, name string, params *GetLoadBalancerParams, reqEditors ...RequestEditorFn) (*GetLoadBalancerResponse, error) {
	rsp, err := c.GetLoadBalancer(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoadBalancerResponse(rsp)
}

// GetApplicationDetailsWithResponse request returning *GetApplicationDetailsResponse
func (c *ClientWithResponses) GetApplicationDetailsWithResponse(ctx context.Context, application string, params *GetApplicationDetailsParams, reqEditors ...RequestEditorFn) (*GetApplicationDetailsResponse, error) {
	rsp, err := c.GetApplicationDetails(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationDetailsResponse(rsp)
}

// DeleteManifestByAppWithResponse request returning *DeleteManifestByAppResponse
func (c *ClientWithResponses) DeleteManifestByAppWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*DeleteManifestByAppResponse, error) {
	rsp, err := c.DeleteManifestByApp(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteManifestByAppResponse(rsp)
}

// GetConfigByWithResponse request returning *GetConfigByResponse
func (c *ClientWithResponses) GetConfigByWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetConfigByResponse, error) {
	rsp, err := c.GetConfigBy(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigByResponse(rsp)
}

// UpdateConstraintStatusWithBodyWithResponse request with arbitrary body returning *UpdateConstraintStatusResponse
func (c *ClientWithResponses) UpdateConstraintStatusWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConstraintStatusResponse, error) {
	rsp, err := c.UpdateConstraintStatusWithBody(ctx, application, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConstraintStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateConstraintStatusWithResponse(ctx context.Context, application string, environment string, body UpdateConstraintStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConstraintStatusResponse, error) {
	rsp, err := c.UpdateConstraintStatus(ctx, application, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConstraintStatusResponse(rsp)
}

// GetConstraintStateWithResponse request returning *GetConstraintStateResponse
func (c *ClientWithResponses) GetConstraintStateWithResponse(ctx context.Context, application string, environment string, params *GetConstraintStateParams, reqEditors ...RequestEditorFn) (*GetConstraintStateResponse, error) {
	rsp, err := c.GetConstraintState(ctx, application, environment, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConstraintStateResponse(rsp)
}

// MarkBadWithBodyWithResponse request with arbitrary body returning *MarkBadResponse
func (c *ClientWithResponses) MarkBadWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkBadResponse, error) {
	rsp, err := c.MarkBadWithBody(ctx, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkBadResponse(rsp)
}

func (c *ClientWithResponses) MarkBadWithResponse(ctx context.Context, application string, body MarkBadJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkBadResponse, error) {
	rsp, err := c.MarkBad(ctx, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkBadResponse(rsp)
}

// MarkGoodWithBodyWithResponse request with arbitrary body returning *MarkGoodResponse
func (c *ClientWithResponses) MarkGoodWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkGoodResponse, error) {
	rsp, err := c.MarkGoodWithBody(ctx, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkGoodResponse(rsp)
}

func (c *ClientWithResponses) MarkGoodWithResponse(ctx context.Context, application string, body MarkGoodJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkGoodResponse, error) {
	rsp, err := c.MarkGood(ctx, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkGoodResponse(rsp)
}

// ResumeApplicationWithResponse request returning *ResumeApplicationResponse
func (c *ClientWithResponses) ResumeApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*ResumeApplicationResponse, error) {
	rsp, err := c.ResumeApplication(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeApplicationResponse(rsp)
}

// PauseApplicationWithResponse request returning *PauseApplicationResponse
func (c *ClientWithResponses) PauseApplicationWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*PauseApplicationResponse, error) {
	rsp, err := c.PauseApplication(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseApplicationResponse(rsp)
}

// CreatePinWithBodyWithResponse request with arbitrary body returning *CreatePinResponse
func (c *ClientWithResponses) CreatePinWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePinResponse, error) {
	rsp, err := c.CreatePinWithBody(ctx, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePinResponse(rsp)
}

func (c *ClientWithResponses) CreatePinWithResponse(ctx context.Context, application string, body CreatePinJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePinResponse, error) {
	rsp, err := c.CreatePin(ctx, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePinResponse(rsp)
}

// DeletePinWithResponse request returning *DeletePinResponse
func (c *ClientWithResponses) DeletePinWithResponse(ctx context.Context, application string, targetEnvironment string, params *DeletePinParams, reqEditors ...RequestEditorFn) (*DeletePinResponse, error) {
	rsp, err := c.DeletePin(ctx, application, targetEnvironment, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePinResponse(rsp)
}

// VetoWithBodyWithResponse request with arbitrary body returning *VetoResponse
func (c *ClientWithResponses) VetoWithBodyWithResponse(ctx context.Context, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VetoResponse, error) {
	rsp, err := c.VetoWithBody(ctx, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVetoResponse(rsp)
}

func (c *ClientWithResponses) VetoWithResponse(ctx context.Context, application string, body VetoJSONRequestBody, reqEditors ...RequestEditorFn) (*VetoResponse, error) {
	rsp, err := c.Veto(ctx, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVetoResponse(rsp)
}

// DeleteVetoWithResponse request returning *DeleteVetoResponse
func (c *ClientWithResponses) DeleteVetoWithResponse(ctx context.Context, application string, targetEnvironment string, reference string, version string, reqEditors ...RequestEditorFn) (*DeleteVetoResponse, error) {
	rsp, err := c.DeleteVeto(ctx, application, targetEnvironment, reference, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVetoResponse(rsp)
}

// UpsertManifestWithBodyWithResponse request with arbitrary body returning *UpsertManifestResponse
func (c *ClientWithResponses) UpsertManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertManifestResponse, error) {
	rsp, err := c.UpsertManifestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertManifestResponse(rsp)
}

func (c *ClientWithResponses) UpsertManifestWithResponse(ctx context.Context, body UpsertManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertManifestResponse, error) {
	rsp, err := c.UpsertManifest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertManifestResponse(rsp)
}

// DiffManifestWithBodyWithResponse request with arbitrary body returning *DiffManifestResponse
func (c *ClientWithResponses) DiffManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffManifestResponse, error) {
	rsp, err := c.DiffManifestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffManifestResponse(rsp)
}

func (c *ClientWithResponses) DiffManifestWithResponse(ctx context.Context, body DiffManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffManifestResponse, error) {
	rsp, err := c.DiffManifest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffManifestResponse(rsp)
}

// SchemaWithResponse request returning *SchemaResponse
func (c *ClientWithResponses) SchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SchemaResponse, error) {
	rsp, err := c.Schema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchemaResponse(rsp)
}

// ValidateManifestWithBodyWithResponse request with arbitrary body returning *ValidateManifestResponse
func (c *ClientWithResponses) ValidateManifestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateManifestResponse, error) {
	rsp, err := c.ValidateManifestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateManifestResponse(rsp)
}

func (c *ClientWithResponses) ValidateManifestWithResponse(ctx context.Context, body ValidateManifestJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateManifestResponse, error) {
	rsp, err := c.ValidateManifest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateManifestResponse(rsp)
}

// DeleteManifestWithResponse request returning *DeleteManifestResponse
func (c *ClientWithResponses) DeleteManifestWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteManifestResponse, error) {
	rsp, err := c.DeleteManifest(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteManifestResponse(rsp)
}

// GetManifest1WithResponse request returning *GetManifest1Response
func (c *ClientWithResponses) GetManifest1WithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifest1Response, error) {
	rsp, err := c.GetManifest1(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetManifest1Response(rsp)
}

// GetManifestYamlWithResponse request returning *GetManifestYamlResponse
func (c *ClientWithResponses) GetManifestYamlWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifestYamlResponse, error) {
	rsp, err := c.GetManifestYaml(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetManifestYamlResponse(rsp)
}

// GetManifestArtifactsWithResponse request returning *GetManifestArtifactsResponse
func (c *ClientWithResponses) GetManifestArtifactsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetManifestArtifactsResponse, error) {
	rsp, err := c.GetManifestArtifacts(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetManifestArtifactsResponse(rsp)
}

// GetEnvironmentsWithResponse request returning *GetEnvironmentsResponse
func (c *ClientWithResponses) GetEnvironmentsWithResponse(ctx context.Context, application string, reqEditors ...RequestEditorFn) (*GetEnvironmentsResponse, error) {
	rsp, err := c.GetEnvironments(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsResponse(rsp)
}

// GraphqlWithBodyWithResponse request with arbitrary body returning *GraphqlResponse
func (c *ClientWithResponses) GraphqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GraphqlResponse, error) {
	rsp, err := c.GraphqlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlResponse(rsp)
}

func (c *ClientWithResponses) GraphqlWithResponse(ctx context.Context, body GraphqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GraphqlResponse, error) {
	rsp, err := c.Graphql(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlResponse(rsp)
}

// ProcessNotificationCallback1WithResponse request returning *ProcessNotificationCallback1Response
func (c *ClientWithResponses) ProcessNotificationCallback1WithResponse(ctx context.Context, source string, params *ProcessNotificationCallback1Params, reqEditors ...RequestEditorFn) (*ProcessNotificationCallback1Response, error) {
	rsp, err := c.ProcessNotificationCallback1(ctx, source, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessNotificationCallback1Response(rsp)
}

// GetAdoptionReportWithResponse request returning *GetAdoptionReportResponse
func (c *ClientWithResponses) GetAdoptionReportWithResponse(ctx context.Context, params *GetAdoptionReportParams, reqEditors ...RequestEditorFn) (*GetAdoptionReportResponse, error) {
	rsp, err := c.GetAdoptionReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdoptionReportResponse(rsp)
}

// GetOnboardingReportWithResponse request returning *GetOnboardingReportResponse
func (c *ClientWithResponses) GetOnboardingReportWithResponse(ctx context.Context, params *GetOnboardingReportParams, reqEditors ...RequestEditorFn) (*GetOnboardingReportResponse, error) {
	rsp, err := c.GetOnboardingReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOnboardingReportResponse(rsp)
}

// DiffResourceWithBodyWithResponse request with arbitrary body returning *DiffResourceResponse
func (c *ClientWithResponses) DiffResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffResourceResponse, error) {
	rsp, err := c.DiffResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffResourceResponse(rsp)
}

func (c *ClientWithResponses) DiffResourceWithResponse(ctx context.Context, body DiffResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffResourceResponse, error) {
	rsp, err := c.DiffResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffResourceResponse(rsp)
}

// ExportResource1WithResponse request returning *ExportResource1Response
func (c *ClientWithResponses) ExportResource1WithResponse(ctx context.Context, cloudProvider string, account string, clusterName string, reqEditors ...RequestEditorFn) (*ExportResource1Response, error) {
	rsp, err := c.ExportResource1(ctx, cloudProvider, account, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportResource1Response(rsp)
}

// ExportResourceWithResponse request returning *ExportResourceResponse
func (c *ClientWithResponses) ExportResourceWithResponse(ctx context.Context, cloudProvider string, account string, pType string, name string, params *ExportResourceParams, reqEditors ...RequestEditorFn) (*ExportResourceResponse, error) {
	rsp, err := c.ExportResource(ctx, cloudProvider, account, pType, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportResourceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// GetResourceYamlWithResponse request returning *GetResourceYamlResponse
func (c *ClientWithResponses) GetResourceYamlWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceYamlResponse, error) {
	rsp, err := c.GetResourceYaml(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceYamlResponse(rsp)
}

// ResumeResourceWithResponse request returning *ResumeResourceResponse
func (c *ClientWithResponses) ResumeResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*ResumeResourceResponse, error) {
	rsp, err := c.ResumeResource(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeResourceResponse(rsp)
}

// PauseResourceWithResponse request returning *PauseResourceResponse
func (c *ClientWithResponses) PauseResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*PauseResourceResponse, error) {
	rsp, err := c.PauseResource(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseResourceResponse(rsp)
}

// GetResourceStatusWithResponse request returning *GetResourceStatusResponse
func (c *ClientWithResponses) GetResourceStatusWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceStatusResponse, error) {
	rsp, err := c.GetResourceStatus(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceStatusResponse(rsp)
}

// OverrideVerificationWithBodyWithResponse request with arbitrary body returning *OverrideVerificationResponse
func (c *ClientWithResponses) OverrideVerificationWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverrideVerificationResponse, error) {
	rsp, err := c.OverrideVerificationWithBody(ctx, application, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverrideVerificationResponse(rsp)
}

func (c *ClientWithResponses) OverrideVerificationWithResponse(ctx context.Context, application string, environment string, body OverrideVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*OverrideVerificationResponse, error) {
	rsp, err := c.OverrideVerification(ctx, application, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverrideVerificationResponse(rsp)
}

// RetryVerificationWithBodyWithResponse request with arbitrary body returning *RetryVerificationResponse
func (c *ClientWithResponses) RetryVerificationWithBodyWithResponse(ctx context.Context, application string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetryVerificationResponse, error) {
	rsp, err := c.RetryVerificationWithBody(ctx, application, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetryVerificationResponse(rsp)
}

func (c *ClientWithResponses) RetryVerificationWithResponse(ctx context.Context, application string, environment string, body RetryVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*RetryVerificationResponse, error) {
	rsp, err := c.RetryVerification(ctx, application, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetryVerificationResponse(rsp)
}

// GetManifestWithResponse request returning *GetManifestResponse
func (c *ClientWithResponses) GetManifestWithResponse(ctx context.Context, account string, location string, name string, reqEditors ...RequestEditorFn) (*GetManifestResponse, error) {
	rsp, err := c.GetManifest(ctx, account, location, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetManifestResponse(rsp)
}

// All5WithResponse request returning *All5Response
func (c *ClientWithResponses) All5WithResponse(ctx context.Context, params *All5Params, reqEditors ...RequestEditorFn) (*All5Response, error) {
	rsp, err := c.All5(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll5Response(rsp)
}

// AllByCloudProvider1WithResponse request returning *AllByCloudProvider1Response
func (c *ClientWithResponses) AllByCloudProvider1WithResponse(ctx context.Context, cloudProvider string, params *AllByCloudProvider1Params, reqEditors ...RequestEditorFn) (*AllByCloudProvider1Response, error) {
	rsp, err := c.AllByCloudProvider1(ctx, cloudProvider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByCloudProvider1Response(rsp)
}

// NamesWithResponse request returning *NamesResponse
func (c *ClientWithResponses) NamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NamesResponse, error) {
	rsp, err := c.Names(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamesResponse(rsp)
}

// ProcessNotificationCallbackWithResponse request returning *ProcessNotificationCallbackResponse
func (c *ClientWithResponses) ProcessNotificationCallbackWithResponse(ctx context.Context, source string, params *ProcessNotificationCallbackParams, reqEditors ...RequestEditorFn) (*ProcessNotificationCallbackResponse, error) {
	rsp, err := c.ProcessNotificationCallback(ctx, source, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessNotificationCallbackResponse(rsp)
}

// GetNotificationTypeMetadataWithResponse request returning *GetNotificationTypeMetadataResponse
func (c *ClientWithResponses) GetNotificationTypeMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNotificationTypeMetadataResponse, error) {
	rsp, err := c.GetNotificationTypeMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationTypeMetadataResponse(rsp)
}

// DeletePipeline2WithResponse request returning *DeletePipeline2Response
func (c *ClientWithResponses) DeletePipeline2WithResponse(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*DeletePipeline2Response, error) {
	rsp, err := c.DeletePipeline2(ctx, pType, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipeline2Response(rsp)
}

// GetNotificationConfigWithResponse request returning *GetNotificationConfigResponse
func (c *ClientWithResponses) GetNotificationConfigWithResponse(ctx context.Context, pType string, application string, reqEditors ...RequestEditorFn) (*GetNotificationConfigResponse, error) {
	rsp, err := c.GetNotificationConfig(ctx, pType, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationConfigResponse(rsp)
}

// SaveNotificationConfigWithBodyWithResponse request with arbitrary body returning *SaveNotificationConfigResponse
func (c *ClientWithResponses) SaveNotificationConfigWithBodyWithResponse(ctx context.Context, pType string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveNotificationConfigResponse, error) {
	rsp, err := c.SaveNotificationConfigWithBody(ctx, pType, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveNotificationConfigResponse(rsp)
}

func (c *ClientWithResponses) SaveNotificationConfigWithResponse(ctx context.Context, pType string, application string, body SaveNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveNotificationConfigResponse, error) {
	rsp, err := c.SaveNotificationConfig(ctx, pType, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveNotificationConfigResponse(rsp)
}

// GetAllPipelineConfigsWithResponse request returning *GetAllPipelineConfigsResponse
func (c *ClientWithResponses) GetAllPipelineConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllPipelineConfigsResponse, error) {
	rsp, err := c.GetAllPipelineConfigs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPipelineConfigsResponse(rsp)
}

// ConvertPipelineConfigToPipelineTemplateWithResponse request returning *ConvertPipelineConfigToPipelineTemplateResponse
func (c *ClientWithResponses) ConvertPipelineConfigToPipelineTemplateWithResponse(ctx context.Context, pipelineConfigId string, reqEditors ...RequestEditorFn) (*ConvertPipelineConfigToPipelineTemplateResponse, error) {
	rsp, err := c.ConvertPipelineConfigToPipelineTemplate(ctx, pipelineConfigId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertPipelineConfigToPipelineTemplateResponse(rsp)
}

// GetPipelineConfigHistory1WithResponse request returning *GetPipelineConfigHistory1Response
func (c *ClientWithResponses) GetPipelineConfigHistory1WithResponse(ctx context.Context, pipelineConfigId string, params *GetPipelineConfigHistory1Params, reqEditors ...RequestEditorFn) (*GetPipelineConfigHistory1Response, error) {
	rsp, err := c.GetPipelineConfigHistory1(ctx, pipelineConfigId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineConfigHistory1Response(rsp)
}

// List3WithResponse request returning *List3Response
func (c *ClientWithResponses) List3WithResponse(ctx context.Context, params *List3Params, reqEditors ...RequestEditorFn) (*List3Response, error) {
	rsp, err := c.List3(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList3Response(rsp)
}

// Create1WithBodyWithResponse request with arbitrary body returning *Create1Response
func (c *ClientWithResponses) Create1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create1Response, error) {
	rsp, err := c.Create1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate1Response(rsp)
}

func (c *ClientWithResponses) Create1WithResponse(ctx context.Context, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*Create1Response, error) {
	rsp, err := c.Create1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate1Response(rsp)
}

// ResolveTemplatesWithResponse request returning *ResolveTemplatesResponse
func (c *ClientWithResponses) ResolveTemplatesWithResponse(ctx context.Context, params *ResolveTemplatesParams, reqEditors ...RequestEditorFn) (*ResolveTemplatesResponse, error) {
	rsp, err := c.ResolveTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveTemplatesResponse(rsp)
}

// Delete2WithResponse request returning *Delete2Response
func (c *ClientWithResponses) Delete2WithResponse(ctx context.Context, id string, params *Delete2Params, reqEditors ...RequestEditorFn) (*Delete2Response, error) {
	rsp, err := c.Delete2(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete2Response(rsp)
}

// Get3WithResponse request returning *Get3Response
func (c *ClientWithResponses) Get3WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Get3Response, error) {
	rsp, err := c.Get3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet3Response(rsp)
}

// Update1WithBodyWithResponse request with arbitrary body returning *Update1Response
func (c *ClientWithResponses) Update1WithBodyWithResponse(ctx context.Context, id string, params *Update1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update1Response, error) {
	rsp, err := c.Update1WithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate1Response(rsp)
}

func (c *ClientWithResponses) Update1WithResponse(ctx context.Context, id string, params *Update1Params, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*Update1Response, error) {
	rsp, err := c.Update1(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate1Response(rsp)
}

// ListPipelineTemplateDependents1WithResponse request returning *ListPipelineTemplateDependents1Response
func (c *ClientWithResponses) ListPipelineTemplateDependents1WithResponse(ctx context.Context, id string, params *ListPipelineTemplateDependents1Params, reqEditors ...RequestEditorFn) (*ListPipelineTemplateDependents1Response, error) {
	rsp, err := c.ListPipelineTemplateDependents1(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineTemplateDependents1Response(rsp)
}

// SavePipelineWithBodyWithResponse request with arbitrary body returning *SavePipelineResponse
func (c *ClientWithResponses) SavePipelineWithBodyWithResponse(ctx context.Context, params *SavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavePipelineResponse, error) {
	rsp, err := c.SavePipelineWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavePipelineResponse(rsp)
}

func (c *ClientWithResponses) SavePipelineWithResponse(ctx context.Context, params *SavePipelineParams, body SavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*SavePipelineResponse, error) {
	rsp, err := c.SavePipeline(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavePipelineResponse(rsp)
}

// BulksavePipelineWithBodyWithResponse request with arbitrary body returning *BulksavePipelineResponse
func (c *ClientWithResponses) BulksavePipelineWithBodyWithResponse(ctx context.Context, params *BulksavePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulksavePipelineResponse, error) {
	rsp, err := c.BulksavePipelineWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulksavePipelineResponse(rsp)
}

func (c *ClientWithResponses) BulksavePipelineWithResponse(ctx context.Context, params *BulksavePipelineParams, body BulksavePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*BulksavePipelineResponse, error) {
	rsp, err := c.BulksavePipeline(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulksavePipelineResponse(rsp)
}

// RenamePipelineWithBodyWithResponse request with arbitrary body returning *RenamePipelineResponse
func (c *ClientWithResponses) RenamePipelineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenamePipelineResponse, error) {
	rsp, err := c.RenamePipelineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenamePipelineResponse(rsp)
}

func (c *ClientWithResponses) RenamePipelineWithResponse(ctx context.Context, body RenamePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*RenamePipelineResponse, error) {
	rsp, err := c.RenamePipeline(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenamePipelineResponse(rsp)
}

// StartWithBodyWithResponse request with arbitrary body returning *StartResponse
func (c *ClientWithResponses) StartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartResponse, error) {
	rsp, err := c.StartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartResponse(rsp)
}

func (c *ClientWithResponses) StartWithResponse(ctx context.Context, body StartJSONRequestBody, reqEditors ...RequestEditorFn) (*StartResponse, error) {
	rsp, err := c.Start(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartResponse(rsp)
}

// InvokePipelineConfigViaEchoWithBodyWithResponse request with arbitrary body returning *InvokePipelineConfigViaEchoResponse
func (c *ClientWithResponses) InvokePipelineConfigViaEchoWithBodyWithResponse(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfigViaEchoResponse, error) {
	rsp, err := c.InvokePipelineConfigViaEchoWithBody(ctx, application, pipelineNameOrId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfigViaEchoResponse(rsp)
}

func (c *ClientWithResponses) InvokePipelineConfigViaEchoWithResponse(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigViaEchoJSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfigViaEchoResponse, error) {
	rsp, err := c.InvokePipelineConfigViaEcho(ctx, application, pipelineNameOrId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfigViaEchoResponse(rsp)
}

// InvokePipelineConfigWithBodyWithResponse request with arbitrary body returning *InvokePipelineConfigResponse
func (c *ClientWithResponses) InvokePipelineConfigWithBodyWithResponse(ctx context.Context, application string, pipelineNameOrId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvokePipelineConfigResponse, error) {
	rsp, err := c.InvokePipelineConfigWithBody(ctx, application, pipelineNameOrId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfigResponse(rsp)
}

func (c *ClientWithResponses) InvokePipelineConfigWithResponse(ctx context.Context, application string, pipelineNameOrId string, body InvokePipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*InvokePipelineConfigResponse, error) {
	rsp, err := c.InvokePipelineConfig(ctx, application, pipelineNameOrId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokePipelineConfigResponse(rsp)
}

// DeletePipeline1WithResponse request returning *DeletePipeline1Response
func (c *ClientWithResponses) DeletePipeline1WithResponse(ctx context.Context, application string, pipelineName string, reqEditors ...RequestEditorFn) (*DeletePipeline1Response, error) {
	rsp, err := c.DeletePipeline1(ctx, application, pipelineName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipeline1Response(rsp)
}

// DeletePipelineWithResponse request returning *DeletePipelineResponse
func (c *ClientWithResponses) DeletePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error) {
	rsp, err := c.DeletePipeline(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineResponse(rsp)
}

// GetPipelineWithResponse request returning *GetPipelineResponse
func (c *ClientWithResponses) GetPipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error) {
	rsp, err := c.GetPipeline(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineResponse(rsp)
}

// UpdatePipelineWithBodyWithResponse request with arbitrary body returning *UpdatePipelineResponse
func (c *ClientWithResponses) UpdatePipelineWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.UpdatePipelineWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResponse(rsp)
}

func (c *ClientWithResponses) UpdatePipelineWithResponse(ctx context.Context, id string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.UpdatePipeline(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResponse(rsp)
}

// CancelPipelineWithResponse request returning *CancelPipelineResponse
func (c *ClientWithResponses) CancelPipelineWithResponse(ctx context.Context, id string, params *CancelPipelineParams, reqEditors ...RequestEditorFn) (*CancelPipelineResponse, error) {
	rsp, err := c.CancelPipeline(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPipelineResponse(rsp)
}

// EvaluateExpressionForExecutionWithResponse request returning *EvaluateExpressionForExecutionResponse
func (c *ClientWithResponses) EvaluateExpressionForExecutionWithResponse(ctx context.Context, id string, params *EvaluateExpressionForExecutionParams, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionResponse, error) {
	rsp, err := c.EvaluateExpressionForExecution(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateExpressionForExecutionResponse(rsp)
}

// EvaluateExpressionForExecutionViaPOST1WithBodyWithResponse request with arbitrary body returning *EvaluateExpressionForExecutionViaPOST1Response
func (c *ClientWithResponses) EvaluateExpressionForExecutionViaPOST1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error) {
	rsp, err := c.EvaluateExpressionForExecutionViaPOST1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateExpressionForExecutionViaPOST1Response(rsp)
}

func (c *ClientWithResponses) EvaluateExpressionForExecutionViaPOST1WithResponse(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error) {
	rsp, err := c.EvaluateExpressionForExecutionViaPOST1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateExpressionForExecutionViaPOST1Response(rsp)
}

func (c *ClientWithResponses) EvaluateExpressionForExecutionViaPOST1WithTextBodyWithResponse(ctx context.Context, id string, body EvaluateExpressionForExecutionViaPOST1TextRequestBody, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionViaPOST1Response, error) {
	rsp, err := c.EvaluateExpressionForExecutionViaPOST1WithTextBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateExpressionForExecutionViaPOST1Response(rsp)
}

// EvaluateVariablesWithBodyWithResponse request with arbitrary body returning *EvaluateVariablesResponse
func (c *ClientWithResponses) EvaluateVariablesWithBodyWithResponse(ctx context.Context, id string, params *EvaluateVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateVariablesResponse, error) {
	rsp, err := c.EvaluateVariablesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateVariablesResponse(rsp)
}

func (c *ClientWithResponses) EvaluateVariablesWithResponse(ctx context.Context, id string, params *EvaluateVariablesParams, body EvaluateVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateVariablesResponse, error) {
	rsp, err := c.EvaluateVariables(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateVariablesResponse(rsp)
}

// PausePipelineWithResponse request returning *PausePipelineResponse
func (c *ClientWithResponses) PausePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PausePipelineResponse, error) {
	rsp, err := c.PausePipeline(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePausePipelineResponse(rsp)
}

// ResumePipelineWithResponse request returning *ResumePipelineResponse
func (c *ClientWithResponses) ResumePipelineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ResumePipelineResponse, error) {
	rsp, err := c.ResumePipeline(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumePipelineResponse(rsp)
}

// UpdateStageWithBodyWithResponse request with arbitrary body returning *UpdateStageResponse
func (c *ClientWithResponses) UpdateStageWithBodyWithResponse(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStageResponse, error) {
	rsp, err := c.UpdateStageWithBody(ctx, id, stageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStageResponse(rsp)
}

func (c *ClientWithResponses) UpdateStageWithResponse(ctx context.Context, id string, stageId string, body UpdateStageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStageResponse, error) {
	rsp, err := c.UpdateStage(ctx, id, stageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStageResponse(rsp)
}

// RestartStageWithBodyWithResponse request with arbitrary body returning *RestartStageResponse
func (c *ClientWithResponses) RestartStageWithBodyWithResponse(ctx context.Context, id string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartStageResponse, error) {
	rsp, err := c.RestartStageWithBody(ctx, id, stageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartStageResponse(rsp)
}

func (c *ClientWithResponses) RestartStageWithResponse(ctx context.Context, id string, stageId string, body RestartStageJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartStageResponse, error) {
	rsp, err := c.RestartStage(ctx, id, stageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartStageResponse(rsp)
}

// EvaluateExpressionForExecutionAtStageWithResponse request returning *EvaluateExpressionForExecutionAtStageResponse
func (c *ClientWithResponses) EvaluateExpressionForExecutionAtStageWithResponse(ctx context.Context, id string, stageId string, params *EvaluateExpressionForExecutionAtStageParams, reqEditors ...RequestEditorFn) (*EvaluateExpressionForExecutionAtStageResponse, error) {
	rsp, err := c.EvaluateExpressionForExecutionAtStage(ctx, id, stageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateExpressionForExecutionAtStageResponse(rsp)
}

// GetPluginManifestWithResponse request returning *GetPluginManifestResponse
func (c *ClientWithResponses) GetPluginManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginManifestResponse, error) {
	rsp, err := c.GetPluginManifest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginManifestResponse(rsp)
}

// GetPluginAssetWithResponse request returning *GetPluginAssetResponse
func (c *ClientWithResponses) GetPluginAssetWithResponse(ctx context.Context, pluginId string, pluginVersion string, asset string, reqEditors ...RequestEditorFn) (*GetPluginAssetResponse, error) {
	rsp, err := c.GetPluginAsset(ctx, pluginId, pluginVersion, asset, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginAssetResponse(rsp)
}

// GetAllPluginInfoWithResponse request returning *GetAllPluginInfoResponse
func (c *ClientWithResponses) GetAllPluginInfoWithResponse(ctx context.Context, params *GetAllPluginInfoParams, reqEditors ...RequestEditorFn) (*GetAllPluginInfoResponse, error) {
	rsp, err := c.GetAllPluginInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPluginInfoResponse(rsp)
}

// PersistPluginInfoWithBodyWithResponse request with arbitrary body returning *PersistPluginInfoResponse
func (c *ClientWithResponses) PersistPluginInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PersistPluginInfoResponse, error) {
	rsp, err := c.PersistPluginInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePersistPluginInfoResponse(rsp)
}

func (c *ClientWithResponses) PersistPluginInfoWithResponse(ctx context.Context, body PersistPluginInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PersistPluginInfoResponse, error) {
	rsp, err := c.PersistPluginInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePersistPluginInfoResponse(rsp)
}

// PersistPluginInfo1WithBodyWithResponse request with arbitrary body returning *PersistPluginInfo1Response
func (c *ClientWithResponses) PersistPluginInfo1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PersistPluginInfo1Response, error) {
	rsp, err := c.PersistPluginInfo1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePersistPluginInfo1Response(rsp)
}

func (c *ClientWithResponses) PersistPluginInfo1WithResponse(ctx context.Context, body PersistPluginInfo1JSONRequestBody, reqEditors ...RequestEditorFn) (*PersistPluginInfo1Response, error) {
	rsp, err := c.PersistPluginInfo1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePersistPluginInfo1Response(rsp)
}

// DeletePluginInfoWithResponse request returning *DeletePluginInfoResponse
func (c *ClientWithResponses) DeletePluginInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePluginInfoResponse, error) {
	rsp, err := c.DeletePluginInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePluginInfoResponse(rsp)
}

// GetInstalledPluginsWithResponse request returning *GetInstalledPluginsResponse
func (c *ClientWithResponses) GetInstalledPluginsWithResponse(ctx context.Context, params *GetInstalledPluginsParams, reqEditors ...RequestEditorFn) (*GetInstalledPluginsResponse, error) {
	rsp, err := c.GetInstalledPlugins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstalledPluginsResponse(rsp)
}

// PublishPluginWithBodyWithResponse request with arbitrary body returning *PublishPluginResponse
func (c *ClientWithResponses) PublishPluginWithBodyWithResponse(ctx context.Context, pluginId string, pluginVersion string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishPluginResponse, error) {
	rsp, err := c.PublishPluginWithBody(ctx, pluginId, pluginVersion, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishPluginResponse(rsp)
}

// All4WithResponse request returning *All4Response
func (c *ClientWithResponses) All4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All4Response, error) {
	rsp, err := c.All4(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll4Response(rsp)
}

// Get2WithResponse request returning *Get2Response
func (c *ClientWithResponses) Get2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Get2Response, error) {
	rsp, err := c.Get2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet2Response(rsp)
}

// GetClustersWithResponse request returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, id string, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// AllPipelinesForProjectWithResponse request returning *AllPipelinesForProjectResponse
func (c *ClientWithResponses) AllPipelinesForProjectWithResponse(ctx context.Context, id string, params *AllPipelinesForProjectParams, reqEditors ...RequestEditorFn) (*AllPipelinesForProjectResponse, error) {
	rsp, err := c.AllPipelinesForProject(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllPipelinesForProjectResponse(rsp)
}

// List2WithResponse request returning *List2Response
func (c *ClientWithResponses) List2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List2Response, error) {
	rsp, err := c.List2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList2Response(rsp)
}

// Any3WithResponse request returning *Any3Response
func (c *ClientWithResponses) Any3WithResponse(ctx context.Context, proxy string, params *Any3Params, reqEditors ...RequestEditorFn) (*Any3Response, error) {
	rsp, err := c.Any3(ctx, proxy, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny3Response(rsp)
}

// AnyWithResponse request returning *AnyResponse
func (c *ClientWithResponses) AnyWithResponse(ctx context.Context, proxy string, params *AnyParams, reqEditors ...RequestEditorFn) (*AnyResponse, error) {
	rsp, err := c.Any(ctx, proxy, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyResponse(rsp)
}

// Any1WithResponse request returning *Any1Response
func (c *ClientWithResponses) Any1WithResponse(ctx context.Context, proxy string, params *Any1Params, reqEditors ...RequestEditorFn) (*Any1Response, error) {
	rsp, err := c.Any1(ctx, proxy, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny1Response(rsp)
}

// Any2WithResponse request returning *Any2Response
func (c *ClientWithResponses) Any2WithResponse(ctx context.Context, proxy string, params *Any2Params, reqEditors ...RequestEditorFn) (*Any2Response, error) {
	rsp, err := c.Any2(ctx, proxy, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAny2Response(rsp)
}

// All3WithResponse request returning *All3Response
func (c *ClientWithResponses) All3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*All3Response, error) {
	rsp, err := c.All3(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll3Response(rsp)
}

// Api1WithResponse request returning *Api1Response
func (c *ClientWithResponses) Api1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Api1Response, error) {
	rsp, err := c.Api1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApi1Response(rsp)
}

// All2WithResponse request returning *All2Response
func (c *ClientWithResponses) All2WithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*All2Response, error) {
	rsp, err := c.All2(ctx, cloudProvider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll2Response(rsp)
}

// SearchWithResponse request returning *SearchResponse
func (c *ClientWithResponses) SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error) {
	rsp, err := c.Search(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchResponse(rsp)
}

// All1WithResponse request returning *All1Response
func (c *ClientWithResponses) All1WithResponse(ctx context.Context, params *All1Params, reqEditors ...RequestEditorFn) (*All1Response, error) {
	rsp, err := c.All1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAll1Response(rsp)
}

// AllByAccountWithResponse request returning *AllByAccountResponse
func (c *ClientWithResponses) AllByAccountWithResponse(ctx context.Context, account string, params *AllByAccountParams, reqEditors ...RequestEditorFn) (*AllByAccountResponse, error) {
	rsp, err := c.AllByAccount(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByAccountResponse(rsp)
}

// GetSecurityGroupWithResponse request returning *GetSecurityGroupResponse
func (c *ClientWithResponses) GetSecurityGroupWithResponse(ctx context.Context, account string, region string, name string, params *GetSecurityGroupParams, reqEditors ...RequestEditorFn) (*GetSecurityGroupResponse, error) {
	rsp, err := c.GetSecurityGroup(ctx, account, region, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecurityGroupResponse(rsp)
}

// GetServerGroupsWithResponse request returning *GetServerGroupsResponse
func (c *ClientWithResponses) GetServerGroupsWithResponse(ctx context.Context, params *GetServerGroupsParams, reqEditors ...RequestEditorFn) (*GetServerGroupsResponse, error) {
	rsp, err := c.GetServerGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerGroupsResponse(rsp)
}

// GetServiceInstanceWithResponse request returning *GetServiceInstanceResponse
func (c *ClientWithResponses) GetServiceInstanceWithResponse(ctx context.Context, account string, params *GetServiceInstanceParams, reqEditors ...RequestEditorFn) (*GetServiceInstanceResponse, error) {
	rsp, err := c.GetServiceInstance(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceInstanceResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, account string, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// AllWithResponse request returning *AllResponse
func (c *ClientWithResponses) AllWithResponse(ctx context.Context, params *AllParams, reqEditors ...RequestEditorFn) (*AllResponse, error) {
	rsp, err := c.All(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllResponse(rsp)
}

// SaveStrategyWithBodyWithResponse request with arbitrary body returning *SaveStrategyResponse
func (c *ClientWithResponses) SaveStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveStrategyResponse, error) {
	rsp, err := c.SaveStrategyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveStrategyResponse(rsp)
}

func (c *ClientWithResponses) SaveStrategyWithResponse(ctx context.Context, body SaveStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveStrategyResponse, error) {
	rsp, err := c.SaveStrategy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveStrategyResponse(rsp)
}

// RenameStrategyWithBodyWithResponse request with arbitrary body returning *RenameStrategyResponse
func (c *ClientWithResponses) RenameStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenameStrategyResponse, error) {
	rsp, err := c.RenameStrategyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenameStrategyResponse(rsp)
}

func (c *ClientWithResponses) RenameStrategyWithResponse(ctx context.Context, body RenameStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*RenameStrategyResponse, error) {
	rsp, err := c.RenameStrategy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenameStrategyResponse(rsp)
}

// DeleteStrategyWithResponse request returning *DeleteStrategyResponse
func (c *ClientWithResponses) DeleteStrategyWithResponse(ctx context.Context, application string, strategyName string, reqEditors ...RequestEditorFn) (*DeleteStrategyResponse, error) {
	rsp, err := c.DeleteStrategy(ctx, application, strategyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStrategyResponse(rsp)
}

// UpdateStrategyWithBodyWithResponse request with arbitrary body returning *UpdateStrategyResponse
func (c *ClientWithResponses) UpdateStrategyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error) {
	rsp, err := c.UpdateStrategyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStrategyResponse(rsp)
}

func (c *ClientWithResponses) UpdateStrategyWithResponse(ctx context.Context, id string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error) {
	rsp, err := c.UpdateStrategy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStrategyResponse(rsp)
}

// GetAllStrategyConfigsWithResponse request returning *GetAllStrategyConfigsResponse
func (c *ClientWithResponses) GetAllStrategyConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStrategyConfigsResponse, error) {
	rsp, err := c.GetAllStrategyConfigs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStrategyConfigsResponse(rsp)
}

// GetPipelineConfigHistoryWithResponse request returning *GetPipelineConfigHistoryResponse
func (c *ClientWithResponses) GetPipelineConfigHistoryWithResponse(ctx context.Context, strategyConfigId string, params *GetPipelineConfigHistoryParams, reqEditors ...RequestEditorFn) (*GetPipelineConfigHistoryResponse, error) {
	rsp, err := c.GetPipelineConfigHistory(ctx, strategyConfigId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineConfigHistoryResponse(rsp)
}

// SubnetsWithResponse request returning *SubnetsResponse
func (c *ClientWithResponses) SubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubnetsResponse, error) {
	rsp, err := c.Subnets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubnetsResponse(rsp)
}

// AllByCloudProviderWithResponse request returning *AllByCloudProviderResponse
func (c *ClientWithResponses) AllByCloudProviderWithResponse(ctx context.Context, cloudProvider string, reqEditors ...RequestEditorFn) (*AllByCloudProviderResponse, error) {
	rsp, err := c.AllByCloudProvider(ctx, cloudProvider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllByCloudProviderResponse(rsp)
}

// List1WithResponse request returning *List1Response
func (c *ClientWithResponses) List1WithResponse(ctx context.Context, params *List1Params, reqEditors ...RequestEditorFn) (*List1Response, error) {
	rsp, err := c.List1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList1Response(rsp)
}

// PostWithBodyWithResponse request with arbitrary body returning *PostResponse
func (c *ClientWithResponses) PostWithBodyWithResponse(ctx context.Context, params *PostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.PostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

func (c *ClientWithResponses) PostWithResponse(ctx context.Context, params *PostParams, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.Post(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

// Get1WithResponse request returning *Get1Response
func (c *ClientWithResponses) Get1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1Response, error) {
	rsp, err := c.Get1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1Response(rsp)
}

// Delete1WithResponse request returning *Delete1Response
func (c *ClientWithResponses) Delete1WithResponse(ctx context.Context, id string, tag string, params *Delete1Params, reqEditors ...RequestEditorFn) (*Delete1Response, error) {
	rsp, err := c.Delete1(ctx, id, tag, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete1Response(rsp)
}

// TaskWithBodyWithResponse request with arbitrary body returning *TaskResponse
func (c *ClientWithResponses) TaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TaskResponse, error) {
	rsp, err := c.TaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTaskResponse(rsp)
}

func (c *ClientWithResponses) TaskWithResponse(ctx context.Context, body TaskJSONRequestBody, reqEditors ...RequestEditorFn) (*TaskResponse, error) {
	rsp, err := c.Task(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTaskResponse(rsp)
}

// CancelTasksWithResponse request returning *CancelTasksResponse
func (c *ClientWithResponses) CancelTasksWithResponse(ctx context.Context, params *CancelTasksParams, reqEditors ...RequestEditorFn) (*CancelTasksResponse, error) {
	rsp, err := c.CancelTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelTasksResponse(rsp)
}

// DeleteTaskWithResponse request returning *DeleteTaskResponse
func (c *ClientWithResponses) DeleteTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error) {
	rsp, err := c.DeleteTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// CancelTaskWithResponse request returning *CancelTaskResponse
func (c *ClientWithResponses) CancelTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelTaskResponse, error) {
	rsp, err := c.CancelTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelTaskResponse(rsp)
}

// GetTaskDetailsWithResponse request returning *GetTaskDetailsResponse
func (c *ClientWithResponses) GetTaskDetailsWithResponse(ctx context.Context, id string, taskDetailsId string, params *GetTaskDetailsParams, reqEditors ...RequestEditorFn) (*GetTaskDetailsResponse, error) {
	rsp, err := c.GetTaskDetails(ctx, id, taskDetailsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskDetailsResponse(rsp)
}

// ApiWithResponse request returning *ApiResponse
func (c *ClientWithResponses) ApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiResponse, error) {
	rsp, err := c.Api(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiResponse(rsp)
}

// AsyncApiWithResponse request returning *AsyncApiResponse
func (c *ClientWithResponses) AsyncApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AsyncApiResponse, error) {
	rsp, err := c.AsyncApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAsyncApiResponse(rsp)
}

// GetAdhocData5WithResponse request returning *GetAdhocData5Response
func (c *ClientWithResponses) GetAdhocData5WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData5Params, reqEditors ...RequestEditorFn) (*GetAdhocData5Response, error) {
	rsp, err := c.GetAdhocData5(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData5Response(rsp)
}

// GetAdhocDataWithResponse request returning *GetAdhocDataResponse
func (c *ClientWithResponses) GetAdhocDataWithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocDataParams, reqEditors ...RequestEditorFn) (*GetAdhocDataResponse, error) {
	rsp, err := c.GetAdhocData(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocDataResponse(rsp)
}

// GetAdhocData1WithResponse request returning *GetAdhocData1Response
func (c *ClientWithResponses) GetAdhocData1WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData1Params, reqEditors ...RequestEditorFn) (*GetAdhocData1Response, error) {
	rsp, err := c.GetAdhocData1(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData1Response(rsp)
}

// GetAdhocData6WithResponse request returning *GetAdhocData6Response
func (c *ClientWithResponses) GetAdhocData6WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData6Params, reqEditors ...RequestEditorFn) (*GetAdhocData6Response, error) {
	rsp, err := c.GetAdhocData6(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData6Response(rsp)
}

// GetAdhocData4WithResponse request returning *GetAdhocData4Response
func (c *ClientWithResponses) GetAdhocData4WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData4Params, reqEditors ...RequestEditorFn) (*GetAdhocData4Response, error) {
	rsp, err := c.GetAdhocData4(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData4Response(rsp)
}

// GetAdhocData2WithResponse request returning *GetAdhocData2Response
func (c *ClientWithResponses) GetAdhocData2WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData2Params, reqEditors ...RequestEditorFn) (*GetAdhocData2Response, error) {
	rsp, err := c.GetAdhocData2(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData2Response(rsp)
}

// GetAdhocData3WithResponse request returning *GetAdhocData3Response
func (c *ClientWithResponses) GetAdhocData3WithResponse(ctx context.Context, groupId string, bucketId string, params *GetAdhocData3Params, reqEditors ...RequestEditorFn) (*GetAdhocData3Response, error) {
	rsp, err := c.GetAdhocData3(ctx, groupId, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdhocData3Response(rsp)
}

// GetStaticDataWithResponse request returning *GetStaticDataResponse
func (c *ClientWithResponses) GetStaticDataWithResponse(ctx context.Context, id string, params *GetStaticDataParams, reqEditors ...RequestEditorFn) (*GetStaticDataResponse, error) {
	rsp, err := c.GetStaticData(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticDataResponse(rsp)
}

// GetBuildMastersWithResponse request returning *GetBuildMastersResponse
func (c *ClientWithResponses) GetBuildMastersWithResponse(ctx context.Context, params *GetBuildMastersParams, reqEditors ...RequestEditorFn) (*GetBuildMastersResponse, error) {
	rsp, err := c.GetBuildMasters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildMastersResponse(rsp)
}

// GetBuildWithResponse request returning *GetBuildResponse
func (c *ClientWithResponses) GetBuildWithResponse(ctx context.Context, buildMaster string, number string, reqEditors ...RequestEditorFn) (*GetBuildResponse, error) {
	rsp, err := c.GetBuild(ctx, buildMaster, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildResponse(rsp)
}

// GetBuildsWithResponse request returning *GetBuildsResponse
func (c *ClientWithResponses) GetBuildsWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetBuildsResponse, error) {
	rsp, err := c.GetBuilds(ctx, buildMaster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildsResponse(rsp)
}

// GetJobsForBuildMasterWithResponse request returning *GetJobsForBuildMasterResponse
func (c *ClientWithResponses) GetJobsForBuildMasterWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetJobsForBuildMasterResponse, error) {
	rsp, err := c.GetJobsForBuildMaster(ctx, buildMaster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsForBuildMasterResponse(rsp)
}

// GetJobConfigWithResponse request returning *GetJobConfigResponse
func (c *ClientWithResponses) GetJobConfigWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*GetJobConfigResponse, error) {
	rsp, err := c.GetJobConfig(ctx, buildMaster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobConfigResponse(rsp)
}

// InitiateCanaryWithConfigWithBodyWithResponse request with arbitrary body returning *InitiateCanaryWithConfigResponse
func (c *ClientWithResponses) InitiateCanaryWithConfigWithBodyWithResponse(ctx context.Context, params *InitiateCanaryWithConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitiateCanaryWithConfigResponse, error) {
	rsp, err := c.InitiateCanaryWithConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitiateCanaryWithConfigResponse(rsp)
}

func (c *ClientWithResponses) InitiateCanaryWithConfigWithResponse(ctx context.Context, params *InitiateCanaryWithConfigParams, body InitiateCanaryWithConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*InitiateCanaryWithConfigResponse, error) {
	rsp, err := c.InitiateCanaryWithConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitiateCanaryWithConfigResponse(rsp)
}

// InitiateCanaryWithBodyWithResponse request with arbitrary body returning *InitiateCanaryResponse
func (c *ClientWithResponses) InitiateCanaryWithBodyWithResponse(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitiateCanaryResponse, error) {
	rsp, err := c.InitiateCanaryWithBody(ctx, canaryConfigId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitiateCanaryResponse(rsp)
}

func (c *ClientWithResponses) InitiateCanaryWithResponse(ctx context.Context, canaryConfigId string, params *InitiateCanaryParams, body InitiateCanaryJSONRequestBody, reqEditors ...RequestEditorFn) (*InitiateCanaryResponse, error) {
	rsp, err := c.InitiateCanary(ctx, canaryConfigId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitiateCanaryResponse(rsp)
}

// GetCanaryResult1WithResponse request returning *GetCanaryResult1Response
func (c *ClientWithResponses) GetCanaryResult1WithResponse(ctx context.Context, canaryConfigId string, canaryExecutionId string, params *GetCanaryResult1Params, reqEditors ...RequestEditorFn) (*GetCanaryResult1Response, error) {
	rsp, err := c.GetCanaryResult1(ctx, canaryConfigId, canaryExecutionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCanaryResult1Response(rsp)
}

// GetCanaryResultWithResponse request returning *GetCanaryResultResponse
func (c *ClientWithResponses) GetCanaryResultWithResponse(ctx context.Context, canaryExecutionId string, params *GetCanaryResultParams, reqEditors ...RequestEditorFn) (*GetCanaryResultResponse, error) {
	rsp, err := c.GetCanaryResult(ctx, canaryExecutionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCanaryResultResponse(rsp)
}

// ListCredentialsWithResponse request returning *ListCredentialsResponse
func (c *ClientWithResponses) ListCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCredentialsResponse, error) {
	rsp, err := c.ListCredentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCredentialsResponse(rsp)
}

// ListJudgesWithResponse request returning *ListJudgesResponse
func (c *ClientWithResponses) ListJudgesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJudgesResponse, error) {
	rsp, err := c.ListJudges(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJudgesResponse(rsp)
}

// ListMetricsServiceMetadataWithResponse request returning *ListMetricsServiceMetadataResponse
func (c *ClientWithResponses) ListMetricsServiceMetadataWithResponse(ctx context.Context, params *ListMetricsServiceMetadataParams, reqEditors ...RequestEditorFn) (*ListMetricsServiceMetadataResponse, error) {
	rsp, err := c.ListMetricsServiceMetadata(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsServiceMetadataResponse(rsp)
}

// GetMetricSetPairListWithResponse request returning *GetMetricSetPairListResponse
func (c *ClientWithResponses) GetMetricSetPairListWithResponse(ctx context.Context, metricSetPairListId string, params *GetMetricSetPairListParams, reqEditors ...RequestEditorFn) (*GetMetricSetPairListResponse, error) {
	rsp, err := c.GetMetricSetPairList(ctx, metricSetPairListId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricSetPairListResponse(rsp)
}

// GetCanaryResultsByApplicationWithResponse request returning *GetCanaryResultsByApplicationResponse
func (c *ClientWithResponses) GetCanaryResultsByApplicationWithResponse(ctx context.Context, application string, params *GetCanaryResultsByApplicationParams, reqEditors ...RequestEditorFn) (*GetCanaryResultsByApplicationResponse, error) {
	rsp, err := c.GetCanaryResultsByApplication(ctx, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCanaryResultsByApplicationResponse(rsp)
}

// GetCanaryConfigsWithResponse request returning *GetCanaryConfigsResponse
func (c *ClientWithResponses) GetCanaryConfigsWithResponse(ctx context.Context, params *GetCanaryConfigsParams, reqEditors ...RequestEditorFn) (*GetCanaryConfigsResponse, error) {
	rsp, err := c.GetCanaryConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCanaryConfigsResponse(rsp)
}

// CreateCanaryConfigWithBodyWithResponse request with arbitrary body returning *CreateCanaryConfigResponse
func (c *ClientWithResponses) CreateCanaryConfigWithBodyWithResponse(ctx context.Context, params *CreateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCanaryConfigResponse, error) {
	rsp, err := c.CreateCanaryConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCanaryConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateCanaryConfigWithResponse(ctx context.Context, params *CreateCanaryConfigParams, body CreateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCanaryConfigResponse, error) {
	rsp, err := c.CreateCanaryConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCanaryConfigResponse(rsp)
}

// DeleteCanaryConfigWithResponse request returning *DeleteCanaryConfigResponse
func (c *ClientWithResponses) DeleteCanaryConfigWithResponse(ctx context.Context, id string, params *DeleteCanaryConfigParams, reqEditors ...RequestEditorFn) (*DeleteCanaryConfigResponse, error) {
	rsp, err := c.DeleteCanaryConfig(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCanaryConfigResponse(rsp)
}

// GetCanaryConfigWithResponse request returning *GetCanaryConfigResponse
func (c *ClientWithResponses) GetCanaryConfigWithResponse(ctx context.Context, id string, params *GetCanaryConfigParams, reqEditors ...RequestEditorFn) (*GetCanaryConfigResponse, error) {
	rsp, err := c.GetCanaryConfig(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCanaryConfigResponse(rsp)
}

// UpdateCanaryConfigWithBodyWithResponse request with arbitrary body returning *UpdateCanaryConfigResponse
func (c *ClientWithResponses) UpdateCanaryConfigWithBodyWithResponse(ctx context.Context, id string, params *UpdateCanaryConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCanaryConfigResponse, error) {
	rsp, err := c.UpdateCanaryConfigWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCanaryConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateCanaryConfigWithResponse(ctx context.Context, id string, params *UpdateCanaryConfigParams, body UpdateCanaryConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCanaryConfigResponse, error) {
	rsp, err := c.UpdateCanaryConfig(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCanaryConfigResponse(rsp)
}

// ListWithResponse request returning *ListResponse
func (c *ClientWithResponses) ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResponse(rsp)
}

// CreateWithBodyWithResponse request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBodyWithResponse(ctx context.Context, params *CreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, params *CreateParams, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

// PlanWithBodyWithResponse request with arbitrary body returning *PlanResponse
func (c *ClientWithResponses) PlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlanResponse, error) {
	rsp, err := c.PlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanResponse(rsp)
}

func (c *ClientWithResponses) PlanWithResponse(ctx context.Context, body PlanJSONRequestBody, reqEditors ...RequestEditorFn) (*PlanResponse, error) {
	rsp, err := c.Plan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlanResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, id string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, id string, params *UpdateParams, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// ListVersionsWithResponse request returning *ListVersionsResponse
func (c *ClientWithResponses) ListVersionsWithResponse(ctx context.Context, params *ListVersionsParams, reqEditors ...RequestEditorFn) (*ListVersionsResponse, error) {
	rsp, err := c.ListVersions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListVersionsResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, id string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// ListPipelineTemplateDependentsWithResponse request returning *ListPipelineTemplateDependentsResponse
func (c *ClientWithResponses) ListPipelineTemplateDependentsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListPipelineTemplateDependentsResponse, error) {
	rsp, err := c.ListPipelineTemplateDependents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineTemplateDependentsResponse(rsp)
}

// V3GetBuildMastersWithResponse request returning *V3GetBuildMastersResponse
func (c *ClientWithResponses) V3GetBuildMastersWithResponse(ctx context.Context, params *V3GetBuildMastersParams, reqEditors ...RequestEditorFn) (*V3GetBuildMastersResponse, error) {
	rsp, err := c.V3GetBuildMasters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV3GetBuildMastersResponse(rsp)
}

// V3GetBuildWithResponse request returning *V3GetBuildResponse
func (c *ClientWithResponses) V3GetBuildWithResponse(ctx context.Context, buildMaster string, number string, params *V3GetBuildParams, reqEditors ...RequestEditorFn) (*V3GetBuildResponse, error) {
	rsp, err := c.V3GetBuild(ctx, buildMaster, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV3GetBuildResponse(rsp)
}

// V3GetBuildsWithResponse request returning *V3GetBuildsResponse
func (c *ClientWithResponses) V3GetBuildsWithResponse(ctx context.Context, buildMaster string, params *V3GetBuildsParams, reqEditors ...RequestEditorFn) (*V3GetBuildsResponse, error) {
	rsp, err := c.V3GetBuilds(ctx, buildMaster, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV3GetBuildsResponse(rsp)
}

// V3GetJobConfigWithResponse request returning *V3GetJobConfigResponse
func (c *ClientWithResponses) V3GetJobConfigWithResponse(ctx context.Context, buildMaster string, params *V3GetJobConfigParams, reqEditors ...RequestEditorFn) (*V3GetJobConfigResponse, error) {
	rsp, err := c.V3GetJobConfig(ctx, buildMaster, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV3GetJobConfigResponse(rsp)
}

// V3GetJobsForBuildMasterWithResponse request returning *V3GetJobsForBuildMasterResponse
func (c *ClientWithResponses) V3GetJobsForBuildMasterWithResponse(ctx context.Context, buildMaster string, reqEditors ...RequestEditorFn) (*V3GetJobsForBuildMasterResponse, error) {
	rsp, err := c.V3GetJobsForBuildMaster(ctx, buildMaster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV3GetJobsForBuildMasterResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// VpcsWithResponse request returning *VpcsResponse
func (c *ClientWithResponses) VpcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VpcsResponse, error) {
	rsp, err := c.Vpcs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVpcsResponse(rsp)
}

// Webhooks1WithBodyWithResponse request with arbitrary body returning *Webhooks1Response
func (c *ClientWithResponses) Webhooks1WithBodyWithResponse(ctx context.Context, source string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Webhooks1Response, error) {
	rsp, err := c.Webhooks1WithBody(ctx, source, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebhooks1Response(rsp)
}

func (c *ClientWithResponses) Webhooks1WithResponse(ctx context.Context, source string, body Webhooks1JSONRequestBody, reqEditors ...RequestEditorFn) (*Webhooks1Response, error) {
	rsp, err := c.Webhooks1(ctx, source, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebhooks1Response(rsp)
}

// PreconfiguredWebhooksWithResponse request returning *PreconfiguredWebhooksResponse
func (c *ClientWithResponses) PreconfiguredWebhooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PreconfiguredWebhooksResponse, error) {
	rsp, err := c.PreconfiguredWebhooks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreconfiguredWebhooksResponse(rsp)
}

// WebhooksWithResponse request returning *WebhooksResponse
func (c *ClientWithResponses) WebhooksWithResponse(ctx context.Context, pType string, source string, params *WebhooksParams, reqEditors ...RequestEditorFn) (*WebhooksResponse, error) {
	rsp, err := c.Webhooks(ctx, pType, source, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebhooksResponse(rsp)
}

// ParseRoot5Response parses an HTTP response from a Root5WithResponse call
func ParseRoot5Response(rsp *http.Response) (*Root5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRootResponse parses an HTTP response from a RootWithResponse call
func ParseRootResponse(rsp *http.Response) (*RootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRoot1Response parses an HTTP response from a Root1WithResponse call
func ParseRoot1Response(rsp *http.Response) (*Root1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRoot6Response parses an HTTP response from a Root6WithResponse call
func ParseRoot6Response(rsp *http.Response) (*Root6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRoot4Response parses an HTTP response from a Root4WithResponse call
func ParseRoot4Response(rsp *http.Response) (*Root4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRoot2Response parses an HTTP response from a Root2WithResponse call
func ParseRoot2Response(rsp *http.Response) (*Root2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRoot3Response parses an HTTP response from a Root3WithResponse call
func ParseRoot3Response(rsp *http.Response) (*Root3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Root3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReorderPipelinesResponse parses an HTTP response from a ReorderPipelinesWithResponse call
func ParseReorderPipelinesResponse(rsp *http.Response) (*ReorderPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReorderPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReorderPipelineStrategiesResponse parses an HTTP response from a ReorderPipelineStrategiesWithResponse call
func ParseReorderPipelineStrategiesResponse(rsp *http.Response) (*ReorderPipelineStrategiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReorderPipelineStrategiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllApplicationsResponse parses an HTTP response from a GetAllApplicationsWithResponse call
func ParseGetAllApplicationsResponse(rsp *http.Response) (*GetAllApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroupsForApplicationResponse parses an HTTP response from a GetServerGroupsForApplicationWithResponse call
func ParseGetServerGroupsForApplicationResponse(rsp *http.Response) (*GetServerGroupsForApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroupsForApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroupDetailsResponse parses an HTTP response from a GetServerGroupDetailsWithResponse call
func ParseGetServerGroupDetailsResponse(rsp *http.Response) (*GetServerGroupDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroupDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusters1Response parses an HTTP response from a GetClusters1WithResponse call
func ParseGetClusters1Response(rsp *http.Response) (*GetClusters1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusters1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusters2Response parses an HTTP response from a GetClusters2WithResponse call
func ParseGetClusters2Response(rsp *http.Response) (*GetClusters2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusters2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusters3Response parses an HTTP response from a GetClusters3WithResponse call
func ParseGetClusters3Response(rsp *http.Response) (*GetClusters3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusters3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroups1Response parses an HTTP response from a GetServerGroups1WithResponse call
func ParseGetServerGroups1Response(rsp *http.Response) (*GetServerGroups1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroups1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroups2Response parses an HTTP response from a GetServerGroups2WithResponse call
func ParseGetServerGroups2Response(rsp *http.Response) (*GetServerGroups2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroups2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScalingActivitiesResponse parses an HTTP response from a GetScalingActivitiesWithResponse call
func ParseGetScalingActivitiesResponse(rsp *http.Response) (*GetScalingActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScalingActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTargetServerGroupResponse parses an HTTP response from a GetTargetServerGroupWithResponse call
func ParseGetTargetServerGroupResponse(rsp *http.Response) (*GetTargetServerGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetServerGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterLoadBalancersResponse parses an HTTP response from a GetClusterLoadBalancersWithResponse call
func ParseGetClusterLoadBalancersResponse(rsp *http.Response) (*GetClusterLoadBalancersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterLoadBalancersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchForPipelineExecutionsByTriggerResponse parses an HTTP response from a SearchForPipelineExecutionsByTriggerWithResponse call
func ParseSearchForPipelineExecutionsByTriggerResponse(rsp *http.Response) (*SearchForPipelineExecutionsByTriggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForPipelineExecutionsByTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationFunctionsResponse parses an HTTP response from a ApplicationFunctionsWithResponse call
func ParseApplicationFunctionsResponse(rsp *http.Response) (*ApplicationFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationHistoryResponse parses an HTTP response from a GetApplicationHistoryWithResponse call
func ParseGetApplicationHistoryResponse(rsp *http.Response) (*GetApplicationHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationLoadBalancersResponse parses an HTTP response from a GetApplicationLoadBalancersWithResponse call
func ParseGetApplicationLoadBalancersResponse(rsp *http.Response) (*GetApplicationLoadBalancersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationLoadBalancersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineConfigsForApplicationResponse parses an HTTP response from a GetPipelineConfigsForApplicationWithResponse call
func ParseGetPipelineConfigsForApplicationResponse(rsp *http.Response) (*GetPipelineConfigsForApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineConfigsForApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineConfigResponse parses an HTTP response from a GetPipelineConfigWithResponse call
func ParseGetPipelineConfigResponse(rsp *http.Response) (*GetPipelineConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInvokePipelineConfig1Response parses an HTTP response from a InvokePipelineConfig1WithResponse call
func ParseInvokePipelineConfig1Response(rsp *http.Response) (*InvokePipelineConfig1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvokePipelineConfig1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelinesResponse parses an HTTP response from a GetPipelinesWithResponse call
func ParseGetPipelinesResponse(rsp *http.Response) (*GetPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelPipeline1Response parses an HTTP response from a CancelPipeline1WithResponse call
func ParseCancelPipeline1Response(rsp *http.Response) (*CancelPipeline1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPipeline1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationRawResourcesResponse parses an HTTP response from a GetApplicationRawResourcesWithResponse call
func ParseGetApplicationRawResourcesResponse(rsp *http.Response) (*GetApplicationRawResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationRawResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroupManagersForApplicationResponse parses an HTTP response from a GetServerGroupManagersForApplicationWithResponse call
func ParseGetServerGroupManagersForApplicationResponse(rsp *http.Response) (*GetServerGroupManagersForApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroupManagersForApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCurrentSnapshotResponse parses an HTTP response from a GetCurrentSnapshotWithResponse call
func ParseGetCurrentSnapshotResponse(rsp *http.Response) (*GetCurrentSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSnapshotHistoryResponse parses an HTTP response from a GetSnapshotHistoryWithResponse call
func ParseGetSnapshotHistoryResponse(rsp *http.Response) (*GetSnapshotHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStrategyConfigsForApplicationResponse parses an HTTP response from a GetStrategyConfigsForApplicationWithResponse call
func ParseGetStrategyConfigsForApplicationResponse(rsp *http.Response) (*GetStrategyConfigsForApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStrategyConfigsForApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStrategyConfigResponse parses an HTTP response from a GetStrategyConfigWithResponse call
func ParseGetStrategyConfigResponse(rsp *http.Response) (*GetStrategyConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStrategyConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTask1Response parses an HTTP response from a Task1WithResponse call
func ParseTask1Response(rsp *http.Response) (*Task1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Task1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTask1Response parses an HTTP response from a GetTask1WithResponse call
func ParseGetTask1Response(rsp *http.Response) (*GetTask1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTask1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelTask1Response parses an HTTP response from a CancelTask1WithResponse call
func ParseCancelTask1Response(rsp *http.Response) (*CancelTask1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelTask1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskDetails1Response parses an HTTP response from a GetTaskDetails1WithResponse call
func ParseGetTaskDetails1Response(rsp *http.Response) (*GetTaskDetails1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskDetails1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNames1Response parses an HTTP response from a Names1WithResponse call
func ParseNames1Response(rsp *http.Response) (*Names1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Names1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseArtifactNamesResponse parses an HTTP response from a ArtifactNamesWithResponse call
func ParseArtifactNamesResponse(rsp *http.Response) (*ArtifactNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseArtifactVersionsResponse parses an HTTP response from a ArtifactVersionsWithResponse call
func ParseArtifactVersionsResponse(rsp *http.Response) (*ArtifactVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStoredArtifactResponse parses an HTTP response from a GetStoredArtifactWithResponse call
func ParseGetStoredArtifactResponse(rsp *http.Response) (*GetStoredArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoredArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll11Response parses an HTTP response from a All11WithResponse call
func ParseAll11Response(rsp *http.Response) (*All11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchResponse parses an HTTP response from a FetchWithResponse call
func ParseFetchResponse(rsp *http.Response) (*FetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVersionsOfArtifactForProviderResponse parses an HTTP response from a GetVersionsOfArtifactForProviderWithResponse call
func ParseGetVersionsOfArtifactForProviderResponse(rsp *http.Response) (*GetVersionsOfArtifactForProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionsOfArtifactForProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetArtifactResponse parses an HTTP response from a GetArtifactWithResponse call
func ParseGetArtifactResponse(rsp *http.Response) (*GetArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSessionCacheResponse parses an HTTP response from a DeleteSessionCacheWithResponse call
func ParseDeleteSessionCacheResponse(rsp *http.Response) (*DeleteSessionCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoggedOutResponse parses an HTTP response from a LoggedOutWithResponse call
func ParseLoggedOutResponse(rsp *http.Response) (*LoggedOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoggedOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRawUserResponse parses an HTTP response from a RawUserWithResponse call
func ParseRawUserResponse(rsp *http.Response) (*RawUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RawUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRedirectResponse parses an HTTP response from a RedirectWithResponse call
func ParseRedirectResponse(rsp *http.Response) (*RedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSyncResponse parses an HTTP response from a SyncWithResponse call
func ParseSyncResponse(rsp *http.Response) (*SyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUserResponse parses an HTTP response from a UserWithResponse call
func ParseUserResponse(rsp *http.Response) (*UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLookupLogsResponse parses an HTTP response from a LookupLogsWithResponse call
func ParseLookupLogsResponse(rsp *http.Response) (*LookupLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LookupLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBakeOptionsResponse parses an HTTP response from a BakeOptionsWithResponse call
func ParseBakeOptionsResponse(rsp *http.Response) (*BakeOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BakeOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBakeOptions1Response parses an HTTP response from a BakeOptions1WithResponse call
func ParseBakeOptions1Response(rsp *http.Response) (*BakeOptions1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BakeOptions1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBatchUpdateResponse parses an HTTP response from a BatchUpdateWithResponse call
func ParseBatchUpdateResponse(rsp *http.Response) (*BatchUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDeploymentMonitorsResponse parses an HTTP response from a GetDeploymentMonitorsWithResponse call
func ParseGetDeploymentMonitorsResponse(rsp *http.Response) (*GetDeploymentMonitorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentMonitorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExpressionCapabilitiesResponse parses an HTTP response from a GetExpressionCapabilitiesWithResponse call
func ParseGetExpressionCapabilitiesResponse(rsp *http.Response) (*GetExpressionCapabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpressionCapabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetQuietPeriodStateResponse parses an HTTP response from a GetQuietPeriodStateWithResponse call
func ParseGetQuietPeriodStateResponse(rsp *http.Response) (*GetQuietPeriodStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQuietPeriodStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll10Response parses an HTTP response from a All10WithResponse call
func ParseAll10Response(rsp *http.Response) (*All10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByCloudProvider2Response parses an HTTP response from a AllByCloudProvider2WithResponse call
func ParseAllByCloudProvider2Response(rsp *http.Response) (*AllByCloudProvider2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByCloudProvider2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindImages1Response parses an HTTP response from a FindImages1WithResponse call
func ParseFindImages1Response(rsp *http.Response) (*FindImages1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindImages1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindTags1Response parses an HTTP response from a FindTags1WithResponse call
func ParseFindTags1Response(rsp *http.Response) (*FindTags1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindTags1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetImageDetails1Response parses an HTTP response from a GetImageDetails1WithResponse call
func ParseGetImageDetails1Response(rsp *http.Response) (*GetImageDetails1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageDetails1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuilds1Response parses an HTTP response from a GetBuilds1WithResponse call
func ParseGetBuilds1Response(rsp *http.Response) (*GetBuilds1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuilds1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuildOutputByIdResponse parses an HTTP response from a GetBuildOutputByIdWithResponse call
func ParseGetBuildOutputByIdResponse(rsp *http.Response) (*GetBuildOutputByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildOutputByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllDeletedResourcesResponse parses an HTTP response from a GetAllDeletedResourcesWithResponse call
func ParseGetAllDeletedResourcesResponse(rsp *http.Response) (*GetAllDeletedResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllDeletedResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMarkedResourcesResponse parses an HTTP response from a GetAllMarkedResourcesWithResponse call
func ParseGetAllMarkedResourcesResponse(rsp *http.Response) (*GetAllMarkedResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMarkedResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarkedResourceResponse parses an HTTP response from a GetMarkedResourceWithResponse call
func ParseGetMarkedResourceResponse(rsp *http.Response) (*GetMarkedResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarkedResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptOutResponse parses an HTTP response from a OptOutWithResponse call
func ParseOptOutResponse(rsp *http.Response) (*OptOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindAllResponse parses an HTTP response from a FindAllWithResponse call
func ParseFindAllResponse(rsp *http.Response) (*FindAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatisticsResponse parses an HTTP response from a GetStatisticsWithResponse call
func ParseGetStatisticsResponse(rsp *http.Response) (*GetStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStageExecutionResponse parses an HTTP response from a StageExecutionWithResponse call
func ParseStageExecutionResponse(rsp *http.Response) (*StageExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StageExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTeamsResponse parses an HTTP response from a TeamsWithResponse call
func ParseTeamsResponse(rsp *http.Response) (*TeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePipelinesResponse parses an HTTP response from a PipelinesWithResponse call
func ParsePipelinesResponse(rsp *http.Response) (*PipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJobsResponse parses an HTTP response from a JobsWithResponse call
func ParseJobsResponse(rsp *http.Response) (*JobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResourcesResponse parses an HTTP response from a ResourcesWithResponse call
func ParseResourcesResponse(rsp *http.Response) (*ResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAccountResponse parses an HTTP response from a UpdateAccountWithResponse call
func ParseUpdateAccountResponse(rsp *http.Response) (*UpdateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountsByTypeResponse parses an HTTP response from a GetAccountsByTypeWithResponse call
func ParseGetAccountsByTypeResponse(rsp *http.Response) (*GetAccountsByTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsByTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseValidateCronExpressionResponse parses an HTTP response from a ValidateCronExpressionWithResponse call
func ParseValidateCronExpressionResponse(rsp *http.Response) (*ValidateCronExpressionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateCronExpressionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllMetricAlarmsResponse parses an HTTP response from a AllMetricAlarmsWithResponse call
func ParseAllMetricAlarmsResponse(rsp *http.Response) (*AllMetricAlarmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllMetricAlarmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEcsClusterDescriptionsResponse parses an HTTP response from a GetEcsClusterDescriptionsWithResponse call
func ParseGetEcsClusterDescriptionsResponse(rsp *http.Response) (*GetEcsClusterDescriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEcsClusterDescriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll9Response parses an HTTP response from a All9WithResponse call
func ParseAll9Response(rsp *http.Response) (*All9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll8Response parses an HTTP response from a All8WithResponse call
func ParseAll8Response(rsp *http.Response) (*All8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll7Response parses an HTTP response from a All7WithResponse call
func ParseAll7Response(rsp *http.Response) (*All7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError5Response parses an HTTP response from a Error5WithResponse call
func ParseError5Response(rsp *http.Response) (*Error5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseErrorResponse parses an HTTP response from a ErrorWithResponse call
func ParseErrorResponse(rsp *http.Response) (*ErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError1Response parses an HTTP response from a Error1WithResponse call
func ParseError1Response(rsp *http.Response) (*Error1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError6Response parses an HTTP response from a Error6WithResponse call
func ParseError6Response(rsp *http.Response) (*Error6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError4Response parses an HTTP response from a Error4WithResponse call
func ParseError4Response(rsp *http.Response) (*Error4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError2Response parses an HTTP response from a Error2WithResponse call
func ParseError2Response(rsp *http.Response) (*Error2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseError3Response parses an HTTP response from a Error3WithResponse call
func ParseError3Response(rsp *http.Response) (*Error3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Error3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLatestExecutionsByConfigIdsResponse parses an HTTP response from a GetLatestExecutionsByConfigIdsWithResponse call
func ParseGetLatestExecutionsByConfigIdsResponse(rsp *http.Response) (*GetLatestExecutionsByConfigIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestExecutionsByConfigIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny9Response parses an HTTP response from a Any9WithResponse call
func ParseAny9Response(rsp *http.Response) (*Any9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny4Response parses an HTTP response from a Any4WithResponse call
func ParseAny4Response(rsp *http.Response) (*Any4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny5Response parses an HTTP response from a Any5WithResponse call
func ParseAny5Response(rsp *http.Response) (*Any5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny10Response parses an HTTP response from a Any10WithResponse call
func ParseAny10Response(rsp *http.Response) (*Any10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny8Response parses an HTTP response from a Any8WithResponse call
func ParseAny8Response(rsp *http.Response) (*Any8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny6Response parses an HTTP response from a Any6WithResponse call
func ParseAny6Response(rsp *http.Response) (*Any6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny7Response parses an HTTP response from a Any7WithResponse call
func ParseAny7Response(rsp *http.Response) (*Any7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll6Response parses an HTTP response from a All6WithResponse call
func ParseAll6Response(rsp *http.Response) (*All6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByAccount1Response parses an HTTP response from a AllByAccount1WithResponse call
func ParseAllByAccount1Response(rsp *http.Response) (*AllByAccount1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByAccount1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByAccountAndRegionResponse parses an HTTP response from a AllByAccountAndRegionWithResponse call
func ParseAllByAccountAndRegionResponse(rsp *http.Response) (*AllByAccountAndRegionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByAccountAndRegionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecurityGroup1Response parses an HTTP response from a GetSecurityGroup1WithResponse call
func ParseGetSecurityGroup1Response(rsp *http.Response) (*GetSecurityGroup1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecurityGroup1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFunctionsResponse parses an HTTP response from a FunctionsWithResponse call
func ParseFunctionsResponse(rsp *http.Response) (*FunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHistoryResponse parses an HTTP response from a GetHistoryWithResponse call
func ParseGetHistoryResponse(rsp *http.Response) (*GetHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindImagesResponse parses an HTTP response from a FindImagesWithResponse call
func ParseFindImagesResponse(rsp *http.Response) (*FindImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindTagsResponse parses an HTTP response from a FindTagsWithResponse call
func ParseFindTagsResponse(rsp *http.Response) (*FindTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetImageDetailsResponse parses an HTTP response from a GetImageDetailsWithResponse call
func ParseGetImageDetailsResponse(rsp *http.Response) (*GetImageDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInstanceTypesResponse parses an HTTP response from a InstanceTypesWithResponse call
func ParseInstanceTypesResponse(rsp *http.Response) (*InstanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInstanceDetailsResponse parses an HTTP response from a GetInstanceDetailsWithResponse call
func ParseGetInstanceDetailsResponse(rsp *http.Response) (*GetInstanceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConsoleOutputResponse parses an HTTP response from a GetConsoleOutputWithResponse call
func ParseGetConsoleOutputResponse(rsp *http.Response) (*GetConsoleOutputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleOutputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePreconfiguredWebhooks1Response parses an HTTP response from a PreconfiguredWebhooks1WithResponse call
func ParsePreconfiguredWebhooks1Response(rsp *http.Response) (*PreconfiguredWebhooks1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreconfiguredWebhooks1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKeyPairsResponse parses an HTTP response from a KeyPairsWithResponse call
func ParseKeyPairsResponse(rsp *http.Response) (*KeyPairsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyPairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllResponse parses an HTTP response from a GetAllWithResponse call
func ParseGetAllResponse(rsp *http.Response) (*GetAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoadBalancerDetailsResponse parses an HTTP response from a GetLoadBalancerDetailsWithResponse call
func ParseGetLoadBalancerDetailsResponse(rsp *http.Response) (*GetLoadBalancerDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoadBalancerDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoadBalancerResponse parses an HTTP response from a GetLoadBalancerWithResponse call
func ParseGetLoadBalancerResponse(rsp *http.Response) (*GetLoadBalancerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationDetailsResponse parses an HTTP response from a GetApplicationDetailsWithResponse call
func ParseGetApplicationDetailsResponse(rsp *http.Response) (*GetApplicationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteManifestByAppResponse parses an HTTP response from a DeleteManifestByAppWithResponse call
func ParseDeleteManifestByAppResponse(rsp *http.Response) (*DeleteManifestByAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteManifestByAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConfigByResponse parses an HTTP response from a GetConfigByWithResponse call
func ParseGetConfigByResponse(rsp *http.Response) (*GetConfigByResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateConstraintStatusResponse parses an HTTP response from a UpdateConstraintStatusWithResponse call
func ParseUpdateConstraintStatusResponse(rsp *http.Response) (*UpdateConstraintStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConstraintStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConstraintStateResponse parses an HTTP response from a GetConstraintStateWithResponse call
func ParseGetConstraintStateResponse(rsp *http.Response) (*GetConstraintStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConstraintStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMarkBadResponse parses an HTTP response from a MarkBadWithResponse call
func ParseMarkBadResponse(rsp *http.Response) (*MarkBadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkBadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMarkGoodResponse parses an HTTP response from a MarkGoodWithResponse call
func ParseMarkGoodResponse(rsp *http.Response) (*MarkGoodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkGoodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResumeApplicationResponse parses an HTTP response from a ResumeApplicationWithResponse call
func ParseResumeApplicationResponse(rsp *http.Response) (*ResumeApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePauseApplicationResponse parses an HTTP response from a PauseApplicationWithResponse call
func ParsePauseApplicationResponse(rsp *http.Response) (*PauseApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePinResponse parses an HTTP response from a CreatePinWithResponse call
func ParseCreatePinResponse(rsp *http.Response) (*CreatePinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePinResponse parses an HTTP response from a DeletePinWithResponse call
func ParseDeletePinResponse(rsp *http.Response) (*DeletePinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVetoResponse parses an HTTP response from a VetoWithResponse call
func ParseVetoResponse(rsp *http.Response) (*VetoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VetoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVetoResponse parses an HTTP response from a DeleteVetoWithResponse call
func ParseDeleteVetoResponse(rsp *http.Response) (*DeleteVetoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVetoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpsertManifestResponse parses an HTTP response from a UpsertManifestWithResponse call
func ParseUpsertManifestResponse(rsp *http.Response) (*UpsertManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDiffManifestResponse parses an HTTP response from a DiffManifestWithResponse call
func ParseDiffManifestResponse(rsp *http.Response) (*DiffManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiffManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSchemaResponse parses an HTTP response from a SchemaWithResponse call
func ParseSchemaResponse(rsp *http.Response) (*SchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseValidateManifestResponse parses an HTTP response from a ValidateManifestWithResponse call
func ParseValidateManifestResponse(rsp *http.Response) (*ValidateManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseDeleteManifestResponse parses an HTTP response from a DeleteManifestWithResponse call
func ParseDeleteManifestResponse(rsp *http.Response) (*DeleteManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetManifest1Response parses an HTTP response from a GetManifest1WithResponse call
func ParseGetManifest1Response(rsp *http.Response) (*GetManifest1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManifest1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetManifestYamlResponse parses an HTTP response from a GetManifestYamlWithResponse call
func ParseGetManifestYamlResponse(rsp *http.Response) (*GetManifestYamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManifestYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest DeliveryConfig
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetManifestArtifactsResponse parses an HTTP response from a GetManifestArtifactsWithResponse call
func ParseGetManifestArtifactsResponse(rsp *http.Response) (*GetManifestArtifactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManifestArtifactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentsResponse parses an HTTP response from a GetEnvironmentsWithResponse call
func ParseGetEnvironmentsResponse(rsp *http.Response) (*GetEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGraphqlResponse parses an HTTP response from a GraphqlWithResponse call
func ParseGraphqlResponse(rsp *http.Response) (*GraphqlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProcessNotificationCallback1Response parses an HTTP response from a ProcessNotificationCallback1WithResponse call
func ParseProcessNotificationCallback1Response(rsp *http.Response) (*ProcessNotificationCallback1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessNotificationCallback1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdoptionReportResponse parses an HTTP response from a GetAdoptionReportWithResponse call
func ParseGetAdoptionReportResponse(rsp *http.Response) (*GetAdoptionReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdoptionReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOnboardingReportResponse parses an HTTP response from a GetOnboardingReportWithResponse call
func ParseGetOnboardingReportResponse(rsp *http.Response) (*GetOnboardingReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOnboardingReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDiffResourceResponse parses an HTTP response from a DiffResourceWithResponse call
func ParseDiffResourceResponse(rsp *http.Response) (*DiffResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiffResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportResource1Response parses an HTTP response from a ExportResource1WithResponse call
func ParseExportResource1Response(rsp *http.Response) (*ExportResource1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportResource1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportResourceResponse parses an HTTP response from a ExportResourceWithResponse call
func ParseExportResourceResponse(rsp *http.Response) (*ExportResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceYamlResponse parses an HTTP response from a GetResourceYamlWithResponse call
func ParseGetResourceYamlResponse(rsp *http.Response) (*GetResourceYamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest Resource
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseResumeResourceResponse parses an HTTP response from a ResumeResourceWithResponse call
func ParseResumeResourceResponse(rsp *http.Response) (*ResumeResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePauseResourceResponse parses an HTTP response from a PauseResourceWithResponse call
func ParsePauseResourceResponse(rsp *http.Response) (*PauseResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceStatusResponse parses an HTTP response from a GetResourceStatusWithResponse call
func ParseGetResourceStatusResponse(rsp *http.Response) (*GetResourceStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOverrideVerificationResponse parses an HTTP response from a OverrideVerificationWithResponse call
func ParseOverrideVerificationResponse(rsp *http.Response) (*OverrideVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverrideVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetryVerificationResponse parses an HTTP response from a RetryVerificationWithResponse call
func ParseRetryVerificationResponse(rsp *http.Response) (*RetryVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetryVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetManifestResponse parses an HTTP response from a GetManifestWithResponse call
func ParseGetManifestResponse(rsp *http.Response) (*GetManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll5Response parses an HTTP response from a All5WithResponse call
func ParseAll5Response(rsp *http.Response) (*All5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByCloudProvider1Response parses an HTTP response from a AllByCloudProvider1WithResponse call
func ParseAllByCloudProvider1Response(rsp *http.Response) (*AllByCloudProvider1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByCloudProvider1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNamesResponse parses an HTTP response from a NamesWithResponse call
func ParseNamesResponse(rsp *http.Response) (*NamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProcessNotificationCallbackResponse parses an HTTP response from a ProcessNotificationCallbackWithResponse call
func ParseProcessNotificationCallbackResponse(rsp *http.Response) (*ProcessNotificationCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessNotificationCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNotificationTypeMetadataResponse parses an HTTP response from a GetNotificationTypeMetadataWithResponse call
func ParseGetNotificationTypeMetadataResponse(rsp *http.Response) (*GetNotificationTypeMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationTypeMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePipeline2Response parses an HTTP response from a DeletePipeline2WithResponse call
func ParseDeletePipeline2Response(rsp *http.Response) (*DeletePipeline2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipeline2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNotificationConfigResponse parses an HTTP response from a GetNotificationConfigWithResponse call
func ParseGetNotificationConfigResponse(rsp *http.Response) (*GetNotificationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSaveNotificationConfigResponse parses an HTTP response from a SaveNotificationConfigWithResponse call
func ParseSaveNotificationConfigResponse(rsp *http.Response) (*SaveNotificationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SaveNotificationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllPipelineConfigsResponse parses an HTTP response from a GetAllPipelineConfigsWithResponse call
func ParseGetAllPipelineConfigsResponse(rsp *http.Response) (*GetAllPipelineConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPipelineConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseConvertPipelineConfigToPipelineTemplateResponse parses an HTTP response from a ConvertPipelineConfigToPipelineTemplateWithResponse call
func ParseConvertPipelineConfigToPipelineTemplateResponse(rsp *http.Response) (*ConvertPipelineConfigToPipelineTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertPipelineConfigToPipelineTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineConfigHistory1Response parses an HTTP response from a GetPipelineConfigHistory1WithResponse call
func ParseGetPipelineConfigHistory1Response(rsp *http.Response) (*GetPipelineConfigHistory1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineConfigHistory1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList3Response parses an HTTP response from a List3WithResponse call
func ParseList3Response(rsp *http.Response) (*List3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate1Response parses an HTTP response from a Create1WithResponse call
func ParseCreate1Response(rsp *http.Response) (*Create1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveTemplatesResponse parses an HTTP response from a ResolveTemplatesWithResponse call
func ParseResolveTemplatesResponse(rsp *http.Response) (*ResolveTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete2Response parses an HTTP response from a Delete2WithResponse call
func ParseDelete2Response(rsp *http.Response) (*Delete2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet3Response parses an HTTP response from a Get3WithResponse call
func ParseGet3Response(rsp *http.Response) (*Get3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate1Response parses an HTTP response from a Update1WithResponse call
func ParseUpdate1Response(rsp *http.Response) (*Update1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPipelineTemplateDependents1Response parses an HTTP response from a ListPipelineTemplateDependents1WithResponse call
func ParseListPipelineTemplateDependents1Response(rsp *http.Response) (*ListPipelineTemplateDependents1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineTemplateDependents1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSavePipelineResponse parses an HTTP response from a SavePipelineWithResponse call
func ParseSavePipelineResponse(rsp *http.Response) (*SavePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBulksavePipelineResponse parses an HTTP response from a BulksavePipelineWithResponse call
func ParseBulksavePipelineResponse(rsp *http.Response) (*BulksavePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulksavePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRenamePipelineResponse parses an HTTP response from a RenamePipelineWithResponse call
func ParseRenamePipelineResponse(rsp *http.Response) (*RenamePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenamePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartResponse parses an HTTP response from a StartWithResponse call
func ParseStartResponse(rsp *http.Response) (*StartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInvokePipelineConfigViaEchoResponse parses an HTTP response from a InvokePipelineConfigViaEchoWithResponse call
func ParseInvokePipelineConfigViaEchoResponse(rsp *http.Response) (*InvokePipelineConfigViaEchoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvokePipelineConfigViaEchoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInvokePipelineConfigResponse parses an HTTP response from a InvokePipelineConfigWithResponse call
func ParseInvokePipelineConfigResponse(rsp *http.Response) (*InvokePipelineConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvokePipelineConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePipeline1Response parses an HTTP response from a DeletePipeline1WithResponse call
func ParseDeletePipeline1Response(rsp *http.Response) (*DeletePipeline1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipeline1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePipelineResponse parses an HTTP response from a DeletePipelineWithResponse call
func ParseDeletePipelineResponse(rsp *http.Response) (*DeletePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineResponse parses an HTTP response from a GetPipelineWithResponse call
func ParseGetPipelineResponse(rsp *http.Response) (*GetPipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePipelineResponse parses an HTTP response from a UpdatePipelineWithResponse call
func ParseUpdatePipelineResponse(rsp *http.Response) (*UpdatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelPipelineResponse parses an HTTP response from a CancelPipelineWithResponse call
func ParseCancelPipelineResponse(rsp *http.Response) (*CancelPipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateExpressionForExecutionResponse parses an HTTP response from a EvaluateExpressionForExecutionWithResponse call
func ParseEvaluateExpressionForExecutionResponse(rsp *http.Response) (*EvaluateExpressionForExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateExpressionForExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateExpressionForExecutionViaPOST1Response parses an HTTP response from a EvaluateExpressionForExecutionViaPOST1WithResponse call
func ParseEvaluateExpressionForExecutionViaPOST1Response(rsp *http.Response) (*EvaluateExpressionForExecutionViaPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateExpressionForExecutionViaPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateVariablesResponse parses an HTTP response from a EvaluateVariablesWithResponse call
func ParseEvaluateVariablesResponse(rsp *http.Response) (*EvaluateVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePausePipelineResponse parses an HTTP response from a PausePipelineWithResponse call
func ParsePausePipelineResponse(rsp *http.Response) (*PausePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PausePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResumePipelineResponse parses an HTTP response from a ResumePipelineWithResponse call
func ParseResumePipelineResponse(rsp *http.Response) (*ResumePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStageResponse parses an HTTP response from a UpdateStageWithResponse call
func ParseUpdateStageResponse(rsp *http.Response) (*UpdateStageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestartStageResponse parses an HTTP response from a RestartStageWithResponse call
func ParseRestartStageResponse(rsp *http.Response) (*RestartStageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateExpressionForExecutionAtStageResponse parses an HTTP response from a EvaluateExpressionForExecutionAtStageWithResponse call
func ParseEvaluateExpressionForExecutionAtStageResponse(rsp *http.Response) (*EvaluateExpressionForExecutionAtStageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateExpressionForExecutionAtStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginManifestResponse parses an HTTP response from a GetPluginManifestWithResponse call
func ParseGetPluginManifestResponse(rsp *http.Response) (*GetPluginManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginAssetResponse parses an HTTP response from a GetPluginAssetWithResponse call
func ParseGetPluginAssetResponse(rsp *http.Response) (*GetPluginAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllPluginInfoResponse parses an HTTP response from a GetAllPluginInfoWithResponse call
func ParseGetAllPluginInfoResponse(rsp *http.Response) (*GetAllPluginInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPluginInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePersistPluginInfoResponse parses an HTTP response from a PersistPluginInfoWithResponse call
func ParsePersistPluginInfoResponse(rsp *http.Response) (*PersistPluginInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PersistPluginInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePersistPluginInfo1Response parses an HTTP response from a PersistPluginInfo1WithResponse call
func ParsePersistPluginInfo1Response(rsp *http.Response) (*PersistPluginInfo1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PersistPluginInfo1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePluginInfoResponse parses an HTTP response from a DeletePluginInfoWithResponse call
func ParseDeletePluginInfoResponse(rsp *http.Response) (*DeletePluginInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePluginInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInstalledPluginsResponse parses an HTTP response from a GetInstalledPluginsWithResponse call
func ParseGetInstalledPluginsResponse(rsp *http.Response) (*GetInstalledPluginsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstalledPluginsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishPluginResponse parses an HTTP response from a PublishPluginWithResponse call
func ParsePublishPluginResponse(rsp *http.Response) (*PublishPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll4Response parses an HTTP response from a All4WithResponse call
func ParseAll4Response(rsp *http.Response) (*All4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet2Response parses an HTTP response from a Get2WithResponse call
func ParseGet2Response(rsp *http.Response) (*Get2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllPipelinesForProjectResponse parses an HTTP response from a AllPipelinesForProjectWithResponse call
func ParseAllPipelinesForProjectResponse(rsp *http.Response) (*AllPipelinesForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllPipelinesForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList2Response parses an HTTP response from a List2WithResponse call
func ParseList2Response(rsp *http.Response) (*List2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny3Response parses an HTTP response from a Any3WithResponse call
func ParseAny3Response(rsp *http.Response) (*Any3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAnyResponse parses an HTTP response from a AnyWithResponse call
func ParseAnyResponse(rsp *http.Response) (*AnyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny1Response parses an HTTP response from a Any1WithResponse call
func ParseAny1Response(rsp *http.Response) (*Any1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAny2Response parses an HTTP response from a Any2WithResponse call
func ParseAny2Response(rsp *http.Response) (*Any2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Any2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll3Response parses an HTTP response from a All3WithResponse call
func ParseAll3Response(rsp *http.Response) (*All3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApi1Response parses an HTTP response from a Api1WithResponse call
func ParseApi1Response(rsp *http.Response) (*Api1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Api1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll2Response parses an HTTP response from a All2WithResponse call
func ParseAll2Response(rsp *http.Response) (*All2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchResponse parses an HTTP response from a SearchWithResponse call
func ParseSearchResponse(rsp *http.Response) (*SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAll1Response parses an HTTP response from a All1WithResponse call
func ParseAll1Response(rsp *http.Response) (*All1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &All1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByAccountResponse parses an HTTP response from a AllByAccountWithResponse call
func ParseAllByAccountResponse(rsp *http.Response) (*AllByAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecurityGroupResponse parses an HTTP response from a GetSecurityGroupWithResponse call
func ParseGetSecurityGroupResponse(rsp *http.Response) (*GetSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerGroupsResponse parses an HTTP response from a GetServerGroupsWithResponse call
func ParseGetServerGroupsResponse(rsp *http.Response) (*GetServerGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceInstanceResponse parses an HTTP response from a GetServiceInstanceWithResponse call
func ParseGetServiceInstanceResponse(rsp *http.Response) (*GetServiceInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllResponse parses an HTTP response from a AllWithResponse call
func ParseAllResponse(rsp *http.Response) (*AllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSaveStrategyResponse parses an HTTP response from a SaveStrategyWithResponse call
func ParseSaveStrategyResponse(rsp *http.Response) (*SaveStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SaveStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRenameStrategyResponse parses an HTTP response from a RenameStrategyWithResponse call
func ParseRenameStrategyResponse(rsp *http.Response) (*RenameStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenameStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStrategyResponse parses an HTTP response from a DeleteStrategyWithResponse call
func ParseDeleteStrategyResponse(rsp *http.Response) (*DeleteStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStrategyResponse parses an HTTP response from a UpdateStrategyWithResponse call
func ParseUpdateStrategyResponse(rsp *http.Response) (*UpdateStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllStrategyConfigsResponse parses an HTTP response from a GetAllStrategyConfigsWithResponse call
func ParseGetAllStrategyConfigsResponse(rsp *http.Response) (*GetAllStrategyConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStrategyConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineConfigHistoryResponse parses an HTTP response from a GetPipelineConfigHistoryWithResponse call
func ParseGetPipelineConfigHistoryResponse(rsp *http.Response) (*GetPipelineConfigHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineConfigHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSubnetsResponse parses an HTTP response from a SubnetsWithResponse call
func ParseSubnetsResponse(rsp *http.Response) (*SubnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllByCloudProviderResponse parses an HTTP response from a AllByCloudProviderWithResponse call
func ParseAllByCloudProviderResponse(rsp *http.Response) (*AllByCloudProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllByCloudProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList1Response parses an HTTP response from a List1WithResponse call
func ParseList1Response(rsp *http.Response) (*List1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostResponse parses an HTTP response from a PostWithResponse call
func ParsePostResponse(rsp *http.Response) (*PostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet1Response parses an HTTP response from a Get1WithResponse call
func ParseGet1Response(rsp *http.Response) (*Get1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete1Response parses an HTTP response from a Delete1WithResponse call
func ParseDelete1Response(rsp *http.Response) (*Delete1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTaskResponse parses an HTTP response from a TaskWithResponse call
func ParseTaskResponse(rsp *http.Response) (*TaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelTasksResponse parses an HTTP response from a CancelTasksWithResponse call
func ParseCancelTasksResponse(rsp *http.Response) (*CancelTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTaskResponse parses an HTTP response from a DeleteTaskWithResponse call
func ParseDeleteTaskResponse(rsp *http.Response) (*DeleteTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelTaskResponse parses an HTTP response from a CancelTaskWithResponse call
func ParseCancelTaskResponse(rsp *http.Response) (*CancelTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskDetailsResponse parses an HTTP response from a GetTaskDetailsWithResponse call
func ParseGetTaskDetailsResponse(rsp *http.Response) (*GetTaskDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiResponse parses an HTTP response from a ApiWithResponse call
func ParseApiResponse(rsp *http.Response) (*ApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAsyncApiResponse parses an HTTP response from a AsyncApiWithResponse call
func ParseAsyncApiResponse(rsp *http.Response) (*AsyncApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AsyncApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData5Response parses an HTTP response from a GetAdhocData5WithResponse call
func ParseGetAdhocData5Response(rsp *http.Response) (*GetAdhocData5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocDataResponse parses an HTTP response from a GetAdhocDataWithResponse call
func ParseGetAdhocDataResponse(rsp *http.Response) (*GetAdhocDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData1Response parses an HTTP response from a GetAdhocData1WithResponse call
func ParseGetAdhocData1Response(rsp *http.Response) (*GetAdhocData1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData6Response parses an HTTP response from a GetAdhocData6WithResponse call
func ParseGetAdhocData6Response(rsp *http.Response) (*GetAdhocData6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData4Response parses an HTTP response from a GetAdhocData4WithResponse call
func ParseGetAdhocData4Response(rsp *http.Response) (*GetAdhocData4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData2Response parses an HTTP response from a GetAdhocData2WithResponse call
func ParseGetAdhocData2Response(rsp *http.Response) (*GetAdhocData2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdhocData3Response parses an HTTP response from a GetAdhocData3WithResponse call
func ParseGetAdhocData3Response(rsp *http.Response) (*GetAdhocData3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdhocData3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStaticDataResponse parses an HTTP response from a GetStaticDataWithResponse call
func ParseGetStaticDataResponse(rsp *http.Response) (*GetStaticDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaticDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuildMastersResponse parses an HTTP response from a GetBuildMastersWithResponse call
func ParseGetBuildMastersResponse(rsp *http.Response) (*GetBuildMastersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildMastersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuildResponse parses an HTTP response from a GetBuildWithResponse call
func ParseGetBuildResponse(rsp *http.Response) (*GetBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuildsResponse parses an HTTP response from a GetBuildsWithResponse call
func ParseGetBuildsResponse(rsp *http.Response) (*GetBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobsForBuildMasterResponse parses an HTTP response from a GetJobsForBuildMasterWithResponse call
func ParseGetJobsForBuildMasterResponse(rsp *http.Response) (*GetJobsForBuildMasterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsForBuildMasterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobConfigResponse parses an HTTP response from a GetJobConfigWithResponse call
func ParseGetJobConfigResponse(rsp *http.Response) (*GetJobConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInitiateCanaryWithConfigResponse parses an HTTP response from a InitiateCanaryWithConfigWithResponse call
func ParseInitiateCanaryWithConfigResponse(rsp *http.Response) (*InitiateCanaryWithConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitiateCanaryWithConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInitiateCanaryResponse parses an HTTP response from a InitiateCanaryWithResponse call
func ParseInitiateCanaryResponse(rsp *http.Response) (*InitiateCanaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitiateCanaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCanaryResult1Response parses an HTTP response from a GetCanaryResult1WithResponse call
func ParseGetCanaryResult1Response(rsp *http.Response) (*GetCanaryResult1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCanaryResult1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCanaryResultResponse parses an HTTP response from a GetCanaryResultWithResponse call
func ParseGetCanaryResultResponse(rsp *http.Response) (*GetCanaryResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCanaryResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCredentialsResponse parses an HTTP response from a ListCredentialsWithResponse call
func ParseListCredentialsResponse(rsp *http.Response) (*ListCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListJudgesResponse parses an HTTP response from a ListJudgesWithResponse call
func ParseListJudgesResponse(rsp *http.Response) (*ListJudgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJudgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListMetricsServiceMetadataResponse parses an HTTP response from a ListMetricsServiceMetadataWithResponse call
func ParseListMetricsServiceMetadataResponse(rsp *http.Response) (*ListMetricsServiceMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsServiceMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricSetPairListResponse parses an HTTP response from a GetMetricSetPairListWithResponse call
func ParseGetMetricSetPairListResponse(rsp *http.Response) (*GetMetricSetPairListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricSetPairListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCanaryResultsByApplicationResponse parses an HTTP response from a GetCanaryResultsByApplicationWithResponse call
func ParseGetCanaryResultsByApplicationResponse(rsp *http.Response) (*GetCanaryResultsByApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCanaryResultsByApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCanaryConfigsResponse parses an HTTP response from a GetCanaryConfigsWithResponse call
func ParseGetCanaryConfigsResponse(rsp *http.Response) (*GetCanaryConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCanaryConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCanaryConfigResponse parses an HTTP response from a CreateCanaryConfigWithResponse call
func ParseCreateCanaryConfigResponse(rsp *http.Response) (*CreateCanaryConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCanaryConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCanaryConfigResponse parses an HTTP response from a DeleteCanaryConfigWithResponse call
func ParseDeleteCanaryConfigResponse(rsp *http.Response) (*DeleteCanaryConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCanaryConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCanaryConfigResponse parses an HTTP response from a GetCanaryConfigWithResponse call
func ParseGetCanaryConfigResponse(rsp *http.Response) (*GetCanaryConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCanaryConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCanaryConfigResponse parses an HTTP response from a UpdateCanaryConfigWithResponse call
func ParseUpdateCanaryConfigResponse(rsp *http.Response) (*UpdateCanaryConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCanaryConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListResponse parses an HTTP response from a ListWithResponse call
func ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlanResponse parses an HTTP response from a PlanWithResponse call
func ParsePlanResponse(rsp *http.Response) (*PlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListVersionsResponse parses an HTTP response from a ListVersionsWithResponse call
func ParseListVersionsResponse(rsp *http.Response) (*ListVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPipelineTemplateDependentsResponse parses an HTTP response from a ListPipelineTemplateDependentsWithResponse call
func ParseListPipelineTemplateDependentsResponse(rsp *http.Response) (*ListPipelineTemplateDependentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineTemplateDependentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV3GetBuildMastersResponse parses an HTTP response from a V3GetBuildMastersWithResponse call
func ParseV3GetBuildMastersResponse(rsp *http.Response) (*V3GetBuildMastersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V3GetBuildMastersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV3GetBuildResponse parses an HTTP response from a V3GetBuildWithResponse call
func ParseV3GetBuildResponse(rsp *http.Response) (*V3GetBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V3GetBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV3GetBuildsResponse parses an HTTP response from a V3GetBuildsWithResponse call
func ParseV3GetBuildsResponse(rsp *http.Response) (*V3GetBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V3GetBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV3GetJobConfigResponse parses an HTTP response from a V3GetJobConfigWithResponse call
func ParseV3GetJobConfigResponse(rsp *http.Response) (*V3GetJobConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V3GetJobConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV3GetJobsForBuildMasterResponse parses an HTTP response from a V3GetJobsForBuildMasterWithResponse call
func ParseV3GetJobsForBuildMasterResponse(rsp *http.Response) (*V3GetJobsForBuildMasterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V3GetJobsForBuildMasterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVpcsResponse parses an HTTP response from a VpcsWithResponse call
func ParseVpcsResponse(rsp *http.Response) (*VpcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VpcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWebhooks1Response parses an HTTP response from a Webhooks1WithResponse call
func ParseWebhooks1Response(rsp *http.Response) (*Webhooks1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Webhooks1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePreconfiguredWebhooksResponse parses an HTTP response from a PreconfiguredWebhooksWithResponse call
func ParsePreconfiguredWebhooksResponse(rsp *http.Response) (*PreconfiguredWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreconfiguredWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWebhooksResponse parses an HTTP response from a WebhooksWithResponse call
func ParseWebhooksResponse(rsp *http.Response) (*WebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
